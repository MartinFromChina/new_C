; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\wm8978.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\wm8978.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\HARDWARE\LED -I..\HARDWARE\LCD -I..\HARDWARE\KEY -I..\HARDWARE\SRAM -I..\HARDWARE\SDIO -I..\MALLOC -I..\USMART -I..\HARDWARE\SPI -I..\HARDWARE\W25QXX -I..\FATFS\exfuns -I..\FATFS\src -I..\TEXT -I..\FWLIB\inc -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\I2S -I..\HARDWARE\WM8978 -I..\APP -I..\AUDIOCODEC\wav -I..\new_user -I..\new_user\task -I..\new_user\MVC -I..\..\..\module\common -I..\..\..\module\common\InsertLog -I..\..\..\module\common\loopqueue -I..\..\..\module\common\StateMachine -I..\..\..\module\common\priorityqueue -I..\..\..\module\common\Math -I..\..\..\module\component\const_loop_scheduler -I..\..\..\module\component\const_loop_scheduler\TemplateTask -I..\..\..\module\component\const_loop_scheduler\HierarchicalSM -I..\..\..\module\component\BlockableStateMachine -I..\..\..\module\customize\ButtonModule -I..\..\..\module\external\Segger\SEGGER_RTT_V640\Syscalls -I..\..\..\module\external\Segger\SEGGER_RTT_V640\RTT -I.\RTE\_AudioPlayer -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include" -I"D:\Program Files\ARM\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_COMPILER_PRESENT -DX_TASK_LOG_DEBUG_METHOD=SeggerRTT_LogDebug --omf_browse=..\obj\wm8978.crf ..\HARDWARE\WM8978\wm8978.c]
                          THUMB

                          AREA ||i.WM8978_3D_Set||, CODE, READONLY, ALIGN=1

                  WM8978_3D_Set PROC
;;;226    //depth:0~15(3D强度,0最弱,15最强)
;;;227    void WM8978_3D_Set(u8 depth)
000000  b510              PUSH     {r4,lr}
;;;228    { 
000002  4604              MOV      r4,r0
;;;229    	depth&=0XF;//限定范围 
000004  f004040f          AND      r4,r4,#0xf
;;;230     	WM8978_Write_Reg(41,depth);	//R41,3D环绕设置 	
000008  4621              MOV      r1,r4
00000a  2029              MOVS     r0,#0x29
00000c  f7fffffe          BL       WM8978_Write_Reg
;;;231    }
000010  bd10              POP      {r4,pc}
;;;232    //设置EQ/3D作用方向
                          ENDP


                          AREA ||i.WM8978_ADDA_Cfg||, CODE, READONLY, ALIGN=1

                  WM8978_ADDA_Cfg PROC
;;;110    //dacen:dac使能(1)/关闭(0)
;;;111    void WM8978_ADDA_Cfg(u8 dacen,u8 adcen)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;113    	u16 regval;
;;;114    	regval=WM8978_Read_Reg(3);	//读取R3
000006  2003              MOVS     r0,#3
000008  f7fffffe          BL       WM8978_Read_Reg
00000c  4604              MOV      r4,r0
;;;115    	if(dacen)regval|=3<<0;		//R3最低2个位设置为1,开启DACR&DACL
00000e  b115              CBZ      r5,|L2.22|
000010  f0440403          ORR      r4,r4,#3
000014  e001              B        |L2.26|
                  |L2.22|
;;;116    	else regval&=~(3<<0);		//R3最低2个位清零,关闭DACR&DACL.
000016  f0240403          BIC      r4,r4,#3
                  |L2.26|
;;;117    	WM8978_Write_Reg(3,regval);	//设置R3
00001a  4621              MOV      r1,r4
00001c  2003              MOVS     r0,#3
00001e  f7fffffe          BL       WM8978_Write_Reg
;;;118    	regval=WM8978_Read_Reg(2);	//读取R2
000022  2002              MOVS     r0,#2
000024  f7fffffe          BL       WM8978_Read_Reg
000028  4604              MOV      r4,r0
;;;119    	if(adcen)regval|=3<<0;		//R2最低2个位设置为1,开启ADCR&ADCL
00002a  b116              CBZ      r6,|L2.50|
00002c  f0440403          ORR      r4,r4,#3
000030  e001              B        |L2.54|
                  |L2.50|
;;;120    	else regval&=~(3<<0);		//R2最低2个位清零,关闭ADCR&ADCL.
000032  f0240403          BIC      r4,r4,#3
                  |L2.54|
;;;121    	WM8978_Write_Reg(2,regval);	//设置R2	
000036  4621              MOV      r1,r4
000038  2002              MOVS     r0,#2
00003a  f7fffffe          BL       WM8978_Write_Reg
;;;122    }
00003e  bd70              POP      {r4-r6,pc}
;;;123    //WM8978 输入通道配置 
                          ENDP


                          AREA ||i.WM8978_AUX_Gain||, CODE, READONLY, ALIGN=1

                  WM8978_AUX_Gain PROC
;;;182    //gain:0~7,0表示通道禁止,1~7,对应-12dB~6dB,3dB/Step
;;;183    void WM8978_AUX_Gain(u8 gain)
000000  b570              PUSH     {r4-r6,lr}
;;;184    {
000002  4604              MOV      r4,r0
;;;185    	u16 regval;
;;;186    	gain&=0X07;
000004  f0040407          AND      r4,r4,#7
;;;187    	regval=WM8978_Read_Reg(47);	//读取R47
000008  202f              MOVS     r0,#0x2f
00000a  f7fffffe          BL       WM8978_Read_Reg
00000e  4605              MOV      r5,r0
;;;188    	regval&=~(7<<0);			//清除原来的设置 
000010  f0250507          BIC      r5,r5,#7
;;;189     	WM8978_Write_Reg(47,regval|gain<<0);//设置R47
000014  ea450104          ORR      r1,r5,r4
000018  202f              MOVS     r0,#0x2f
00001a  f7fffffe          BL       WM8978_Write_Reg
;;;190    	regval=WM8978_Read_Reg(48);	//读取R48
00001e  2030              MOVS     r0,#0x30
000020  f7fffffe          BL       WM8978_Read_Reg
000024  4605              MOV      r5,r0
;;;191    	regval&=~(7<<0);			//清除原来的设置 
000026  f0250507          BIC      r5,r5,#7
;;;192     	WM8978_Write_Reg(48,regval|gain<<0);//设置R48
00002a  ea450104          ORR      r1,r5,r4
00002e  2030              MOVS     r0,#0x30
000030  f7fffffe          BL       WM8978_Write_Reg
;;;193    }  
000034  bd70              POP      {r4-r6,pc}
;;;194    //设置I2S工作模式
                          ENDP


                          AREA ||i.WM8978_EQ1_Set||, CODE, READONLY, ALIGN=1

                  WM8978_EQ1_Set PROC
;;;246    //gain:增益,0~24,对应-12~+12dB
;;;247    void WM8978_EQ1_Set(u8 cfreq,u8 gain)
000000  b570              PUSH     {r4-r6,lr}
;;;248    { 
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;249    	u16 regval;
;;;250    	cfreq&=0X3;//限定范围 
000006  f0060603          AND      r6,r6,#3
;;;251    	if(gain>24)gain=24;
00000a  2c18              CMP      r4,#0x18
00000c  dd00              BLE      |L4.16|
00000e  2418              MOVS     r4,#0x18
                  |L4.16|
;;;252    	gain=24-gain;
000010  f1c40018          RSB      r0,r4,#0x18
000014  b2c4              UXTB     r4,r0
;;;253    	regval=WM8978_Read_Reg(18);
000016  2012              MOVS     r0,#0x12
000018  f7fffffe          BL       WM8978_Read_Reg
00001c  4605              MOV      r5,r0
;;;254    	regval&=0X100;
00001e  f4057580          AND      r5,r5,#0x100
;;;255    	regval|=cfreq<<5;	//设置截止频率 
000022  ea451546          ORR      r5,r5,r6,LSL #5
;;;256    	regval|=gain;		//设置增益	
000026  4325              ORRS     r5,r5,r4
;;;257     	WM8978_Write_Reg(18,regval);//R18,EQ1设置 	
000028  4629              MOV      r1,r5
00002a  2012              MOVS     r0,#0x12
00002c  f7fffffe          BL       WM8978_Write_Reg
;;;258    }
000030  bd70              POP      {r4-r6,pc}
;;;259    //设置EQ2
                          ENDP


                          AREA ||i.WM8978_EQ2_Set||, CODE, READONLY, ALIGN=1

                  WM8978_EQ2_Set PROC
;;;261    //gain:增益,0~24,对应-12~+12dB
;;;262    void WM8978_EQ2_Set(u8 cfreq,u8 gain)
000000  b570              PUSH     {r4-r6,lr}
;;;263    { 
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;264    	u16 regval=0;
000006  2600              MOVS     r6,#0
;;;265    	cfreq&=0X3;//限定范围 
000008  f0050503          AND      r5,r5,#3
;;;266    	if(gain>24)gain=24;
00000c  2c18              CMP      r4,#0x18
00000e  dd00              BLE      |L5.18|
000010  2418              MOVS     r4,#0x18
                  |L5.18|
;;;267    	gain=24-gain; 
000012  f1c40018          RSB      r0,r4,#0x18
000016  b2c4              UXTB     r4,r0
;;;268    	regval|=cfreq<<5;	//设置截止频率 
000018  ea461645          ORR      r6,r6,r5,LSL #5
;;;269    	regval|=gain;		//设置增益	
00001c  4326              ORRS     r6,r6,r4
;;;270     	WM8978_Write_Reg(19,regval);//R19,EQ2设置 	
00001e  4631              MOV      r1,r6
000020  2013              MOVS     r0,#0x13
000022  f7fffffe          BL       WM8978_Write_Reg
;;;271    }
000026  bd70              POP      {r4-r6,pc}
;;;272    //设置EQ3
                          ENDP


                          AREA ||i.WM8978_EQ3_Set||, CODE, READONLY, ALIGN=1

                  WM8978_EQ3_Set PROC
;;;274    //gain:增益,0~24,对应-12~+12dB
;;;275    void WM8978_EQ3_Set(u8 cfreq,u8 gain)
000000  b570              PUSH     {r4-r6,lr}
;;;276    { 
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;277    	u16 regval=0;
000006  2600              MOVS     r6,#0
;;;278    	cfreq&=0X3;//限定范围 
000008  f0050503          AND      r5,r5,#3
;;;279    	if(gain>24)gain=24;
00000c  2c18              CMP      r4,#0x18
00000e  dd00              BLE      |L6.18|
000010  2418              MOVS     r4,#0x18
                  |L6.18|
;;;280    	gain=24-gain; 
000012  f1c40018          RSB      r0,r4,#0x18
000016  b2c4              UXTB     r4,r0
;;;281    	regval|=cfreq<<5;	//设置截止频率 
000018  ea461645          ORR      r6,r6,r5,LSL #5
;;;282    	regval|=gain;		//设置增益	
00001c  4326              ORRS     r6,r6,r4
;;;283     	WM8978_Write_Reg(20,regval);//R20,EQ3设置 	
00001e  4631              MOV      r1,r6
000020  2014              MOVS     r0,#0x14
000022  f7fffffe          BL       WM8978_Write_Reg
;;;284    }
000026  bd70              POP      {r4-r6,pc}
;;;285    //设置EQ4
                          ENDP


                          AREA ||i.WM8978_EQ4_Set||, CODE, READONLY, ALIGN=1

                  WM8978_EQ4_Set PROC
;;;287    //gain:增益,0~24,对应-12~+12dB
;;;288    void WM8978_EQ4_Set(u8 cfreq,u8 gain)
000000  b570              PUSH     {r4-r6,lr}
;;;289    { 
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;290    	u16 regval=0;
000006  2600              MOVS     r6,#0
;;;291    	cfreq&=0X3;//限定范围 
000008  f0050503          AND      r5,r5,#3
;;;292    	if(gain>24)gain=24;
00000c  2c18              CMP      r4,#0x18
00000e  dd00              BLE      |L7.18|
000010  2418              MOVS     r4,#0x18
                  |L7.18|
;;;293    	gain=24-gain; 
000012  f1c40018          RSB      r0,r4,#0x18
000016  b2c4              UXTB     r4,r0
;;;294    	regval|=cfreq<<5;	//设置截止频率 
000018  ea461645          ORR      r6,r6,r5,LSL #5
;;;295    	regval|=gain;		//设置增益	
00001c  4326              ORRS     r6,r6,r4
;;;296     	WM8978_Write_Reg(21,regval);//R21,EQ4设置 	
00001e  4631              MOV      r1,r6
000020  2015              MOVS     r0,#0x15
000022  f7fffffe          BL       WM8978_Write_Reg
;;;297    }
000026  bd70              POP      {r4-r6,pc}
;;;298    //设置EQ5
                          ENDP


                          AREA ||i.WM8978_EQ5_Set||, CODE, READONLY, ALIGN=1

                  WM8978_EQ5_Set PROC
;;;300    //gain:增益,0~24,对应-12~+12dB
;;;301    void WM8978_EQ5_Set(u8 cfreq,u8 gain)
000000  b570              PUSH     {r4-r6,lr}
;;;302    { 
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;303    	u16 regval=0;
000006  2600              MOVS     r6,#0
;;;304    	cfreq&=0X3;//限定范围 
000008  f0050503          AND      r5,r5,#3
;;;305    	if(gain>24)gain=24;
00000c  2c18              CMP      r4,#0x18
00000e  dd00              BLE      |L8.18|
000010  2418              MOVS     r4,#0x18
                  |L8.18|
;;;306    	gain=24-gain; 
000012  f1c40018          RSB      r0,r4,#0x18
000016  b2c4              UXTB     r4,r0
;;;307    	regval|=cfreq<<5;	//设置截止频率 
000018  ea461645          ORR      r6,r6,r5,LSL #5
;;;308    	regval|=gain;		//设置增益	
00001c  4326              ORRS     r6,r6,r4
;;;309     	WM8978_Write_Reg(22,regval);//R22,EQ5设置 	
00001e  4631              MOV      r1,r6
000020  2016              MOVS     r0,#0x16
000022  f7fffffe          BL       WM8978_Write_Reg
;;;310    }
000026  bd70              POP      {r4-r6,pc}
;;;311    
                          ENDP


                          AREA ||i.WM8978_EQ_3D_Dir||, CODE, READONLY, ALIGN=1

                  WM8978_EQ_3D_Dir PROC
;;;234    //    1,在DAC起作用(默认)
;;;235    void WM8978_EQ_3D_Dir(u8 dir)
000000  b570              PUSH     {r4-r6,lr}
;;;236    {
000002  4605              MOV      r5,r0
;;;237    	u16 regval; 
;;;238    	regval=WM8978_Read_Reg(0X12);
000004  2012              MOVS     r0,#0x12
000006  f7fffffe          BL       WM8978_Read_Reg
00000a  4604              MOV      r4,r0
;;;239    	if(dir)regval|=1<<8;
00000c  b115              CBZ      r5,|L9.20|
00000e  f4447480          ORR      r4,r4,#0x100
000012  e001              B        |L9.24|
                  |L9.20|
;;;240    	else regval&=~(1<<8); 
000014  f4247480          BIC      r4,r4,#0x100
                  |L9.24|
;;;241     	WM8978_Write_Reg(18,regval);//R18,EQ1的第9位控制EQ/3D方向
000018  4621              MOV      r1,r4
00001a  2012              MOVS     r0,#0x12
00001c  f7fffffe          BL       WM8978_Write_Reg
;;;242    }
000020  bd70              POP      {r4-r6,pc}
;;;243    
                          ENDP


                          AREA ||i.WM8978_HPvol_Set||, CODE, READONLY, ALIGN=1

                  WM8978_HPvol_Set PROC
;;;206    //volr:右声道音量(0~63)
;;;207    void WM8978_HPvol_Set(u8 voll,u8 volr)
000000  b570              PUSH     {r4-r6,lr}
;;;208    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;209    	voll&=0X3F;
000006  f004043f          AND      r4,r4,#0x3f
;;;210    	volr&=0X3F;//限定范围
00000a  f005053f          AND      r5,r5,#0x3f
;;;211    	if(voll==0)voll|=1<<6;//音量为0时,直接mute
00000e  b90c              CBNZ     r4,|L10.20|
000010  f0440440          ORR      r4,r4,#0x40
                  |L10.20|
;;;212    	if(volr==0)volr|=1<<6;//音量为0时,直接mute 
000014  b90d              CBNZ     r5,|L10.26|
000016  f0450540          ORR      r5,r5,#0x40
                  |L10.26|
;;;213    	WM8978_Write_Reg(52,voll);			//R52,耳机左声道音量设置
00001a  4621              MOV      r1,r4
00001c  2034              MOVS     r0,#0x34
00001e  f7fffffe          BL       WM8978_Write_Reg
;;;214    	WM8978_Write_Reg(53,volr|(1<<8));	//R53,耳机右声道音量设置,同步更新(HPVU=1)
000022  f4457180          ORR      r1,r5,#0x100
000026  2035              MOVS     r0,#0x35
000028  f7fffffe          BL       WM8978_Write_Reg
;;;215    }
00002c  bd70              POP      {r4-r6,pc}
;;;216    //设置喇叭音量
                          ENDP


                          AREA ||i.WM8978_I2S_Cfg||, CODE, READONLY, ALIGN=1

                  WM8978_I2S_Cfg PROC
;;;196    //len:0,16位;1,20位;2,24位;3,32位;  
;;;197    void WM8978_I2S_Cfg(u8 fmt,u8 len)
000000  b570              PUSH     {r4-r6,lr}
;;;198    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;199    	fmt&=0X03;
000006  f0040403          AND      r4,r4,#3
;;;200    	len&=0X03;//限定范围
00000a  f0050503          AND      r5,r5,#3
;;;201    	WM8978_Write_Reg(4,(fmt<<3)|(len<<5));	//R4,WM8978工作模式设置	
00000e  00e0              LSLS     r0,r4,#3
000010  ea401145          ORR      r1,r0,r5,LSL #5
000014  2004              MOVS     r0,#4
000016  f7fffffe          BL       WM8978_Write_Reg
;;;202    }	
00001a  bd70              POP      {r4-r6,pc}
;;;203    
                          ENDP


                          AREA ||i.WM8978_Init||, CODE, READONLY, ALIGN=2

                  WM8978_Init PROC
;;;34     //    其他,错误代码
;;;35     u8 WM8978_Init(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;36     {
;;;37     	u8 res;
;;;38     	GPIO_InitTypeDef  GPIO_InitStructure;
;;;39     	
;;;40     	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB|RCC_AHB1Periph_GPIOC, ENABLE);			//使能外设GPIOB,GPIOC时钟
000002  2101              MOVS     r1,#1
000004  2006              MOVS     r0,#6
000006  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;41          
;;;42     	//PB12/13 复用功能输出
;;;43     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13;
00000a  f44f5040          MOV      r0,#0x3000
00000e  9000              STR      r0,[sp,#0]
;;;44       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能
000010  2002              MOVS     r0,#2
000012  f88d0004          STRB     r0,[sp,#4]
;;;45       GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//推挽 
000016  2000              MOVS     r0,#0
000018  f88d0006          STRB     r0,[sp,#6]
;;;46       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz
00001c  2003              MOVS     r0,#3
00001e  f88d0005          STRB     r0,[sp,#5]
;;;47       GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//上拉
000022  2001              MOVS     r0,#1
000024  f88d0007          STRB     r0,[sp,#7]
;;;48       GPIO_Init(GPIOB, &GPIO_InitStructure);//初始化
000028  4669              MOV      r1,sp
00002a  4832              LDR      r0,|L12.244|
00002c  f7fffffe          BL       GPIO_Init
;;;49     	
;;;50     	//PC2/PC3/PC6复用功能输出
;;;51     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3|GPIO_Pin_6;
000030  204c              MOVS     r0,#0x4c
000032  9000              STR      r0,[sp,#0]
;;;52       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能
000034  2002              MOVS     r0,#2
000036  f88d0004          STRB     r0,[sp,#4]
;;;53       GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//推挽 
00003a  2000              MOVS     r0,#0
00003c  f88d0006          STRB     r0,[sp,#6]
;;;54       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz
000040  2003              MOVS     r0,#3
000042  f88d0005          STRB     r0,[sp,#5]
;;;55       GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//上拉
000046  2001              MOVS     r0,#1
000048  f88d0007          STRB     r0,[sp,#7]
;;;56       GPIO_Init(GPIOC, &GPIO_InitStructure);//初始化
00004c  4669              MOV      r1,sp
00004e  482a              LDR      r0,|L12.248|
000050  f7fffffe          BL       GPIO_Init
;;;57     	
;;;58     	GPIO_PinAFConfig(GPIOB,GPIO_PinSource12,GPIO_AF_SPI2); //PB12,AF5  I2S_LRCK
000054  2205              MOVS     r2,#5
000056  210c              MOVS     r1,#0xc
000058  4826              LDR      r0,|L12.244|
00005a  f7fffffe          BL       GPIO_PinAFConfig
;;;59     	GPIO_PinAFConfig(GPIOB,GPIO_PinSource13,GPIO_AF_SPI2);	//PB13,AF5  I2S_SCLK 
00005e  2205              MOVS     r2,#5
000060  210d              MOVS     r1,#0xd
000062  4824              LDR      r0,|L12.244|
000064  f7fffffe          BL       GPIO_PinAFConfig
;;;60     	GPIO_PinAFConfig(GPIOC,GPIO_PinSource3,GPIO_AF_SPI2);	//PC3 ,AF5  I2S_DACDATA 
000068  2205              MOVS     r2,#5
00006a  2103              MOVS     r1,#3
00006c  4822              LDR      r0,|L12.248|
00006e  f7fffffe          BL       GPIO_PinAFConfig
;;;61     	GPIO_PinAFConfig(GPIOC,GPIO_PinSource6,GPIO_AF_SPI2);	//PC6 ,AF5  I2S_MCK
000072  2205              MOVS     r2,#5
000074  2106              MOVS     r1,#6
000076  4820              LDR      r0,|L12.248|
000078  f7fffffe          BL       GPIO_PinAFConfig
;;;62     	GPIO_PinAFConfig(GPIOC,GPIO_PinSource2,GPIO_AF6_SPI2);	//PC2 ,AF6  I2S_ADCDATA  I2S2ext_SD是AF6!!!
00007c  2206              MOVS     r2,#6
00007e  2102              MOVS     r1,#2
000080  481d              LDR      r0,|L12.248|
000082  f7fffffe          BL       GPIO_PinAFConfig
;;;63     	
;;;64     
;;;65     	
;;;66     	IIC_Init();//初始化IIC接口
000086  f7fffffe          BL       IIC_Init
;;;67     	res=WM8978_Write_Reg(0,0);	//软复位WM8978
00008a  2100              MOVS     r1,#0
00008c  4608              MOV      r0,r1
00008e  f7fffffe          BL       WM8978_Write_Reg
000092  4604              MOV      r4,r0
;;;68     	if(res)return 1;			//发送指令失败,WM8978异常
000094  b10c              CBZ      r4,|L12.154|
000096  2001              MOVS     r0,#1
                  |L12.152|
;;;69     	//以下为通用设置
;;;70     	WM8978_Write_Reg(1,0X1B);	//R1,MICEN设置为1(MIC使能),BIASEN设置为1(模拟器工作),VMIDSEL[1:0]设置为:11(5K)
;;;71     	WM8978_Write_Reg(2,0X1B0);	//R2,ROUT1,LOUT1输出使能(耳机可以工作),BOOSTENR,BOOSTENL使能
;;;72     	WM8978_Write_Reg(3,0X6C);	//R3,LOUT2,ROUT2输出使能(喇叭工作),RMIX,LMIX使能	
;;;73     	WM8978_Write_Reg(6,0);		//R6,MCLK由外部提供
;;;74     	WM8978_Write_Reg(43,1<<4);	//R43,INVROUT2反向,驱动喇叭
;;;75     	WM8978_Write_Reg(47,1<<8);	//R47设置,PGABOOSTL,左通道MIC获得20倍增益
;;;76     	WM8978_Write_Reg(48,1<<8);	//R48设置,PGABOOSTR,右通道MIC获得20倍增益
;;;77     	WM8978_Write_Reg(49,1<<1);	//R49,TSDEN,开启过热保护 
;;;78     	WM8978_Write_Reg(10,1<<3);	//R10,SOFTMUTE关闭,128x采样,最佳SNR 
;;;79     	WM8978_Write_Reg(14,1<<3);	//R14,ADC 128x采样率
;;;80     	return 0;
;;;81     } 
000098  bd1c              POP      {r2-r4,pc}
                  |L12.154|
00009a  211b              MOVS     r1,#0x1b              ;70
00009c  2001              MOVS     r0,#1                 ;70
00009e  f7fffffe          BL       WM8978_Write_Reg
0000a2  f44f71d8          MOV      r1,#0x1b0             ;71
0000a6  2002              MOVS     r0,#2                 ;71
0000a8  f7fffffe          BL       WM8978_Write_Reg
0000ac  216c              MOVS     r1,#0x6c              ;72
0000ae  2003              MOVS     r0,#3                 ;72
0000b0  f7fffffe          BL       WM8978_Write_Reg
0000b4  2100              MOVS     r1,#0                 ;73
0000b6  2006              MOVS     r0,#6                 ;73
0000b8  f7fffffe          BL       WM8978_Write_Reg
0000bc  2110              MOVS     r1,#0x10              ;74
0000be  202b              MOVS     r0,#0x2b              ;74
0000c0  f7fffffe          BL       WM8978_Write_Reg
0000c4  f44f7180          MOV      r1,#0x100             ;75
0000c8  202f              MOVS     r0,#0x2f              ;75
0000ca  f7fffffe          BL       WM8978_Write_Reg
0000ce  f44f7180          MOV      r1,#0x100             ;76
0000d2  2030              MOVS     r0,#0x30              ;76
0000d4  f7fffffe          BL       WM8978_Write_Reg
0000d8  2102              MOVS     r1,#2                 ;77
0000da  2031              MOVS     r0,#0x31              ;77
0000dc  f7fffffe          BL       WM8978_Write_Reg
0000e0  2108              MOVS     r1,#8                 ;78
0000e2  200a              MOVS     r0,#0xa               ;78
0000e4  f7fffffe          BL       WM8978_Write_Reg
0000e8  2108              MOVS     r1,#8                 ;79
0000ea  200e              MOVS     r0,#0xe               ;79
0000ec  f7fffffe          BL       WM8978_Write_Reg
0000f0  2000              MOVS     r0,#0                 ;80
0000f2  e7d1              B        |L12.152|
;;;82     //WM8978写寄存器
                          ENDP

                  |L12.244|
                          DCD      0x40020400
                  |L12.248|
                          DCD      0x40020800

                          AREA ||i.WM8978_Input_Cfg||, CODE, READONLY, ALIGN=1

                  WM8978_Input_Cfg PROC
;;;126    //auxen:aux开启(1)/关闭(0) 
;;;127    void WM8978_Input_Cfg(u8 micen,u8 lineinen,u8 auxen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;128    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;129    	u16 regval;  
;;;130    	regval=WM8978_Read_Reg(2);	//读取R2
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       WM8978_Read_Reg
000010  4604              MOV      r4,r0
;;;131    	if(micen)regval|=3<<2;		//开启INPPGAENR,INPPGAENL(MIC的PGA放大)
000012  b115              CBZ      r5,|L13.26|
000014  f044040c          ORR      r4,r4,#0xc
000018  e001              B        |L13.30|
                  |L13.26|
;;;132    	else regval&=~(3<<2);		//关闭INPPGAENR,INPPGAENL.
00001a  f024040c          BIC      r4,r4,#0xc
                  |L13.30|
;;;133     	WM8978_Write_Reg(2,regval);	//设置R2 
00001e  4621              MOV      r1,r4
000020  2002              MOVS     r0,#2
000022  f7fffffe          BL       WM8978_Write_Reg
;;;134    	
;;;135    	regval=WM8978_Read_Reg(44);	//读取R44
000026  202c              MOVS     r0,#0x2c
000028  f7fffffe          BL       WM8978_Read_Reg
00002c  4604              MOV      r4,r0
;;;136    	if(micen)regval|=3<<4|3<<0;	//开启LIN2INPPGA,LIP2INPGA,RIN2INPPGA,RIP2INPGA.
00002e  b115              CBZ      r5,|L13.54|
000030  f0440433          ORR      r4,r4,#0x33
000034  e001              B        |L13.58|
                  |L13.54|
;;;137    	else regval&=~(3<<4|3<<0);	//关闭LIN2INPPGA,LIP2INPGA,RIN2INPPGA,RIP2INPGA.
000036  f0240433          BIC      r4,r4,#0x33
                  |L13.58|
;;;138    	WM8978_Write_Reg(44,regval);//设置R44
00003a  4621              MOV      r1,r4
00003c  202c              MOVS     r0,#0x2c
00003e  f7fffffe          BL       WM8978_Write_Reg
;;;139    	
;;;140    	if(lineinen)WM8978_LINEIN_Gain(5);//LINE IN 0dB增益
000042  b11e              CBZ      r6,|L13.76|
000044  2005              MOVS     r0,#5
000046  f7fffffe          BL       WM8978_LINEIN_Gain
00004a  e002              B        |L13.82|
                  |L13.76|
;;;141    	else WM8978_LINEIN_Gain(0);	//关闭LINE IN
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       WM8978_LINEIN_Gain
                  |L13.82|
;;;142    	if(auxen)WM8978_AUX_Gain(7);//AUX 6dB增益
000052  b11f              CBZ      r7,|L13.92|
000054  2007              MOVS     r0,#7
000056  f7fffffe          BL       WM8978_AUX_Gain
00005a  e002              B        |L13.98|
                  |L13.92|
;;;143    	else WM8978_AUX_Gain(0);	//关闭AUX输入  
00005c  2000              MOVS     r0,#0
00005e  f7fffffe          BL       WM8978_AUX_Gain
                  |L13.98|
;;;144    }
000062  e8bd81f0          POP      {r4-r8,pc}
;;;145    //WM8978 输出配置 
                          ENDP


                          AREA ||i.WM8978_LINEIN_Gain||, CODE, READONLY, ALIGN=1

                  WM8978_LINEIN_Gain PROC
;;;169    //gain:0~7,0表示通道禁止,1~7,对应-12dB~6dB,3dB/Step
;;;170    void WM8978_LINEIN_Gain(u8 gain)
000000  b570              PUSH     {r4-r6,lr}
;;;171    {
000002  4604              MOV      r4,r0
;;;172    	u16 regval;
;;;173    	gain&=0X07;
000004  f0040407          AND      r4,r4,#7
;;;174    	regval=WM8978_Read_Reg(47);	//读取R47
000008  202f              MOVS     r0,#0x2f
00000a  f7fffffe          BL       WM8978_Read_Reg
00000e  4605              MOV      r5,r0
;;;175    	regval&=~(7<<4);			//清除原来的设置 
000010  f0250570          BIC      r5,r5,#0x70
;;;176     	WM8978_Write_Reg(47,regval|gain<<4);//设置R47
000014  ea451104          ORR      r1,r5,r4,LSL #4
000018  202f              MOVS     r0,#0x2f
00001a  f7fffffe          BL       WM8978_Write_Reg
;;;177    	regval=WM8978_Read_Reg(48);	//读取R48
00001e  2030              MOVS     r0,#0x30
000020  f7fffffe          BL       WM8978_Read_Reg
000024  4605              MOV      r5,r0
;;;178    	regval&=~(7<<4);			//清除原来的设置 
000026  f0250570          BIC      r5,r5,#0x70
;;;179     	WM8978_Write_Reg(48,regval|gain<<4);//设置R48
00002a  ea451104          ORR      r1,r5,r4,LSL #4
00002e  2030              MOVS     r0,#0x30
000030  f7fffffe          BL       WM8978_Write_Reg
;;;180    } 
000034  bd70              POP      {r4-r6,pc}
;;;181    //WM8978 AUXR,AUXL(PWM音频部分)增益设置(AUXR/L-->ADC输入部分的增益)
                          ENDP


                          AREA ||i.WM8978_MIC_Gain||, CODE, READONLY, ALIGN=1

                  WM8978_MIC_Gain PROC
;;;161    //gain:0~63,对应-12dB~35.25dB,0.75dB/Step
;;;162    void WM8978_MIC_Gain(u8 gain)
000000  b510              PUSH     {r4,lr}
;;;163    {
000002  4604              MOV      r4,r0
;;;164    	gain&=0X3F;
000004  f004043f          AND      r4,r4,#0x3f
;;;165    	WM8978_Write_Reg(45,gain);		//R45,左通道PGA设置 
000008  4621              MOV      r1,r4
00000a  202d              MOVS     r0,#0x2d
00000c  f7fffffe          BL       WM8978_Write_Reg
;;;166    	WM8978_Write_Reg(46,gain|1<<8);	//R46,右通道PGA设置
000010  f4447180          ORR      r1,r4,#0x100
000014  202e              MOVS     r0,#0x2e
000016  f7fffffe          BL       WM8978_Write_Reg
;;;167    }
00001a  bd10              POP      {r4,pc}
;;;168    //WM8978 L2/R2(也就是Line In)增益设置(L2/R2-->ADC输入部分的增益)
                          ENDP


                          AREA ||i.WM8978_Output_Cfg||, CODE, READONLY, ALIGN=1

                  WM8978_Output_Cfg PROC
;;;147    //bpsen:Bypass输出(录音,包括MIC,LINE IN,AUX等)开启(1)/关闭(0) 
;;;148    void WM8978_Output_Cfg(u8 dacen,u8 bpsen)
000000  b570              PUSH     {r4-r6,lr}
;;;149    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;150    	u16 regval=0;
000006  2400              MOVS     r4,#0
;;;151    	if(dacen)regval|=1<<0;	//DAC输出使能
000008  b10e              CBZ      r6,|L16.14|
00000a  f0440401          ORR      r4,r4,#1
                  |L16.14|
;;;152    	if(bpsen)
00000e  b11d              CBZ      r5,|L16.24|
;;;153    	{
;;;154    		regval|=1<<1;		//BYPASS使能
000010  f0440402          ORR      r4,r4,#2
;;;155    		regval|=5<<2;		//0dB增益
000014  f0440414          ORR      r4,r4,#0x14
                  |L16.24|
;;;156    	} 
;;;157    	WM8978_Write_Reg(50,regval);//R50设置
000018  4621              MOV      r1,r4
00001a  2032              MOVS     r0,#0x32
00001c  f7fffffe          BL       WM8978_Write_Reg
;;;158    	WM8978_Write_Reg(51,regval);//R51设置 
000020  4621              MOV      r1,r4
000022  2033              MOVS     r0,#0x33
000024  f7fffffe          BL       WM8978_Write_Reg
;;;159    }
000028  bd70              POP      {r4-r6,pc}
;;;160    //WM8978 MIC增益设置(不包括BOOST的20dB,MIC-->ADC输入部分的增益)
                          ENDP


                          AREA ||i.WM8978_Read_Reg||, CODE, READONLY, ALIGN=2

                  WM8978_Read_Reg PROC
;;;103    //返回值:寄存器值
;;;104    u16 WM8978_Read_Reg(u8 reg)
000000  4601              MOV      r1,r0
;;;105    {  
;;;106    	return WM8978_REGVAL_TBL[reg];	
000002  4802              LDR      r0,|L17.12|
000004  f8300011          LDRH     r0,[r0,r1,LSL #1]
;;;107    } 
000008  4770              BX       lr
;;;108    //WM8978 DAC/ADC配置
                          ENDP

00000a  0000              DCW      0x0000
                  |L17.12|
                          DCD      WM8978_REGVAL_TBL

                          AREA ||i.WM8978_SPKvol_Set||, CODE, READONLY, ALIGN=1

                  WM8978_SPKvol_Set PROC
;;;217    //voll:左声道音量(0~63) 
;;;218    void WM8978_SPKvol_Set(u8 volx)
000000  b510              PUSH     {r4,lr}
;;;219    { 
000002  4604              MOV      r4,r0
;;;220    	volx&=0X3F;//限定范围
000004  f004043f          AND      r4,r4,#0x3f
;;;221    	if(volx==0)volx|=1<<6;//音量为0时,直接mute 
000008  b90c              CBNZ     r4,|L18.14|
00000a  f0440440          ORR      r4,r4,#0x40
                  |L18.14|
;;;222     	WM8978_Write_Reg(54,volx);			//R54,喇叭左声道音量设置
00000e  4621              MOV      r1,r4
000010  2036              MOVS     r0,#0x36
000012  f7fffffe          BL       WM8978_Write_Reg
;;;223    	WM8978_Write_Reg(55,volx|(1<<8));	//R55,喇叭右声道音量设置,同步更新(SPKVU=1)	
000016  f4447180          ORR      r1,r4,#0x100
00001a  2037              MOVS     r0,#0x37
00001c  f7fffffe          BL       WM8978_Write_Reg
;;;224    }
000020  bd10              POP      {r4,pc}
;;;225    //设置3D环绕声
                          ENDP


                          AREA ||i.WM8978_Write_Reg||, CODE, READONLY, ALIGN=2

                  WM8978_Write_Reg PROC
;;;86     //    其他,错误代码
;;;87     u8 WM8978_Write_Reg(u8 reg,u16 val)
000000  b570              PUSH     {r4-r6,lr}
;;;88     { 
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;89     	IIC_Start(); 
000006  f7fffffe          BL       IIC_Start
;;;90     	IIC_Send_Byte((WM8978_ADDR<<1)|0);//发送器件地址+写命令	 
00000a  2034              MOVS     r0,#0x34
00000c  f7fffffe          BL       IIC_Send_Byte
;;;91     	if(IIC_Wait_Ack())return 1;	//等待应答(成功?/失败?) 
000010  f7fffffe          BL       IIC_Wait_Ack
000014  b108              CBZ      r0,|L19.26|
000016  2001              MOVS     r0,#1
                  |L19.24|
;;;92         IIC_Send_Byte((reg<<1)|((val>>8)&0X01));//写寄存器地址+数据的最高位
;;;93     	if(IIC_Wait_Ack())return 2;	//等待应答(成功?/失败?) 
;;;94     	IIC_Send_Byte(val&0XFF);	//发送数据
;;;95     	if(IIC_Wait_Ack())return 3;	//等待应答(成功?/失败?) 
;;;96         IIC_Stop();
;;;97     	WM8978_REGVAL_TBL[reg]=val;	//保存寄存器值到本地
;;;98     	return 0;	
;;;99     }  
000018  bd70              POP      {r4-r6,pc}
                  |L19.26|
00001a  f3c42100          UBFX     r1,r4,#8,#1           ;92
00001e  ea410145          ORR      r1,r1,r5,LSL #1       ;92
000022  b2c8              UXTB     r0,r1                 ;92
000024  f7fffffe          BL       IIC_Send_Byte
000028  f7fffffe          BL       IIC_Wait_Ack
00002c  b108              CBZ      r0,|L19.50|
00002e  2002              MOVS     r0,#2                 ;93
000030  e7f2              B        |L19.24|
                  |L19.50|
000032  b2e0              UXTB     r0,r4                 ;94
000034  f7fffffe          BL       IIC_Send_Byte
000038  f7fffffe          BL       IIC_Wait_Ack
00003c  b108              CBZ      r0,|L19.66|
00003e  2003              MOVS     r0,#3                 ;95
000040  e7ea              B        |L19.24|
                  |L19.66|
000042  f7fffffe          BL       IIC_Stop
000046  4802              LDR      r0,|L19.80|
000048  f8204015          STRH     r4,[r0,r5,LSL #1]     ;97
00004c  2000              MOVS     r0,#0                 ;98
00004e  e7e3              B        |L19.24|
;;;100    //WM8978读寄存器
                          ENDP

                  |L19.80|
                          DCD      WM8978_REGVAL_TBL

                          AREA ||.data||, DATA, ALIGN=1

                  WM8978_REGVAL_TBL
000000  00000000          DCW      0x0000,0x0000
000004  00000000          DCW      0x0000,0x0000
000008  00500000          DCW      0x0050,0x0000
00000c  01400000          DCW      0x0140,0x0000
000010  00000000          DCW      0x0000,0x0000
000014  000000ff          DCW      0x0000,0x00ff
000018  00ff0000          DCW      0x00ff,0x0000
00001c  010000ff          DCW      0x0100,0x00ff
000020  00ff0000          DCW      0x00ff,0x0000
000024  012c002c          DCW      0x012c,0x002c
000028  002c002c          DCW      0x002c,0x002c
00002c  002c0000          DCW      0x002c,0x0000
000030  00320000          DCW      0x0032,0x0000
000034  00000000          DCW      0x0000,0x0000
000038  00000000          DCW      0x0000,0x0000
00003c  00000000          DCW      0x0000,0x0000
000040  0038000b          DCW      0x0038,0x000b
000044  00320000          DCW      0x0032,0x0000
000048  0008000c          DCW      0x0008,0x000c
00004c  009300e9          DCW      0x0093,0x00e9
000050  00000000          DCW      0x0000,0x0000
000054  00000000          DCW      0x0000,0x0000
000058  00030010          DCW      0x0003,0x0010
00005c  00100100          DCW      0x0010,0x0100
000060  01000002          DCW      0x0100,0x0002
000064  00010001          DCW      0x0001,0x0001
000068  00390039          DCW      0x0039,0x0039
00006c  00390039          DCW      0x0039,0x0039
000070  00010001          DCW      0x0001,0x0001

;*** Start embedded assembler ***

#line 1 "..\\HARDWARE\\WM8978\\wm8978.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_wm8978_c_26810d97____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___8_wm8978_c_26810d97____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_wm8978_c_26810d97____REVSH|
#line 144
|__asm___8_wm8978_c_26810d97____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
