; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\stm32f4xx_rcc.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32f4xx_rcc.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\HARDWARE\LED -I..\HARDWARE\LCD -I..\HARDWARE\KEY -I..\HARDWARE\SRAM -I..\HARDWARE\SDIO -I..\MALLOC -I..\USMART -I..\HARDWARE\SPI -I..\HARDWARE\W25QXX -I..\FATFS\exfuns -I..\FATFS\src -I..\TEXT -I..\FWLIB\inc -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\I2S -I..\HARDWARE\WM8978 -I..\APP -I..\AUDIOCODEC\wav -I..\new_user -I..\new_user\task -I..\new_user\MVC -I..\..\..\module\common -I..\..\..\module\common\InsertLog -I..\..\..\module\common\loopqueue -I..\..\..\module\common\StateMachine -I..\..\..\module\common\priorityqueue -I..\..\..\module\common\Math -I..\..\..\module\component\const_loop_scheduler -I..\..\..\module\component\const_loop_scheduler\TemplateTask -I..\..\..\module\component\const_loop_scheduler\HierarchicalSM -I..\..\..\module\component\BlockableStateMachine -I..\..\..\module\customize\ButtonModule -I..\..\..\module\external\Segger\SEGGER_RTT_V640\Syscalls -I..\..\..\module\external\Segger\SEGGER_RTT_V640\RTT -I.\RTE\_AudioPlayer -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include" -I"D:\Program Files\ARM\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_COMPILER_PRESENT -DX_TASK_LOG_DEBUG_METHOD=SeggerRTT_LogDebug --omf_browse=..\obj\stm32f4xx_rcc.crf ..\FWLIB\src\stm32f4xx_rcc.c]
                          THUMB

                          AREA ||i.RCC_AHB1PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB1PeriphClockCmd PROC
;;;1525     */
;;;1526   void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L1.14|
;;;1527   {
;;;1528     /* Check the parameters */
;;;1529     assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
;;;1530   
;;;1531     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1532     if (NewState != DISABLE)
;;;1533     {
;;;1534       RCC->AHB1ENR |= RCC_AHB1Periph;
000002  4a06              LDR      r2,|L1.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L1.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L1.24|
                  |L1.14|
;;;1535     }
;;;1536     else
;;;1537     {
;;;1538       RCC->AHB1ENR &= ~RCC_AHB1Periph;
00000e  4a03              LDR      r2,|L1.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L1.28|
000016  601a              STR      r2,[r3,#0]
                  |L1.24|
;;;1539     }
;;;1540   }
000018  4770              BX       lr
;;;1541   
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      0x40023830

                          AREA ||i.RCC_AHB1PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB1PeriphClockLPModeCmd PROC
;;;1917     */
;;;1918   void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L2.14|
;;;1919   {
;;;1920     /* Check the parameters */
;;;1921     assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
;;;1922     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1923     if (NewState != DISABLE)
;;;1924     {
;;;1925       RCC->AHB1LPENR |= RCC_AHB1Periph;
000002  4a06              LDR      r2,|L2.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L2.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L2.24|
                  |L2.14|
;;;1926     }
;;;1927     else
;;;1928     {
;;;1929       RCC->AHB1LPENR &= ~RCC_AHB1Periph;
00000e  4a03              LDR      r2,|L2.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L2.28|
000016  601a              STR      r2,[r3,#0]
                  |L2.24|
;;;1930     }
;;;1931   }
000018  4770              BX       lr
;;;1932   
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      0x40023850

                          AREA ||i.RCC_AHB1PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB1PeriphResetCmd PROC
;;;1724     */
;;;1725   void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L3.14|
;;;1726   {
;;;1727     /* Check the parameters */
;;;1728     assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
;;;1729     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1730   
;;;1731     if (NewState != DISABLE)
;;;1732     {
;;;1733       RCC->AHB1RSTR |= RCC_AHB1Periph;
000002  4a06              LDR      r2,|L3.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L3.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L3.24|
                  |L3.14|
;;;1734     }
;;;1735     else
;;;1736     {
;;;1737       RCC->AHB1RSTR &= ~RCC_AHB1Periph;
00000e  4a03              LDR      r2,|L3.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L3.28|
000016  601a              STR      r2,[r3,#0]
                  |L3.24|
;;;1738     }
;;;1739   }
000018  4770              BX       lr
;;;1740   
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0x40023810

                          AREA ||i.RCC_AHB2PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB2PeriphClockCmd PROC
;;;1557     */
;;;1558   void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L4.14|
;;;1559   {
;;;1560     /* Check the parameters */
;;;1561     assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
;;;1562     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1563   
;;;1564     if (NewState != DISABLE)
;;;1565     {
;;;1566       RCC->AHB2ENR |= RCC_AHB2Periph;
000002  4a06              LDR      r2,|L4.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L4.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L4.24|
                  |L4.14|
;;;1567     }
;;;1568     else
;;;1569     {
;;;1570       RCC->AHB2ENR &= ~RCC_AHB2Periph;
00000e  4a03              LDR      r2,|L4.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L4.28|
000016  601a              STR      r2,[r3,#0]
                  |L4.24|
;;;1571     }
;;;1572   }
000018  4770              BX       lr
;;;1573   
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      0x40023834

                          AREA ||i.RCC_AHB2PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB2PeriphClockLPModeCmd PROC
;;;1949     */
;;;1950   void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L5.14|
;;;1951   {
;;;1952     /* Check the parameters */
;;;1953     assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
;;;1954     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1955     if (NewState != DISABLE)
;;;1956     {
;;;1957       RCC->AHB2LPENR |= RCC_AHB2Periph;
000002  4a06              LDR      r2,|L5.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L5.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L5.24|
                  |L5.14|
;;;1958     }
;;;1959     else
;;;1960     {
;;;1961       RCC->AHB2LPENR &= ~RCC_AHB2Periph;
00000e  4a03              LDR      r2,|L5.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L5.28|
000016  601a              STR      r2,[r3,#0]
                  |L5.24|
;;;1962     }
;;;1963   }
000018  4770              BX       lr
;;;1964   
                          ENDP

00001a  0000              DCW      0x0000
                  |L5.28|
                          DCD      0x40023854

                          AREA ||i.RCC_AHB2PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB2PeriphResetCmd PROC
;;;1753     */
;;;1754   void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L6.14|
;;;1755   {
;;;1756     /* Check the parameters */
;;;1757     assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
;;;1758     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1759   
;;;1760     if (NewState != DISABLE)
;;;1761     {
;;;1762       RCC->AHB2RSTR |= RCC_AHB2Periph;
000002  4a06              LDR      r2,|L6.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L6.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L6.24|
                  |L6.14|
;;;1763     }
;;;1764     else
;;;1765     {
;;;1766       RCC->AHB2RSTR &= ~RCC_AHB2Periph;
00000e  4a03              LDR      r2,|L6.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L6.28|
000016  601a              STR      r2,[r3,#0]
                  |L6.24|
;;;1767     }
;;;1768   }
000018  4770              BX       lr
;;;1769   
                          ENDP

00001a  0000              DCW      0x0000
                  |L6.28|
                          DCD      0x40023814

                          AREA ||i.RCC_AHB3PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB3PeriphClockCmd PROC
;;;1585     */
;;;1586   void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L7.14|
;;;1587   {
;;;1588     /* Check the parameters */
;;;1589     assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
;;;1590     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1591   
;;;1592     if (NewState != DISABLE)
;;;1593     {
;;;1594       RCC->AHB3ENR |= RCC_AHB3Periph;
000002  4a06              LDR      r2,|L7.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L7.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L7.24|
                  |L7.14|
;;;1595     }
;;;1596     else
;;;1597     {
;;;1598       RCC->AHB3ENR &= ~RCC_AHB3Periph;
00000e  4a03              LDR      r2,|L7.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L7.28|
000016  601a              STR      r2,[r3,#0]
                  |L7.24|
;;;1599     }
;;;1600   }
000018  4770              BX       lr
;;;1601   
                          ENDP

00001a  0000              DCW      0x0000
                  |L7.28|
                          DCD      0x40023838

                          AREA ||i.RCC_AHB3PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB3PeriphClockLPModeCmd PROC
;;;1977     */
;;;1978   void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L8.14|
;;;1979   {
;;;1980     /* Check the parameters */
;;;1981     assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
;;;1982     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1983     if (NewState != DISABLE)
;;;1984     {
;;;1985       RCC->AHB3LPENR |= RCC_AHB3Periph;
000002  4a06              LDR      r2,|L8.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L8.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L8.24|
                  |L8.14|
;;;1986     }
;;;1987     else
;;;1988     {
;;;1989       RCC->AHB3LPENR &= ~RCC_AHB3Periph;
00000e  4a03              LDR      r2,|L8.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L8.28|
000016  601a              STR      r2,[r3,#0]
                  |L8.24|
;;;1990     }
;;;1991   }
000018  4770              BX       lr
;;;1992   
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
                          DCD      0x40023858

                          AREA ||i.RCC_AHB3PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB3PeriphResetCmd PROC
;;;1778     */
;;;1779   void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L9.14|
;;;1780   {
;;;1781     /* Check the parameters */
;;;1782     assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
;;;1783     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1784   
;;;1785     if (NewState != DISABLE)
;;;1786     {
;;;1787       RCC->AHB3RSTR |= RCC_AHB3Periph;
000002  4a06              LDR      r2,|L9.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L9.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L9.24|
                  |L9.14|
;;;1788     }
;;;1789     else
;;;1790     {
;;;1791       RCC->AHB3RSTR &= ~RCC_AHB3Periph;
00000e  4a03              LDR      r2,|L9.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L9.28|
000016  601a              STR      r2,[r3,#0]
                  |L9.24|
;;;1792     }
;;;1793   }
000018  4770              BX       lr
;;;1794   
                          ENDP

00001a  0000              DCW      0x0000
                  |L9.28|
                          DCD      0x40023818

                          AREA ||i.RCC_APB1PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphClockCmd PROC
;;;1637     */
;;;1638   void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L10.14|
;;;1639   {
;;;1640     /* Check the parameters */
;;;1641     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
;;;1642     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1643   
;;;1644     if (NewState != DISABLE)
;;;1645     {
;;;1646       RCC->APB1ENR |= RCC_APB1Periph;
000002  4a06              LDR      r2,|L10.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L10.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L10.24|
                  |L10.14|
;;;1647     }
;;;1648     else
;;;1649     {
;;;1650       RCC->APB1ENR &= ~RCC_APB1Periph;
00000e  4a03              LDR      r2,|L10.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L10.28|
000016  601a              STR      r2,[r3,#0]
                  |L10.24|
;;;1651     }
;;;1652   }
000018  4770              BX       lr
;;;1653   
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      0x40023840

                          AREA ||i.RCC_APB1PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphClockLPModeCmd PROC
;;;2029     */
;;;2030   void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L11.14|
;;;2031   {
;;;2032     /* Check the parameters */
;;;2033     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;2034     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2035     if (NewState != DISABLE)
;;;2036     {
;;;2037       RCC->APB1LPENR |= RCC_APB1Periph;
000002  4a06              LDR      r2,|L11.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L11.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L11.24|
                  |L11.14|
;;;2038     }
;;;2039     else
;;;2040     {
;;;2041       RCC->APB1LPENR &= ~RCC_APB1Periph;
00000e  4a03              LDR      r2,|L11.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L11.28|
000016  601a              STR      r2,[r3,#0]
                  |L11.24|
;;;2042     }
;;;2043   }
000018  4770              BX       lr
;;;2044   
                          ENDP

00001a  0000              DCW      0x0000
                  |L11.28|
                          DCD      0x40023860

                          AREA ||i.RCC_APB1PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphResetCmd PROC
;;;1827     */
;;;1828   void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L12.14|
;;;1829   {
;;;1830     /* Check the parameters */
;;;1831     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;1832     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1833     if (NewState != DISABLE)
;;;1834     {
;;;1835       RCC->APB1RSTR |= RCC_APB1Periph;
000002  4a06              LDR      r2,|L12.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L12.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L12.24|
                  |L12.14|
;;;1836     }
;;;1837     else
;;;1838     {
;;;1839       RCC->APB1RSTR &= ~RCC_APB1Periph;
00000e  4a03              LDR      r2,|L12.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L12.28|
000016  601a              STR      r2,[r3,#0]
                  |L12.24|
;;;1840     }
;;;1841   }
000018  4770              BX       lr
;;;1842   
                          ENDP

00001a  0000              DCW      0x0000
                  |L12.28|
                          DCD      0x40023820

                          AREA ||i.RCC_APB2PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphClockCmd PROC
;;;1682     */
;;;1683   void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L13.14|
;;;1684   {
;;;1685     /* Check the parameters */
;;;1686     assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;1687     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1688   
;;;1689     if (NewState != DISABLE)
;;;1690     {
;;;1691       RCC->APB2ENR |= RCC_APB2Periph;
000002  4a06              LDR      r2,|L13.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L13.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L13.24|
                  |L13.14|
;;;1692     }
;;;1693     else
;;;1694     {
;;;1695       RCC->APB2ENR &= ~RCC_APB2Periph;
00000e  4a03              LDR      r2,|L13.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L13.28|
000016  601a              STR      r2,[r3,#0]
                  |L13.24|
;;;1696     }
;;;1697   }
000018  4770              BX       lr
;;;1698   
                          ENDP

00001a  0000              DCW      0x0000
                  |L13.28|
                          DCD      0x40023844

                          AREA ||i.RCC_APB2PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphClockLPModeCmd PROC
;;;2074     */
;;;2075   void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L14.14|
;;;2076   {
;;;2077     /* Check the parameters */
;;;2078     assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;2079     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2080     if (NewState != DISABLE)
;;;2081     {
;;;2082       RCC->APB2LPENR |= RCC_APB2Periph;
000002  4a06              LDR      r2,|L14.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L14.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L14.24|
                  |L14.14|
;;;2083     }
;;;2084     else
;;;2085     {
;;;2086       RCC->APB2LPENR &= ~RCC_APB2Periph;
00000e  4a03              LDR      r2,|L14.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L14.28|
000016  601a              STR      r2,[r3,#0]
                  |L14.24|
;;;2087     }
;;;2088   }
000018  4770              BX       lr
;;;2089   
                          ENDP

00001a  0000              DCW      0x0000
                  |L14.28|
                          DCD      0x40023864

                          AREA ||i.RCC_APB2PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphResetCmd PROC
;;;1868     */
;;;1869   void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L15.14|
;;;1870   {
;;;1871     /* Check the parameters */
;;;1872     assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
;;;1873     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1874     if (NewState != DISABLE)
;;;1875     {
;;;1876       RCC->APB2RSTR |= RCC_APB2Periph;
000002  4a06              LDR      r2,|L15.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L15.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L15.24|
                  |L15.14|
;;;1877     }
;;;1878     else
;;;1879     {
;;;1880       RCC->APB2RSTR &= ~RCC_APB2Periph;
00000e  4a03              LDR      r2,|L15.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L15.28|
000016  601a              STR      r2,[r3,#0]
                  |L15.24|
;;;1881     }
;;;1882   }
000018  4770              BX       lr
;;;1883   
                          ENDP

00001a  0000              DCW      0x0000
                  |L15.28|
                          DCD      0x40023824

                          AREA ||i.RCC_AdjustHSICalibrationValue||, CODE, READONLY, ALIGN=2

                  RCC_AdjustHSICalibrationValue PROC
;;;317      */
;;;318    void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
000000  4601              MOV      r1,r0
;;;319    {
;;;320      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;321      /* Check the parameters */
;;;322      assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
;;;323    
;;;324      tmpreg = RCC->CR;
000004  4a03              LDR      r2,|L16.20|
000006  6810              LDR      r0,[r2,#0]
;;;325    
;;;326      /* Clear HSITRIM[4:0] bits */
;;;327      tmpreg &= ~RCC_CR_HSITRIM;
000008  f02000f8          BIC      r0,r0,#0xf8
;;;328    
;;;329      /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
;;;330      tmpreg |= (uint32_t)HSICalibrationValue << 3;
00000c  ea4000c1          ORR      r0,r0,r1,LSL #3
;;;331    
;;;332      /* Store the new value */
;;;333      RCC->CR = tmpreg;
000010  6010              STR      r0,[r2,#0]
;;;334    }
000012  4770              BX       lr
;;;335    
                          ENDP

                  |L16.20|
                          DCD      0x40023800

                          AREA ||i.RCC_BackupResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_BackupResetCmd PROC
;;;1270     */
;;;1271   void RCC_BackupResetCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L17.8|
;;;1272   {
;;;1273     /* Check the parameters */
;;;1274     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1275     *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;1276   }
000004  4770              BX       lr
;;;1277   
                          ENDP

000006  0000              DCW      0x0000
                  |L17.8|
                          DCD      0x42470e40

                          AREA ||i.RCC_ClearFlag||, CODE, READONLY, ALIGN=2

                  RCC_ClearFlag PROC
;;;2226     */
;;;2227   void RCC_ClearFlag(void)
000000  4803              LDR      r0,|L18.16|
;;;2228   {
;;;2229     /* Set RMVF bit to clear the reset flags */
;;;2230     RCC->CSR |= RCC_CSR_RMVF;
000002  6800              LDR      r0,[r0,#0]
000004  f0407080          ORR      r0,r0,#0x1000000
000008  4901              LDR      r1,|L18.16|
00000a  6008              STR      r0,[r1,#0]
;;;2231   }
00000c  4770              BX       lr
;;;2232   
                          ENDP

00000e  0000              DCW      0x0000
                  |L18.16|
                          DCD      0x40023874

                          AREA ||i.RCC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  RCC_ClearITPendingBit PROC
;;;2280     */
;;;2281   void RCC_ClearITPendingBit(uint8_t RCC_IT)
000000  4901              LDR      r1,|L19.8|
;;;2282   {
;;;2283     /* Check the parameters */
;;;2284     assert_param(IS_RCC_CLEAR_IT(RCC_IT));
;;;2285   
;;;2286     /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
;;;2287        pending bits */
;;;2288     *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
000002  7008              STRB     r0,[r1,#0]
;;;2289   }
000004  4770              BX       lr
;;;2290   
                          ENDP

000006  0000              DCW      0x0000
                  |L19.8|
                          DCD      0x4002380e

                          AREA ||i.RCC_ClockSecuritySystemCmd||, CODE, READONLY, ALIGN=2

                  RCC_ClockSecuritySystemCmd PROC
;;;670      */
;;;671    void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L20.8|
;;;672    {
;;;673      /* Check the parameters */
;;;674      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;675      *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
000002  64c8              STR      r0,[r1,#0x4c]
;;;676    }
000004  4770              BX       lr
;;;677    
                          ENDP

000006  0000              DCW      0x0000
                  |L20.8|
                          DCD      0x42470000

                          AREA ||i.RCC_DeInit||, CODE, READONLY, ALIGN=2

                  RCC_DeInit PROC
;;;212      */
;;;213    void RCC_DeInit(void)
000000  4814              LDR      r0,|L21.84|
;;;214    {
;;;215      /* Set HSION bit */
;;;216      RCC->CR |= (uint32_t)0x00000001;
000002  6800              LDR      r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  4912              LDR      r1,|L21.84|
00000a  6008              STR      r0,[r1,#0]
;;;217    
;;;218      /* Reset CFGR register */
;;;219      RCC->CFGR = 0x00000000;
00000c  2000              MOVS     r0,#0
00000e  4911              LDR      r1,|L21.84|
000010  3108              ADDS     r1,r1,#8
000012  6008              STR      r0,[r1,#0]
;;;220    
;;;221      /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
;;;222      RCC->CR &= (uint32_t)0xEAF6FFFF;
000014  480f              LDR      r0,|L21.84|
000016  6800              LDR      r0,[r0,#0]
000018  490f              LDR      r1,|L21.88|
00001a  4008              ANDS     r0,r0,r1
00001c  490d              LDR      r1,|L21.84|
00001e  6008              STR      r0,[r1,#0]
;;;223    
;;;224      /* Reset PLLCFGR register */
;;;225      RCC->PLLCFGR = 0x24003010;
000020  480e              LDR      r0,|L21.92|
000022  1d09              ADDS     r1,r1,#4
000024  6008              STR      r0,[r1,#0]
;;;226    
;;;227      /* Reset PLLI2SCFGR register */
;;;228      RCC->PLLI2SCFGR = 0x20003000;
000026  480e              LDR      r0,|L21.96|
000028  490a              LDR      r1,|L21.84|
00002a  3184              ADDS     r1,r1,#0x84
00002c  6008              STR      r0,[r1,#0]
;;;229    
;;;230      /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
;;;231      RCC->PLLSAICFGR = 0x24003000;
00002e  480b              LDR      r0,|L21.92|
000030  3810              SUBS     r0,r0,#0x10
000032  1d09              ADDS     r1,r1,#4
000034  6008              STR      r0,[r1,#0]
;;;232     
;;;233      /* Reset HSEBYP bit */
;;;234      RCC->CR &= (uint32_t)0xFFFBFFFF;
000036  4807              LDR      r0,|L21.84|
000038  6800              LDR      r0,[r0,#0]
00003a  f4202080          BIC      r0,r0,#0x40000
00003e  4905              LDR      r1,|L21.84|
000040  6008              STR      r0,[r1,#0]
;;;235    
;;;236      /* Disable all interrupts */
;;;237      RCC->CIR = 0x00000000;
000042  2000              MOVS     r0,#0
000044  4903              LDR      r1,|L21.84|
000046  310c              ADDS     r1,r1,#0xc
000048  6008              STR      r0,[r1,#0]
;;;238    
;;;239      /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
;;;240      RCC->DCKCFGR = 0x00000000; 
00004a  4902              LDR      r1,|L21.84|
00004c  318c              ADDS     r1,r1,#0x8c
00004e  6008              STR      r0,[r1,#0]
;;;241    }
000050  4770              BX       lr
;;;242    
                          ENDP

000052  0000              DCW      0x0000
                  |L21.84|
                          DCD      0x40023800
                  |L21.88|
                          DCD      0xeaf6ffff
                  |L21.92|
                          DCD      0x24003010
                  |L21.96|
                          DCD      0x20003000

                          AREA ||i.RCC_GetClocksFreq||, CODE, READONLY, ALIGN=2

                  RCC_GetClocksFreq PROC
;;;1096     */
;;;1097   void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1098   {
;;;1099     uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
000002  2100              MOVS     r1,#0
000004  2200              MOVS     r2,#0
000006  2400              MOVS     r4,#0
000008  2502              MOVS     r5,#2
00000a  2600              MOVS     r6,#0
00000c  2302              MOVS     r3,#2
;;;1100   
;;;1101     /* Get SYSCLK source -------------------------------------------------------*/
;;;1102     tmp = RCC->CFGR & RCC_CFGR_SWS;
00000e  4f32              LDR      r7,|L22.216|
000010  683f              LDR      r7,[r7,#0]
000012  f007010c          AND      r1,r7,#0xc
;;;1103   
;;;1104     switch (tmp)
000016  b121              CBZ      r1,|L22.34|
000018  2904              CMP      r1,#4
00001a  d005              BEQ      |L22.40|
00001c  2908              CMP      r1,#8
00001e  d137              BNE      |L22.144|
000020  e005              B        |L22.46|
                  |L22.34|
;;;1105     {
;;;1106       case 0x00:  /* HSI used as system clock source */
;;;1107         RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
000022  4f2e              LDR      r7,|L22.220|
000024  6007              STR      r7,[r0,#0]
;;;1108         break;
000026  e036              B        |L22.150|
                  |L22.40|
;;;1109       case 0x04:  /* HSE used as system clock  source */
;;;1110         RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
000028  4f2d              LDR      r7,|L22.224|
00002a  6007              STR      r7,[r0,#0]
;;;1111         break;
00002c  e033              B        |L22.150|
                  |L22.46|
;;;1112       case 0x08:  /* PLL used as system clock  source */
;;;1113   
;;;1114         /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
;;;1115            SYSCLK = PLL_VCO / PLLP
;;;1116            */    
;;;1117         pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
00002e  4f2a              LDR      r7,|L22.216|
000030  1f3f              SUBS     r7,r7,#4
000032  683f              LDR      r7,[r7,#0]
000034  f3c75680          UBFX     r6,r7,#22,#1
;;;1118         pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
000038  4f27              LDR      r7,|L22.216|
00003a  1f3f              SUBS     r7,r7,#4
00003c  683f              LDR      r7,[r7,#0]
00003e  f007033f          AND      r3,r7,#0x3f
;;;1119         
;;;1120         if (pllsource != 0)
000042  b16e              CBZ      r6,|L22.96|
;;;1121         {
;;;1122           /* HSE used as PLL clock source */
;;;1123           pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
000044  4f26              LDR      r7,|L22.224|
000046  fbb7f7f3          UDIV     r7,r7,r3
00004a  f8dfc08c          LDR      r12,|L22.216|
00004e  f1ac0c04          SUB      r12,r12,#4
000052  f8dcc000          LDR      r12,[r12,#0]
000056  f3cc1c88          UBFX     r12,r12,#6,#9
00005a  fb07f40c          MUL      r4,r7,r12
00005e  e00c              B        |L22.122|
                  |L22.96|
;;;1124         }
;;;1125         else
;;;1126         {
;;;1127           /* HSI used as PLL clock source */
;;;1128           pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
000060  4f1e              LDR      r7,|L22.220|
000062  fbb7f7f3          UDIV     r7,r7,r3
000066  f8dfc070          LDR      r12,|L22.216|
00006a  f1ac0c04          SUB      r12,r12,#4
00006e  f8dcc000          LDR      r12,[r12,#0]
000072  f3cc1c88          UBFX     r12,r12,#6,#9
000076  fb07f40c          MUL      r4,r7,r12
                  |L22.122|
;;;1129         }
;;;1130   
;;;1131         pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
00007a  4f17              LDR      r7,|L22.216|
00007c  1f3f              SUBS     r7,r7,#4
00007e  683f              LDR      r7,[r7,#0]
000080  f3c74701          UBFX     r7,r7,#16,#2
000084  1c7f              ADDS     r7,r7,#1
000086  007d              LSLS     r5,r7,#1
;;;1132         RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
000088  fbb4f7f5          UDIV     r7,r4,r5
00008c  6007              STR      r7,[r0,#0]
;;;1133         break;
00008e  e002              B        |L22.150|
                  |L22.144|
;;;1134       default:
;;;1135         RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
000090  4f12              LDR      r7,|L22.220|
000092  6007              STR      r7,[r0,#0]
;;;1136         break;
000094  bf00              NOP      
                  |L22.150|
000096  bf00              NOP                            ;1108
;;;1137     }
;;;1138     /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
;;;1139   
;;;1140     /* Get HCLK prescaler */
;;;1141     tmp = RCC->CFGR & RCC_CFGR_HPRE;
000098  4f0f              LDR      r7,|L22.216|
00009a  683f              LDR      r7,[r7,#0]
00009c  f00701f0          AND      r1,r7,#0xf0
;;;1142     tmp = tmp >> 4;
0000a0  0909              LSRS     r1,r1,#4
;;;1143     presc = APBAHBPrescTable[tmp];
0000a2  4f10              LDR      r7,|L22.228|
0000a4  5c7a              LDRB     r2,[r7,r1]
;;;1144     /* HCLK clock frequency */
;;;1145     RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
0000a6  6807              LDR      r7,[r0,#0]
0000a8  40d7              LSRS     r7,r7,r2
0000aa  6047              STR      r7,[r0,#4]
;;;1146   
;;;1147     /* Get PCLK1 prescaler */
;;;1148     tmp = RCC->CFGR & RCC_CFGR_PPRE1;
0000ac  4f0a              LDR      r7,|L22.216|
0000ae  683f              LDR      r7,[r7,#0]
0000b0  f40751e0          AND      r1,r7,#0x1c00
;;;1149     tmp = tmp >> 10;
0000b4  0a89              LSRS     r1,r1,#10
;;;1150     presc = APBAHBPrescTable[tmp];
0000b6  4f0b              LDR      r7,|L22.228|
0000b8  5c7a              LDRB     r2,[r7,r1]
;;;1151     /* PCLK1 clock frequency */
;;;1152     RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
0000ba  6847              LDR      r7,[r0,#4]
0000bc  40d7              LSRS     r7,r7,r2
0000be  6087              STR      r7,[r0,#8]
;;;1153   
;;;1154     /* Get PCLK2 prescaler */
;;;1155     tmp = RCC->CFGR & RCC_CFGR_PPRE2;
0000c0  4f05              LDR      r7,|L22.216|
0000c2  683f              LDR      r7,[r7,#0]
0000c4  f4074160          AND      r1,r7,#0xe000
;;;1156     tmp = tmp >> 13;
0000c8  0b49              LSRS     r1,r1,#13
;;;1157     presc = APBAHBPrescTable[tmp];
0000ca  4f06              LDR      r7,|L22.228|
0000cc  5c7a              LDRB     r2,[r7,r1]
;;;1158     /* PCLK2 clock frequency */
;;;1159     RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
0000ce  6847              LDR      r7,[r0,#4]
0000d0  40d7              LSRS     r7,r7,r2
0000d2  60c7              STR      r7,[r0,#0xc]
;;;1160   }
0000d4  bdf0              POP      {r4-r7,pc}
;;;1161   
                          ENDP

0000d6  0000              DCW      0x0000
                  |L22.216|
                          DCD      0x40023808
                  |L22.220|
                          DCD      0x00f42400
                  |L22.224|
                          DCD      0x007a1200
                  |L22.228|
                          DCD      APBAHBPrescTable

                          AREA ||i.RCC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  RCC_GetFlagStatus PROC
;;;2181     */
;;;2182   FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
000000  b510              PUSH     {r4,lr}
;;;2183   {
000002  4601              MOV      r1,r0
;;;2184     uint32_t tmp = 0;
000004  2200              MOVS     r2,#0
;;;2185     uint32_t statusreg = 0;
000006  2300              MOVS     r3,#0
;;;2186     FlagStatus bitstatus = RESET;
000008  2000              MOVS     r0,#0
;;;2187   
;;;2188     /* Check the parameters */
;;;2189     assert_param(IS_RCC_FLAG(RCC_FLAG));
;;;2190   
;;;2191     /* Get the RCC register index */
;;;2192     tmp = RCC_FLAG >> 5;
00000a  114a              ASRS     r2,r1,#5
;;;2193     if (tmp == 1)               /* The flag to check is in CR register */
00000c  2a01              CMP      r2,#1
00000e  d102              BNE      |L23.22|
;;;2194     {
;;;2195       statusreg = RCC->CR;
000010  4c0a              LDR      r4,|L23.60|
000012  6823              LDR      r3,[r4,#0]
000014  e008              B        |L23.40|
                  |L23.22|
;;;2196     }
;;;2197     else if (tmp == 2)          /* The flag to check is in BDCR register */
000016  2a02              CMP      r2,#2
000018  d103              BNE      |L23.34|
;;;2198     {
;;;2199       statusreg = RCC->BDCR;
00001a  4c08              LDR      r4,|L23.60|
00001c  3470              ADDS     r4,r4,#0x70
00001e  6823              LDR      r3,[r4,#0]
000020  e002              B        |L23.40|
                  |L23.34|
;;;2200     }
;;;2201     else                       /* The flag to check is in CSR register */
;;;2202     {
;;;2203       statusreg = RCC->CSR;
000022  4c06              LDR      r4,|L23.60|
000024  3474              ADDS     r4,r4,#0x74
000026  6823              LDR      r3,[r4,#0]
                  |L23.40|
;;;2204     }
;;;2205   
;;;2206     /* Get the flag position */
;;;2207     tmp = RCC_FLAG & FLAG_MASK;
000028  f001021f          AND      r2,r1,#0x1f
;;;2208     if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
00002c  2401              MOVS     r4,#1
00002e  4094              LSLS     r4,r4,r2
000030  401c              ANDS     r4,r4,r3
000032  b10c              CBZ      r4,|L23.56|
;;;2209     {
;;;2210       bitstatus = SET;
000034  2001              MOVS     r0,#1
000036  e000              B        |L23.58|
                  |L23.56|
;;;2211     }
;;;2212     else
;;;2213     {
;;;2214       bitstatus = RESET;
000038  2000              MOVS     r0,#0
                  |L23.58|
;;;2215     }
;;;2216     /* Return the flag status */
;;;2217     return bitstatus;
;;;2218   }
00003a  bd10              POP      {r4,pc}
;;;2219   
                          ENDP

                  |L23.60|
                          DCD      0x40023800

                          AREA ||i.RCC_GetITStatus||, CODE, READONLY, ALIGN=2

                  RCC_GetITStatus PROC
;;;2246     */
;;;2247   ITStatus RCC_GetITStatus(uint8_t RCC_IT)
000000  4601              MOV      r1,r0
;;;2248   {
;;;2249     ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;2250   
;;;2251     /* Check the parameters */
;;;2252     assert_param(IS_RCC_GET_IT(RCC_IT));
;;;2253   
;;;2254     /* Check the status of the specified RCC interrupt */
;;;2255     if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
000004  4a03              LDR      r2,|L24.20|
000006  6812              LDR      r2,[r2,#0]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L24.16|
;;;2256     {
;;;2257       bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L24.18|
                  |L24.16|
;;;2258     }
;;;2259     else
;;;2260     {
;;;2261       bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L24.18|
;;;2262     }
;;;2263     /* Return the RCC_IT status */
;;;2264     return  bitstatus;
;;;2265   }
000012  4770              BX       lr
;;;2266   
                          ENDP

                  |L24.20|
                          DCD      0x4002380c

                          AREA ||i.RCC_GetSYSCLKSource||, CODE, READONLY, ALIGN=2

                  RCC_GetSYSCLKSource PROC
;;;956      */
;;;957    uint8_t RCC_GetSYSCLKSource(void)
000000  4802              LDR      r0,|L25.12|
;;;958    {
;;;959      return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
000002  6800              LDR      r0,[r0,#0]
000004  f000000c          AND      r0,r0,#0xc
;;;960    }
000008  4770              BX       lr
;;;961    
                          ENDP

00000a  0000              DCW      0x0000
                  |L25.12|
                          DCD      0x40023808

                          AREA ||i.RCC_HCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_HCLKConfig PROC
;;;981      */
;;;982    void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
000000  4601              MOV      r1,r0
;;;983    {
;;;984      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;985      
;;;986      /* Check the parameters */
;;;987      assert_param(IS_RCC_HCLK(RCC_SYSCLK));
;;;988    
;;;989      tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L26.20|
000006  6810              LDR      r0,[r2,#0]
;;;990    
;;;991      /* Clear HPRE[3:0] bits */
;;;992      tmpreg &= ~RCC_CFGR_HPRE;
000008  f02000f0          BIC      r0,r0,#0xf0
;;;993    
;;;994      /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
;;;995      tmpreg |= RCC_SYSCLK;
00000c  4308              ORRS     r0,r0,r1
;;;996    
;;;997      /* Store the new value */
;;;998      RCC->CFGR = tmpreg;
00000e  6010              STR      r0,[r2,#0]
;;;999    }
000010  4770              BX       lr
;;;1000   
                          ENDP

000012  0000              DCW      0x0000
                  |L26.20|
                          DCD      0x40023808

                          AREA ||i.RCC_HSEConfig||, CODE, READONLY, ALIGN=2

                  RCC_HSEConfig PROC
;;;262      */
;;;263    void RCC_HSEConfig(uint8_t RCC_HSE)
000000  2100              MOVS     r1,#0
;;;264    {
;;;265      /* Check the parameters */
;;;266      assert_param(IS_RCC_HSE(RCC_HSE));
;;;267    
;;;268      /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
;;;269      *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
000002  4a02              LDR      r2,|L27.12|
000004  7011              STRB     r1,[r2,#0]
;;;270    
;;;271      /* Set the new HSE configuration -------------------------------------------*/
;;;272      *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
000006  4611              MOV      r1,r2
000008  7008              STRB     r0,[r1,#0]
;;;273    }
00000a  4770              BX       lr
;;;274    
                          ENDP

                  |L27.12|
                          DCD      0x40023802

                          AREA ||i.RCC_HSICmd||, CODE, READONLY, ALIGN=2

                  RCC_HSICmd PROC
;;;353      */
;;;354    void RCC_HSICmd(FunctionalState NewState)
000000  4901              LDR      r1,|L28.8|
;;;355    {
;;;356      /* Check the parameters */
;;;357      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;358    
;;;359      *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;360    }
000004  4770              BX       lr
;;;361    
                          ENDP

000006  0000              DCW      0x0000
                  |L28.8|
                          DCD      0x42470000

                          AREA ||i.RCC_I2SCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_I2SCLKConfig PROC
;;;1287     */
;;;1288   void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
000000  4901              LDR      r1,|L29.8|
;;;1289   {
;;;1290     /* Check the parameters */
;;;1291     assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
;;;1292   
;;;1293     *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
000002  6008              STR      r0,[r1,#0]
;;;1294   }
000004  4770              BX       lr
;;;1295   
                          ENDP

000006  0000              DCW      0x0000
                  |L29.8|
                          DCD      0x4247015c

                          AREA ||i.RCC_ITConfig||, CODE, READONLY, ALIGN=2

                  RCC_ITConfig PROC
;;;2144     */
;;;2145   void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
000000  b129              CBZ      r1,|L30.14|
;;;2146   {
;;;2147     /* Check the parameters */
;;;2148     assert_param(IS_RCC_IT(RCC_IT));
;;;2149     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2150     if (NewState != DISABLE)
;;;2151     {
;;;2152       /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
;;;2153       *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
000002  4a06              LDR      r2,|L30.28|
000004  7812              LDRB     r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L30.28|
00000a  701a              STRB     r2,[r3,#0]
00000c  e004              B        |L30.24|
                  |L30.14|
;;;2154     }
;;;2155     else
;;;2156     {
;;;2157       /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
;;;2158       *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
00000e  4a03              LDR      r2,|L30.28|
000010  7812              LDRB     r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L30.28|
000016  701a              STRB     r2,[r3,#0]
                  |L30.24|
;;;2159     }
;;;2160   }
000018  4770              BX       lr
;;;2161   
                          ENDP

00001a  0000              DCW      0x0000
                  |L30.28|
                          DCD      0x4002380d

                          AREA ||i.RCC_LSEConfig||, CODE, READONLY, ALIGN=2

                  RCC_LSEConfig PROC
;;;378      */
;;;379    void RCC_LSEConfig(uint8_t RCC_LSE)
000000  2100              MOVS     r1,#0
;;;380    {
;;;381      /* Check the parameters */
;;;382      assert_param(IS_RCC_LSE(RCC_LSE));
;;;383    
;;;384      /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
;;;385      /* Reset LSEON bit */
;;;386      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
000002  4a09              LDR      r2,|L31.40|
000004  7011              STRB     r1,[r2,#0]
;;;387    
;;;388      /* Reset LSEBYP bit */
;;;389      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
000006  7011              STRB     r1,[r2,#0]
;;;390    
;;;391      /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
;;;392      switch (RCC_LSE)
000008  2801              CMP      r0,#1
00000a  d002              BEQ      |L31.18|
00000c  2804              CMP      r0,#4
00000e  d108              BNE      |L31.34|
000010  e003              B        |L31.26|
                  |L31.18|
;;;393      {
;;;394        case RCC_LSE_ON:
;;;395          /* Set LSEON bit */
;;;396          *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
000012  2101              MOVS     r1,#1
000014  4a04              LDR      r2,|L31.40|
000016  7011              STRB     r1,[r2,#0]
;;;397          break;
000018  e004              B        |L31.36|
                  |L31.26|
;;;398        case RCC_LSE_Bypass:
;;;399          /* Set LSEBYP and LSEON bits */
;;;400          *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
00001a  2105              MOVS     r1,#5
00001c  4a02              LDR      r2,|L31.40|
00001e  7011              STRB     r1,[r2,#0]
;;;401          break;
000020  e000              B        |L31.36|
                  |L31.34|
;;;402        default:
;;;403          break;
000022  bf00              NOP      
                  |L31.36|
000024  bf00              NOP                            ;397
;;;404      }
;;;405    }
000026  4770              BX       lr
;;;406    
                          ENDP

                  |L31.40|
                          DCD      0x40023870

                          AREA ||i.RCC_LSEModeConfig||, CODE, READONLY, ALIGN=2

                  RCC_LSEModeConfig PROC
;;;2098     */
;;;2099   void RCC_LSEModeConfig(uint8_t Mode)
000000  2801              CMP      r0,#1
;;;2100   {
;;;2101     /* Check the parameters */
;;;2102     assert_param(IS_RCC_LSE_MODE(Mode));
;;;2103     
;;;2104     if(Mode == RCC_LSE_HIGHDRIVE_MODE)
000002  d106              BNE      |L32.18|
;;;2105     {
;;;2106       SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
000004  4906              LDR      r1,|L32.32|
000006  6809              LDR      r1,[r1,#0]
000008  f0410108          ORR      r1,r1,#8
00000c  4a04              LDR      r2,|L32.32|
00000e  6011              STR      r1,[r2,#0]
000010  e005              B        |L32.30|
                  |L32.18|
;;;2107     }
;;;2108     else
;;;2109     {
;;;2110       CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
000012  4903              LDR      r1,|L32.32|
000014  6809              LDR      r1,[r1,#0]
000016  f0210108          BIC      r1,r1,#8
00001a  4a01              LDR      r2,|L32.32|
00001c  6011              STR      r1,[r2,#0]
                  |L32.30|
;;;2111     }
;;;2112   }
00001e  4770              BX       lr
;;;2113   
                          ENDP

                  |L32.32|
                          DCD      0x40023870

                          AREA ||i.RCC_LSICmd||, CODE, READONLY, ALIGN=2

                  RCC_LSICmd PROC
;;;418      */
;;;419    void RCC_LSICmd(FunctionalState NewState)
000000  4901              LDR      r1,|L33.8|
;;;420    {
;;;421      /* Check the parameters */
;;;422      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;423    
;;;424      *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;425    }
000004  4770              BX       lr
;;;426    
                          ENDP

000006  0000              DCW      0x0000
                  |L33.8|
                          DCD      0x42470e80

                          AREA ||i.RCC_LTDCCLKDivConfig||, CODE, READONLY, ALIGN=2

                  RCC_LTDCCLKDivConfig PROC
;;;1445     */
;;;1446   void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
000000  4601              MOV      r1,r0
;;;1447   {
;;;1448     uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;1449     
;;;1450     /* Check the parameters */
;;;1451     assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
;;;1452     
;;;1453     tmpreg = RCC->DCKCFGR;
000004  4a03              LDR      r2,|L34.20|
000006  6810              LDR      r0,[r2,#0]
;;;1454   
;;;1455     /* Clear PLLSAIDIVR[2:0] bits */
;;;1456     tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
000008  f4203040          BIC      r0,r0,#0x30000
;;;1457   
;;;1458     /* Set PLLSAIDIVR values */
;;;1459     tmpreg |= RCC_PLLSAIDivR;
00000c  4308              ORRS     r0,r0,r1
;;;1460   
;;;1461     /* Store the new value */
;;;1462     RCC->DCKCFGR = tmpreg;
00000e  6010              STR      r0,[r2,#0]
;;;1463   }
000010  4770              BX       lr
;;;1464   
                          ENDP

000012  0000              DCW      0x0000
                  |L34.20|
                          DCD      0x4002388c

                          AREA ||i.RCC_MCO1Config||, CODE, READONLY, ALIGN=2

                  RCC_MCO1Config PROC
;;;695      */
;;;696    void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
000000  4602              MOV      r2,r0
;;;697    {
;;;698      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;699      
;;;700      /* Check the parameters */
;;;701      assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
;;;702      assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
;;;703    
;;;704      tmpreg = RCC->CFGR;
000004  4b04              LDR      r3,|L35.24|
000006  6818              LDR      r0,[r3,#0]
;;;705    
;;;706      /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
;;;707      tmpreg &= CFGR_MCO1_RESET_MASK;
000008  f02060ec          BIC      r0,r0,#0x7600000
;;;708    
;;;709      /* Select MCO1 clock source and prescaler */
;;;710      tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
00000c  ea420301          ORR      r3,r2,r1
000010  4318              ORRS     r0,r0,r3
;;;711    
;;;712      /* Store the new value */
;;;713      RCC->CFGR = tmpreg;  
000012  4b01              LDR      r3,|L35.24|
000014  6018              STR      r0,[r3,#0]
;;;714    }
000016  4770              BX       lr
;;;715    
                          ENDP

                  |L35.24|
                          DCD      0x40023808

                          AREA ||i.RCC_MCO2Config||, CODE, READONLY, ALIGN=2

                  RCC_MCO2Config PROC
;;;733      */
;;;734    void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
000000  4602              MOV      r2,r0
;;;735    {
;;;736      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;737      
;;;738      /* Check the parameters */
;;;739      assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
;;;740      assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
;;;741      
;;;742      tmpreg = RCC->CFGR;
000004  4b04              LDR      r3,|L36.24|
000006  6818              LDR      r0,[r3,#0]
;;;743      
;;;744      /* Clear MCO2 and MCO2PRE[2:0] bits */
;;;745      tmpreg &= CFGR_MCO2_RESET_MASK;
000008  f0204078          BIC      r0,r0,#0xf8000000
;;;746    
;;;747      /* Select MCO2 clock source and prescaler */
;;;748      tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
00000c  ea420301          ORR      r3,r2,r1
000010  4318              ORRS     r0,r0,r3
;;;749    
;;;750      /* Store the new value */
;;;751      RCC->CFGR = tmpreg;  
000012  4b01              LDR      r3,|L36.24|
000014  6018              STR      r0,[r3,#0]
;;;752    }
000016  4770              BX       lr
;;;753    
                          ENDP

                  |L36.24|
                          DCD      0x40023808

                          AREA ||i.RCC_PCLK1Config||, CODE, READONLY, ALIGN=2

                  RCC_PCLK1Config PROC
;;;1013     */
;;;1014   void RCC_PCLK1Config(uint32_t RCC_HCLK)
000000  4601              MOV      r1,r0
;;;1015   {
;;;1016     uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;1017   
;;;1018     /* Check the parameters */
;;;1019     assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;1020   
;;;1021     tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L37.20|
000006  6810              LDR      r0,[r2,#0]
;;;1022   
;;;1023     /* Clear PPRE1[2:0] bits */
;;;1024     tmpreg &= ~RCC_CFGR_PPRE1;
000008  f42050e0          BIC      r0,r0,#0x1c00
;;;1025   
;;;1026     /* Set PPRE1[2:0] bits according to RCC_HCLK value */
;;;1027     tmpreg |= RCC_HCLK;
00000c  4308              ORRS     r0,r0,r1
;;;1028   
;;;1029     /* Store the new value */
;;;1030     RCC->CFGR = tmpreg;
00000e  6010              STR      r0,[r2,#0]
;;;1031   }
000010  4770              BX       lr
;;;1032   
                          ENDP

000012  0000              DCW      0x0000
                  |L37.20|
                          DCD      0x40023808

                          AREA ||i.RCC_PCLK2Config||, CODE, READONLY, ALIGN=2

                  RCC_PCLK2Config PROC
;;;1044     */
;;;1045   void RCC_PCLK2Config(uint32_t RCC_HCLK)
000000  4601              MOV      r1,r0
;;;1046   {
;;;1047     uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;1048   
;;;1049     /* Check the parameters */
;;;1050     assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;1051   
;;;1052     tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L38.20|
000006  6810              LDR      r0,[r2,#0]
;;;1053   
;;;1054     /* Clear PPRE2[2:0] bits */
;;;1055     tmpreg &= ~RCC_CFGR_PPRE2;
000008  f4204060          BIC      r0,r0,#0xe000
;;;1056   
;;;1057     /* Set PPRE2[2:0] bits according to RCC_HCLK value */
;;;1058     tmpreg |= RCC_HCLK << 3;
00000c  ea4000c1          ORR      r0,r0,r1,LSL #3
;;;1059   
;;;1060     /* Store the new value */
;;;1061     RCC->CFGR = tmpreg;
000010  6010              STR      r0,[r2,#0]
;;;1062   }
000012  4770              BX       lr
;;;1063   
                          ENDP

                  |L38.20|
                          DCD      0x40023808

                          AREA ||i.RCC_PLLCmd||, CODE, READONLY, ALIGN=2

                  RCC_PLLCmd PROC
;;;484      */
;;;485    void RCC_PLLCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L39.8|
;;;486    {
;;;487      /* Check the parameters */
;;;488      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;489      *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
000002  6608              STR      r0,[r1,#0x60]
;;;490    }
000004  4770              BX       lr
;;;491    
                          ENDP

000006  0000              DCW      0x0000
                  |L39.8|
                          DCD      0x42470000

                          AREA ||i.RCC_PLLConfig||, CODE, READONLY, ALIGN=2

                  RCC_PLLConfig PROC
;;;461      */
;;;462    void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
000000  b570              PUSH     {r4-r6,lr}
;;;463    {
000002  9c04              LDR      r4,[sp,#0x10]
;;;464      /* Check the parameters */
;;;465      assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
;;;466      assert_param(IS_RCC_PLLM_VALUE(PLLM));
;;;467      assert_param(IS_RCC_PLLN_VALUE(PLLN));
;;;468      assert_param(IS_RCC_PLLP_VALUE(PLLP));
;;;469      assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
;;;470    
;;;471      RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
000004  ea411582          ORR      r5,r1,r2,LSL #6
000008  2601              MOVS     r6,#1
00000a  ebc60653          RSB      r6,r6,r3,LSR #1
00000e  ea454506          ORR      r5,r5,r6,LSL #16
000012  4305              ORRS     r5,r5,r0
000014  ea456504          ORR      r5,r5,r4,LSL #24
000018  4e01              LDR      r6,|L40.32|
00001a  6035              STR      r5,[r6,#0]
;;;472                     (PLLQ << 24);
;;;473    }
00001c  bd70              POP      {r4-r6,pc}
;;;474    
                          ENDP

00001e  0000              DCW      0x0000
                  |L40.32|
                          DCD      0x40023804

                          AREA ||i.RCC_PLLI2SCmd||, CODE, READONLY, ALIGN=2

                  RCC_PLLI2SCmd PROC
;;;605      */
;;;606    void RCC_PLLI2SCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L41.8|
;;;607    {
;;;608      /* Check the parameters */
;;;609      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;610      *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
000002  6688              STR      r0,[r1,#0x68]
;;;611    }
000004  4770              BX       lr
;;;612    
                          ENDP

000006  0000              DCW      0x0000
                  |L41.8|
                          DCD      0x42470000

                          AREA ||i.RCC_PLLI2SConfig||, CODE, READONLY, ALIGN=2

                  RCC_PLLI2SConfig PROC
;;;514      */
;;;515    void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
000000  0182              LSLS     r2,r0,#6
;;;516    {
;;;517      /* Check the parameters */
;;;518      assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
;;;519      assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
;;;520    
;;;521      RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
000002  ea427201          ORR      r2,r2,r1,LSL #28
000006  4b01              LDR      r3,|L42.12|
000008  601a              STR      r2,[r3,#0]
;;;522    }
00000a  4770              BX       lr
;;;523    
                          ENDP

                  |L42.12|
                          DCD      0x40023884

                          AREA ||i.RCC_PLLSAICmd||, CODE, READONLY, ALIGN=2

                  RCC_PLLSAICmd PROC
;;;652      */
;;;653    void RCC_PLLSAICmd(FunctionalState NewState)
000000  4901              LDR      r1,|L43.8|
;;;654    {
;;;655      /* Check the parameters */
;;;656      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;657      *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
000002  6708              STR      r0,[r1,#0x70]
;;;658    }
000004  4770              BX       lr
;;;659    
                          ENDP

000006  0000              DCW      0x0000
                  |L43.8|
                          DCD      0x42470000

                          AREA ||i.RCC_PLLSAIConfig||, CODE, READONLY, ALIGN=2

                  RCC_PLLSAIConfig PROC
;;;634      */
;;;635    void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
000000  b510              PUSH     {r4,lr}
;;;636    {
;;;637      /* Check the parameters */
;;;638      assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
;;;639      assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
;;;640    
;;;641      RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
000002  0183              LSLS     r3,r0,#6
000004  ea436301          ORR      r3,r3,r1,LSL #24
000008  ea437302          ORR      r3,r3,r2,LSL #28
00000c  4c01              LDR      r4,|L44.20|
00000e  6023              STR      r3,[r4,#0]
;;;642    }
000010  bd10              POP      {r4,pc}
;;;643    
                          ENDP

000012  0000              DCW      0x0000
                  |L44.20|
                          DCD      0x40023888

                          AREA ||i.RCC_RTCCLKCmd||, CODE, READONLY, ALIGN=2

                  RCC_RTCCLKCmd PROC
;;;1253     */
;;;1254   void RCC_RTCCLKCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L45.8|
;;;1255   {
;;;1256     /* Check the parameters */
;;;1257     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1258   
;;;1259     *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;1260   }
000004  4770              BX       lr
;;;1261   
                          ENDP

000006  0000              DCW      0x0000
                  |L45.8|
                          DCD      0x42470e3c

                          AREA ||i.RCC_RTCCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_RTCCLKConfig PROC
;;;1221     */
;;;1222   void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
000000  2100              MOVS     r1,#0
;;;1223   {
;;;1224     uint32_t tmpreg = 0;
;;;1225   
;;;1226     /* Check the parameters */
;;;1227     assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
;;;1228   
;;;1229     if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
000002  f4007240          AND      r2,r0,#0x300
000006  f5b27f40          CMP      r2,#0x300
00000a  d108              BNE      |L46.30|
;;;1230     { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
;;;1231       tmpreg = RCC->CFGR;
00000c  4a09              LDR      r2,|L46.52|
00000e  6811              LDR      r1,[r2,#0]
;;;1232   
;;;1233       /* Clear RTCPRE[4:0] bits */
;;;1234       tmpreg &= ~RCC_CFGR_RTCPRE;
000010  f42111f8          BIC      r1,r1,#0x1f0000
;;;1235   
;;;1236       /* Configure HSE division factor for RTC clock */
;;;1237       tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
000014  4a08              LDR      r2,|L46.56|
000016  4002              ANDS     r2,r2,r0
000018  4311              ORRS     r1,r1,r2
;;;1238   
;;;1239       /* Store the new value */
;;;1240       RCC->CFGR = tmpreg;
00001a  4a06              LDR      r2,|L46.52|
00001c  6011              STR      r1,[r2,#0]
                  |L46.30|
;;;1241     }
;;;1242       
;;;1243     /* Select the RTC clock source */
;;;1244     RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
00001e  4a05              LDR      r2,|L46.52|
000020  3268              ADDS     r2,r2,#0x68
000022  6812              LDR      r2,[r2,#0]
000024  f3c0030b          UBFX     r3,r0,#0,#12
000028  431a              ORRS     r2,r2,r3
00002a  4b02              LDR      r3,|L46.52|
00002c  3368              ADDS     r3,r3,#0x68
00002e  601a              STR      r2,[r3,#0]
;;;1245   }
000030  4770              BX       lr
;;;1246   
                          ENDP

000032  0000              DCW      0x0000
                  |L46.52|
                          DCD      0x40023808
                  |L46.56|
                          DCD      0x0ffffcff

                          AREA ||i.RCC_SAIBlockACLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_SAIBlockACLKConfig PROC
;;;1376     */
;;;1377   void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
000000  4601              MOV      r1,r0
;;;1378   {
;;;1379     uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;1380     
;;;1381     /* Check the parameters */
;;;1382     assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
;;;1383     
;;;1384     tmpreg = RCC->DCKCFGR;
000004  4a03              LDR      r2,|L47.20|
000006  6810              LDR      r0,[r2,#0]
;;;1385   
;;;1386     /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
;;;1387     tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
000008  f4201040          BIC      r0,r0,#0x300000
;;;1388   
;;;1389     /* Set SAI Block A source selection value */
;;;1390     tmpreg |= RCC_SAIBlockACLKSource;
00000c  4308              ORRS     r0,r0,r1
;;;1391   
;;;1392     /* Store the new value */
;;;1393     RCC->DCKCFGR = tmpreg;
00000e  6010              STR      r0,[r2,#0]
;;;1394   }
000010  4770              BX       lr
;;;1395   
                          ENDP

000012  0000              DCW      0x0000
                  |L47.20|
                          DCD      0x4002388c

                          AREA ||i.RCC_SAIBlockBCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_SAIBlockBCLKConfig PROC
;;;1412     */
;;;1413   void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
000000  4601              MOV      r1,r0
;;;1414   {
;;;1415     uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;1416     
;;;1417     /* Check the parameters */
;;;1418     assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
;;;1419     
;;;1420     tmpreg = RCC->DCKCFGR;
000004  4a03              LDR      r2,|L48.20|
000006  6810              LDR      r0,[r2,#0]
;;;1421   
;;;1422     /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
;;;1423     tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
000008  f4200040          BIC      r0,r0,#0xc00000
;;;1424   
;;;1425     /* Set SAI Block B source selection value */
;;;1426     tmpreg |= RCC_SAIBlockBCLKSource;
00000c  4308              ORRS     r0,r0,r1
;;;1427   
;;;1428     /* Store the new value */
;;;1429     RCC->DCKCFGR = tmpreg;
00000e  6010              STR      r0,[r2,#0]
;;;1430   }
000010  4770              BX       lr
;;;1431   
                          ENDP

000012  0000              DCW      0x0000
                  |L48.20|
                          DCD      0x4002388c

                          AREA ||i.RCC_SAIPLLI2SClkDivConfig||, CODE, READONLY, ALIGN=2

                  RCC_SAIPLLI2SClkDivConfig PROC
;;;1308     */
;;;1309   void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
000000  4601              MOV      r1,r0
;;;1310   {
;;;1311     uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;1312     
;;;1313     /* Check the parameters */
;;;1314     assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
;;;1315     
;;;1316     tmpreg = RCC->DCKCFGR;
000004  4a04              LDR      r2,|L49.24|
000006  6810              LDR      r0,[r2,#0]
;;;1317   
;;;1318     /* Clear PLLI2SDIVQ[4:0] bits */
;;;1319     tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
000008  f020001f          BIC      r0,r0,#0x1f
;;;1320   
;;;1321     /* Set PLLI2SDIVQ values */
;;;1322     tmpreg |= (RCC_PLLI2SDivQ - 1);
00000c  1e4a              SUBS     r2,r1,#1
00000e  4310              ORRS     r0,r0,r2
;;;1323   
;;;1324     /* Store the new value */
;;;1325     RCC->DCKCFGR = tmpreg;
000010  4a01              LDR      r2,|L49.24|
000012  6010              STR      r0,[r2,#0]
;;;1326   }
000014  4770              BX       lr
;;;1327   
                          ENDP

000016  0000              DCW      0x0000
                  |L49.24|
                          DCD      0x4002388c

                          AREA ||i.RCC_SAIPLLSAIClkDivConfig||, CODE, READONLY, ALIGN=2

                  RCC_SAIPLLSAIClkDivConfig PROC
;;;1340     */
;;;1341   void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
000000  4601              MOV      r1,r0
;;;1342   {
;;;1343     uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;1344     
;;;1345     /* Check the parameters */
;;;1346     assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
;;;1347     
;;;1348     tmpreg = RCC->DCKCFGR;
000004  4a04              LDR      r2,|L50.24|
000006  6810              LDR      r0,[r2,#0]
;;;1349   
;;;1350     /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
;;;1351     tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
000008  f42050f8          BIC      r0,r0,#0x1f00
;;;1352   
;;;1353     /* Set PLLSAIDIVQ values */
;;;1354     tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
00000c  1e4a              SUBS     r2,r1,#1
00000e  ea402002          ORR      r0,r0,r2,LSL #8
;;;1355   
;;;1356     /* Store the new value */
;;;1357     RCC->DCKCFGR = tmpreg;
000012  4a01              LDR      r2,|L50.24|
000014  6010              STR      r0,[r2,#0]
;;;1358   }
000016  4770              BX       lr
;;;1359   
                          ENDP

                  |L50.24|
                          DCD      0x4002388c

                          AREA ||i.RCC_SYSCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_SYSCLKConfig PROC
;;;928      */
;;;929    void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
000000  4601              MOV      r1,r0
;;;930    {
;;;931      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;932    
;;;933      /* Check the parameters */
;;;934      assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
;;;935    
;;;936      tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L51.20|
000006  6810              LDR      r0,[r2,#0]
;;;937    
;;;938      /* Clear SW[1:0] bits */
;;;939      tmpreg &= ~RCC_CFGR_SW;
000008  f0200003          BIC      r0,r0,#3
;;;940    
;;;941      /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
;;;942      tmpreg |= RCC_SYSCLKSource;
00000c  4308              ORRS     r0,r0,r1
;;;943    
;;;944      /* Store the new value */
;;;945      RCC->CFGR = tmpreg;
00000e  6010              STR      r0,[r2,#0]
;;;946    }
000010  4770              BX       lr
;;;947    
                          ENDP

000012  0000              DCW      0x0000
                  |L51.20|
                          DCD      0x40023808

                          AREA ||i.RCC_TIMCLKPresConfig||, CODE, READONLY, ALIGN=2

                  RCC_TIMCLKPresConfig PROC
;;;1482     */
;;;1483   void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
000000  4901              LDR      r1,|L52.8|
;;;1484   {
;;;1485     /* Check the parameters */
;;;1486     assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));
;;;1487   
;;;1488     *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
000002  6008              STR      r0,[r1,#0]
;;;1489     
;;;1490   }
000004  4770              BX       lr
;;;1491   
                          ENDP

000006  0000              DCW      0x0000
                  |L52.8|
                          DCD      0x424711e0

                          AREA ||i.RCC_WaitForHSEStartUp||, CODE, READONLY, ALIGN=1

                  RCC_WaitForHSEStartUp PROC
;;;286      */
;;;287    ErrorStatus RCC_WaitForHSEStartUp(void)
000000  b538              PUSH     {r3-r5,lr}
;;;288    {
;;;289      __IO uint32_t startupcounter = 0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;290      ErrorStatus status = ERROR;
000006  2400              MOVS     r4,#0
;;;291      FlagStatus hsestatus = RESET;
000008  2500              MOVS     r5,#0
;;;292      /* Wait till HSE is ready and if Time out is reached exit */
;;;293      do
00000a  bf00              NOP      
                  |L53.12|
;;;294      {
;;;295        hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
00000c  2031              MOVS     r0,#0x31
00000e  f7fffffe          BL       RCC_GetFlagStatus
000012  4605              MOV      r5,r0
;;;296        startupcounter++;
000014  9800              LDR      r0,[sp,#0]
000016  1c40              ADDS     r0,r0,#1
000018  9000              STR      r0,[sp,#0]
;;;297      } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
00001a  9800              LDR      r0,[sp,#0]
00001c  f5b04fa0          CMP      r0,#0x5000
000020  d001              BEQ      |L53.38|
000022  2d00              CMP      r5,#0
000024  d0f2              BEQ      |L53.12|
                  |L53.38|
;;;298    
;;;299      if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
000026  2031              MOVS     r0,#0x31
000028  f7fffffe          BL       RCC_GetFlagStatus
00002c  b108              CBZ      r0,|L53.50|
;;;300      {
;;;301        status = SUCCESS;
00002e  2401              MOVS     r4,#1
000030  e000              B        |L53.52|
                  |L53.50|
;;;302      }
;;;303      else
;;;304      {
;;;305        status = ERROR;
000032  2400              MOVS     r4,#0
                  |L53.52|
;;;306      }
;;;307      return (status);
000034  4620              MOV      r0,r4
;;;308    }
000036  bd38              POP      {r3-r5,pc}
;;;309    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=0

                  APBAHBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  01020304          DCB      0x01,0x02,0x03,0x04
000008  01020304          DCB      0x01,0x02,0x03,0x04
00000c  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\FWLIB\\src\\stm32f4xx_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_rcc_c_49e27980____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___15_stm32f4xx_rcc_c_49e27980____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_rcc_c_49e27980____REVSH|
#line 144
|__asm___15_stm32f4xx_rcc_c_49e27980____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
