L 1 "..\..\..\module\customize\ButtonModule\ButtonModule.c"
N#include "ButtonModule.h"
L 1 "..\..\..\module\customize\ButtonModule\ButtonModule.h" 1
N#ifndef __BUTTONMODULE_H
N#define __BUTTONMODULE_H
N
N#include "..\..\Common\x_cross_platform.h"
L 1 "..\..\..\module\customize\ButtonModule\..\..\Common\x_cross_platform.h" 1
N#ifndef __X_CROSS_PLATFORM_H
N#define __X_CROSS_PLATFORM_H
N
N#include <stdint.h>
L 1 "D:\Program Files\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060037
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 5 "..\..\..\module\customize\ButtonModule\..\..\Common\x_cross_platform.h" 2
N#include <wchar.h>
L 1 "D:\Program Files\ARM\ARMCC\Bin\..\include\wchar.h" 1
N/* wchar.h: C99 header */
N/* Copyright 2002 ARM Limited. All rights reserved.            */
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __wchar_h
N#define __wchar_h
N#define __ARMCLIB_VERSION 5060037
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __WCHAR_DECLS
N  #define __WCHAR_DECLS
N
N    #undef __CLIBNS
N    #ifdef __cplusplus
S        #define __CLIBNS ::std::
S        namespace std {
S        extern "C" {
N    #else /* ndef __cplusplus */
N      #define __CLIBNS
N    #endif /* ndef __cplusplus */
N
N    #if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__size_t)
X    #if 0L || !0L || !0L
N     /* always defined in C++ and non-strict C for consistency of debug info */
N      #if __sizeof_ptr == 8
X      #if 4 == 8
S        typedef unsigned long size_t;   /* see <stddef.h> */
N      #else
N        typedef unsigned int size_t;   /* see <stddef.h> */
N      #endif
N      #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X      #if !0L && 0L
S        #define __size_t 1
N      #endif
N    #endif
N
N    #ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N      #if !defined(__STRICT_ANSI__) || !defined(__wchar_t)
X      #if !0L || !0L
N       /* always defined in non-strict C for consistency of debug info */
N        #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X        #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S          typedef unsigned int wchar_t; /* see <stddef.h> */
N        #else
N          typedef unsigned short wchar_t; /* see <stddef.h> */
N        #endif
N        #ifdef __STRICT_ANSI__
S          #define __wchar_t 1
N        #endif
N      #endif
N    #endif
N
N    #if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__wint_t)
X    #if 0L || !0L || !0L
N     /* always defined in C++ and non-strict C for consistency of debug info */
N      typedef int wint_t;   /* see also <wctype.h> */
N      #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X      #if !0L && 0L
S        #define __wint_t 1
N      #endif
N    #endif
N
N        /* limits of wchar_t */
N        /* NB we have to undef and redef because they're defined in both
N         * stdint.h and wchar.h */
N    #undef WCHAR_MIN
N    #undef WCHAR_MAX
N
N    #if defined(__WCHAR32)  || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X    #if 0L  || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S      #define WCHAR_MIN   0
S      #define WCHAR_MAX   0xffffffffU
N    #else
N      #define WCHAR_MIN   0
N      #define WCHAR_MAX   65535
N    #endif
N
N    #undef NULL
N    #define NULL 0                   /* see <stddef.h> */
N
N    /* ANSI forbids va_list to be defined here */
N    /* keep in step with <stdarg.h> and <stdio.h> */
N    #if !defined(__va_list) && (defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__va_list_defined))
X    #if !0L && (0L || !0L || !0L)
N    /* always defined in C++ and non-strict C for consistency of debug info */
N      #ifdef __clang__
S        typedef __builtin_va_list __va_list;
N      #else
N        typedef struct __va_list __va_list;
N      #endif
N      #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X      #if !0L && 0L
S        #define __va_list_defined 1
N      #endif
N    #endif
N
N  #ifndef __ARM_WCHAR_NO_IO
N    #undef WEOF
N    #define WEOF ((__CLIBNS wint_t)-1)
N
N    /* ANSI forbids FILE to be defined here */
N    #if !defined(__STRICT_ANSI__)
X    #if !0L
N    /* always defined in non-strict C/C++ for consistency of debug info */
N      typedef struct __FILE FILE;
N    #else
S      struct __FILE;
N    #endif
N  #endif /* __ARM_WCHAR_NO_IO */
N
N    /*
N     * If the compiler supports signalling nans as per N965 then it
N     * will define __SUPPORT_SNAN__, in which case a user may define
N     * _WANT_SNAN in order to obtain compliant versions of the
N     * fwprintf, fwscanf, and wcstod families of functions.
N     */
N    #if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X    #if 0L && 0L
S    #pragma import(__use_snan)
N    #endif
N
N
N    /*
N     * mbstate_t must be able to contain all the data from an
N     * incomplete MB character, plus shift states. CJK-specific
N     * encodings seem to tend to have at most three bytes per
N     * character, and a single-figure number of shift states, so 32
N     * bits is sufficient for any of these. UTF-8 encoding a full
N     * 32-bit value is the hardest thing to deal with, and in that
N     * situation the worst case is having to store 25 bits of
N     * character (1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx) plus
N     * a few bits saying what sort of state is being stored. This is
N     * still easy enough to fit into 32 bits, so I think a single
N     * 32-bit integer is enough in here.
N     */
N    typedef struct __mbstate_t {
N        unsigned int __state, __state2;
N    } mbstate_t;
N
N    /*
N     * `struct tm' must be declared in this header as an incomplete
N     * type.
N     */
N    struct tm;
N            
N    extern _ARMABI size_t wcsftime(wchar_t * __restrict /*s*/, size_t /*maxsize*/,
X    extern __declspec(__nothrow) size_t wcsftime(wchar_t * __restrict  , size_t  ,
N                       const wchar_t * __restrict /*format*/, const struct tm * __restrict /*timeptr*/) __attribute__((__nonnull__(1,3,4)));
N
N  #ifndef __ARM_WCHAR_NO_IO
N    /*
N     * Formatted wide-character I/O functions
N     */
N#pragma __printf_args
N    int swprintf(wchar_t * __restrict /*s*/, size_t /*n*/,
N                 const wchar_t * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N#pragma __printf_args
N    int vswprintf(wchar_t * __restrict /*s*/, size_t /*n*/,
N                  const wchar_t * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N#pragma __scanf_args
N    int swscanf(const wchar_t * __restrict /*s*/,
N                const wchar_t * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N#pragma __scanf_args
N    int vswscanf(const wchar_t * __restrict /*s*/,
N                 const wchar_t * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N
N
N#pragma __printf_args
N    int fwprintf(struct __FILE * __restrict /*stream*/,
N                 const wchar_t * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N#pragma __printf_args
N    int vfwprintf(struct __FILE * __restrict /*stream*/,
N                  const wchar_t * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N#pragma __scanf_args
N    int fwscanf(struct __FILE * __restrict /*stream*/,
N                const wchar_t * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N#pragma __scanf_args
N    int vfwscanf(struct __FILE * __restrict /*stream*/,
N                 const wchar_t * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N
N
N#pragma __printf_args
N    int wprintf(const wchar_t * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
N#pragma __printf_args
N    int vwprintf(const wchar_t * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
N#pragma __scanf_args
N    int wscanf(const wchar_t * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
N#pragma __scanf_args
N    int vwscanf(const wchar_t * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
N
N    /* 
N     * Unformatted wide-character I/O functions
N     */
N    wint_t fgetwc(struct __FILE * /*stream*/) __attribute__((__nonnull__(1)));
N    wchar_t *fgetws(wchar_t * __restrict /*s*/, int /*n*/, struct __FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N    wint_t fputwc(wchar_t /*c*/, struct __FILE * /*stream*/) __attribute__((__nonnull__(2)));
N    int fputws(const wchar_t * __restrict /*s*/, struct __FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,2)));
N    int fwide(struct __FILE * /*stream*/, int /*mode*/) __attribute__((__nonnull__(1)));
N    wint_t getwc(struct __FILE * /*stream*/) __attribute__((__nonnull__(1)));
N    wint_t getwchar(void);
N    wint_t putwc(wchar_t /*c*/, struct __FILE * /*stream*/) __attribute__((__nonnull__(2)));
N    wint_t putwchar(wchar_t /*c*/);
N    wint_t ungetwc(wint_t /*c*/, struct __FILE * /*stream*/) __attribute__((__nonnull__(2)));
N  #endif /* __ARM_WCHAR_NO_IO */
N
N    wint_t btowc(int /*c*/);
N    wint_t wctob(int /*c*/);
N    int mbsinit(const mbstate_t * /*ps*/);
N    size_t mbrlen(const char * __restrict /*s*/, size_t /*n*/,
N                  mbstate_t * __restrict /*ps*/);
N    size_t mbrtowc(wchar_t * __restrict /*pwc*/,
N                   const char * __restrict /*s*/,
N                   size_t /*n*/, mbstate_t * __restrict /*ps*/);
N    size_t wcrtomb(char * __restrict /*s*/, wchar_t /*wc*/,
N                   mbstate_t * __restrict /*ps*/);
N    size_t mbsrtowcs(wchar_t * __restrict /*dst*/,
N                     const char ** __restrict /*src*/,
N                     size_t /*len*/, mbstate_t * __restrict /*ps*/) __attribute__((__nonnull__(2)));
N    size_t wcsrtombs(char * __restrict /*dst*/,
N                     const wchar_t ** __restrict /*src*/,
N                     size_t /*len*/, mbstate_t * __restrict /*ps*/) __attribute__((__nonnull__(2)));
N    size_t _mbsnrtowcs(wchar_t * __restrict /*dst*/,
N                       const char ** __restrict /*src*/,
N                       size_t /*nmb*/,
N                       size_t /*len*/, mbstate_t * __restrict /*ps*/) __attribute__((__nonnull__(2)));
N    size_t _wcsnrtombs(char * __restrict /*dst*/,
N                       const wchar_t ** __restrict /*src*/,
N                       size_t /*nwc*/,
N                       size_t /*len*/, mbstate_t * __restrict /*ps*/) __attribute__((__nonnull__(2)));
N#if !defined(__STRICT_ANSI__)
X#if !0L
N    size_t mbsnrtowcs(wchar_t * __restrict /*dst*/,
N                      const char ** __restrict /*src*/,
N                      size_t /*nmb*/,
N                      size_t /*len*/, mbstate_t * __restrict /*ps*/) __attribute__((__nonnull__(2)));
N    size_t wcsnrtombs(char * __restrict /*dst*/,
N                      const wchar_t ** __restrict /*src*/,
N                      size_t /*nwc*/,
N                      size_t /*len*/, mbstate_t * __restrict /*ps*/) __attribute__((__nonnull__(2)));
N#endif
N
N    /*
N     * Wide-character string-to-number conversions. Parallel to strto*.
N     */
N    double wcstod(const wchar_t * /*nptr*/, wchar_t ** /*endptr*/) __attribute__((__nonnull__(1)));
N    float wcstof(const wchar_t * /*nptr*/, wchar_t ** /*endptr*/) __attribute__((__nonnull__(1)));
N    long double wcstold(const wchar_t * /*nptr*/, wchar_t ** /*endptr*/) __attribute__((__nonnull__(1)));
N    long int wcstol(const wchar_t * /*nptr*/, wchar_t **/*endptr*/,
N                    int /*base*/) __attribute__((__nonnull__(1)));
N    unsigned long int wcstoul(const wchar_t * /*nptr*/,
N                              wchar_t ** /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N    long long int wcstoll(const wchar_t * __restrict /*nptr*/,
N                          wchar_t ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N    unsigned long long int wcstoull(const wchar_t * __restrict /*nptr*/,
N                                    wchar_t ** __restrict /*endptr*/,
N                                    int /*base*/) __attribute__((__nonnull__(1)));
N#endif
N
N    /*
N     * General wide-character string utilities.
N     */
N    wchar_t *wcscpy(wchar_t * __restrict /*s1*/,
N                    const wchar_t * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
N    wchar_t *wcsncpy(wchar_t * __restrict /*s1*/,
N                     const wchar_t * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N    wchar_t *wmemcpy(wchar_t * __restrict /*s1*/,
N                     const wchar_t * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N    wchar_t *wmemmove(wchar_t * __restrict /*s1*/,
N                      const wchar_t * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N    wchar_t *wcscat(wchar_t * __restrict /*s1*/,
N                    const wchar_t * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
N    wchar_t *wcsncat(wchar_t * __restrict /*s1*/,
N                     const wchar_t * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N    int wcscmp(const wchar_t * __restrict /*s1*/,
N               const wchar_t * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
N    int wcsncmp(const wchar_t * __restrict /*s1*/,
N                const wchar_t * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N    int wcscasecmp(const wchar_t * __restrict /*s1*/,
N                   const wchar_t * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
N    int wcsncasecmp(const wchar_t * __restrict /*s1*/,
N                    const wchar_t * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N    int wcscoll(const wchar_t * __restrict /*s1*/,
N                const wchar_t * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
N    size_t wcsxfrm(wchar_t * __restrict /*s1*/,
N                   const wchar_t * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N    int wmemcmp(const wchar_t * __restrict /*s1*/,
N                const wchar_t * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N    size_t wcscspn(const wchar_t * __restrict /*s1*/,
N                   const wchar_t * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
N    size_t wcsspn(const wchar_t * __restrict /*s1*/,
N                  const wchar_t * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
N    wchar_t *wcstok(wchar_t * __restrict /*s1*/,
N                    const wchar_t * __restrict /*s2*/,
N                    wchar_t ** __restrict /*ptr*/) __attribute__((__nonnull__(2,3)));
N    size_t wcslen(const wchar_t * __restrict /*s*/) __attribute__((__nonnull__(1)));
N    wchar_t *wmemset(wchar_t * __restrict /*s*/, wchar_t /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
N
N#if defined(__cplusplus) && !defined(__ARMCOMPILER_LIBCXX)
X#if 0L && !0L
S    /*
S     * C++'s overloading allows us to provide versions of these
S     * functions which search a const string and return a const
S     * pointer into it, and separate versions which search a
S     * non-const string and return a non-const pointer.
S     */
S    const wchar_t *wcschr(const wchar_t * __restrict /*s*/, wchar_t /*c*/) __attribute__((__nonnull__(1)));
S    const wchar_t *wcspbrk(const wchar_t * __restrict /*s1*/,
S                           const wchar_t * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
S    const wchar_t *wcsrchr(const wchar_t * __restrict /*s*/, wchar_t /*c*/) __attribute__((__nonnull__(1)));
S    const wchar_t *wcsstr(const wchar_t * __restrict /*s1*/,
S                          const wchar_t * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
S    const wchar_t *wmemchr(const wchar_t * __restrict /*s*/, wchar_t /*c*/,
S                           size_t /*n*/) __attribute__((__nonnull__(1)));
S#ifndef __WCHAR_DISABLED
S    extern "C++" wchar_t *wcschr(wchar_t * __restrict __s, wchar_t __c) __attribute__((__nonnull__(1)));
S    extern "C++" inline wchar_t *wcschr(wchar_t * __restrict __s, wchar_t __c)
S      { return const_cast<wchar_t *>(wcschr(const_cast<const wchar_t *>(__s), __c)); }
S    extern "C++" wchar_t *wcspbrk(wchar_t * __restrict __s1, const wchar_t * __restrict __s2) __attribute__((__nonnull__(1,2)));
S    extern "C++" inline wchar_t *wcspbrk(wchar_t * __restrict __s1, const wchar_t * __restrict __s2)
S      { return const_cast<wchar_t *>(wcspbrk(const_cast<const wchar_t *>(__s1), __s2)); }
S    extern "C++" wchar_t *wcsrchr(wchar_t * __restrict __s, wchar_t __c) __attribute__((__nonnull__(1)));
S    extern "C++" inline wchar_t *wcsrchr(wchar_t * __restrict __s, wchar_t __c)
S      { return const_cast<wchar_t *>(wcsrchr(const_cast<const wchar_t *>(__s), __c)); }
S    extern "C++" wchar_t *wcsstr(wchar_t * __restrict __s1,
S                          const wchar_t * __restrict __s2) __attribute__((__nonnull__(1,2)));
S    extern "C++" inline wchar_t *wcsstr(wchar_t * __restrict __s1,
S                          const wchar_t * __restrict __s2)
S      { return const_cast<wchar_t *>(wcsstr(const_cast<const wchar_t *>(__s1), __s2)); }
S    extern "C++" wchar_t *wmemchr(wchar_t * __restrict __s, wchar_t __c,
S                                  size_t __n) __attribute__((__nonnull__(1)));
S    extern "C++" inline wchar_t *wmemchr(wchar_t * __restrict __s, wchar_t __c,
S                                  size_t __n)
S    { return const_cast<wchar_t *>(wmemchr(const_cast<const wchar_t *>(__s), __c, __n)); }
S#endif
N#else
N    /*
N     * C's approximation to the above is to have all of these
N     * functions search a const string and return a non-const
N     * pointer. This is the only way to prevent compile errors in
N     * all sensible uses of the functions, but unfortunately
N     * renders them unable to spot a lot of the possible error
N     * cases.
N     */
N#if defined(__cplusplus) && defined(__ARMCOMPILER_LIBCXX)
X#if 0L && 0L
S  }  /* extern "C" */
S  }  /* namespace std */
S  extern "C" {
N#endif
N    wchar_t *wcschr(const wchar_t * __restrict /*s*/, wchar_t /*c*/) __attribute__((__nonnull__(1)));
N    wchar_t *wcspbrk(const wchar_t * __restrict /*s1*/,
N                     const wchar_t * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
N    wchar_t *wcsrchr(const wchar_t * __restrict /*s*/, wchar_t /*c*/) __attribute__((__nonnull__(1)));
N    wchar_t *wcsstr(const wchar_t * __restrict /*s1*/,
N                    const wchar_t * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
N    wchar_t *wmemchr(const wchar_t * __restrict /*s*/, wchar_t /*c*/,
N                     __CLIBNS size_t /*n*/) __attribute__((__nonnull__(1)));
X                      size_t  ) __attribute__((__nonnull__(1)));
N#if defined(__cplusplus) && defined(__ARMCOMPILER_LIBCXX)
X#if 0L && 0L
S  }  /* extern "C" */
S  namespace std {
S  extern "C" {
N#endif
N#endif
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __WCHAR_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #ifdef __cplusplus
S    #ifndef __WCHAR_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::wint_t;
S      using ::std::mbstate_t;
S      using ::std::tm;
S      using ::std::wcsftime;
S    #ifndef __ARM_WCHAR_NO_IO
S      using ::std::swprintf;
S      using ::std::vswprintf;
S      using ::std::swscanf;
S      using ::std::vswscanf;
S      using ::std::fwprintf;
S      using ::std::vfwprintf;
S      using ::std::fwscanf;
S      using ::std::vfwscanf;
S      using ::std::wprintf;
S      using ::std::vwprintf;
S      using ::std::wscanf;
S      using ::std::vwscanf;
S      using ::std::fgetwc;
S      using ::std::fgetws;
S      using ::std::fputwc;
S      using ::std::fputws;
S      using ::std::fwide;
S      using ::std::getwc;
S      using ::std::getwchar;
S      using ::std::putwc;
S      using ::std::putwchar;
S      using ::std::ungetwc;
S      using ::std::btowc;
S    #endif /* __ARM_WCHAR_NO_IO */
S      using ::std::wctob;
S      using ::std::mbsinit;
S      using ::std::mbrlen;
S      using ::std::mbrtowc;
S      using ::std::wcrtomb;
S      using ::std::mbsrtowcs;
S      using ::std::wcsrtombs;
S      using ::std::_mbsnrtowcs;
S      using ::std::_wcsnrtombs;
S#if !defined(__STRICT_ANSI__)
S      using ::std::mbsnrtowcs;
S      using ::std::wcsnrtombs;
S#endif
S      using ::std::wcstod;
S      using ::std::wcstof;
S      using ::std::wcstold;
S      using ::std::wcstol;
S      using ::std::wcstoul;
S#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S      using ::std::wcstoll;
S      using ::std::wcstoull;
S#endif /* !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus) */
S      using ::std::wcscpy;
S      using ::std::wcsncpy;
S      using ::std::wmemcpy;
S      using ::std::wmemmove;
S      using ::std::wcscat;
S      using ::std::wcsncat;
S      using ::std::wcscmp;
S      using ::std::wcsncmp;
S      using ::std::wcscasecmp;
S      using ::std::wcsncasecmp;
S      using ::std::wcscoll;
S      using ::std::wcsxfrm;
S      using ::std::wmemcmp;
S#if defined(__cplusplus) && !defined(__ARMCOMPILER_LIBCXX)
S      using ::std::wcschr;
S      using ::std::wcspbrk;
S      using ::std::wcsrchr;
S      using ::std::wcsstr;
S      using ::std::wmemchr;
S#endif /* defined(__cplusplus) && !defined(__ARMCOMPILER_LIBCXX) */
S      using ::std::wcscspn;
S      using ::std::wcsspn;
S      using ::std::wcstok;
S      using ::std::wcslen;
S      using ::std::wmemset;
S#if !defined(__STRICT_ANSI__) && !defined(__ARM_WCHAR_NO_IO)
S      using ::std::FILE;
S#endif
S    #endif /* __WCHAR_NO_EXPORTS */
N  #endif /* __cplusplus */
N#endif /* ndef __wchar_h */
N
N/* end of wchar.h */
N
L 6 "..\..\..\module\customize\ButtonModule\..\..\Common\x_cross_platform.h" 2
N
N#define X_Void      void
Ntypedef int8_t      X_Int8;
Ntypedef uint8_t     X_UInt8;
Ntypedef int16_t     X_Int16;
Ntypedef uint16_t    X_UInt16;
Ntypedef int32_t     X_Int32;
Ntypedef uint32_t    X_UInt32;
Ntypedef int64_t     X_Int64;
Ntypedef uint64_t    X_UInt64;
Ntypedef float       X_Float32;
Ntypedef double      X_Float64;
Ntypedef char        X_Char;
Ntypedef wchar_t     X_WChar;
N
Ntypedef unsigned int    X_UInt;
Ntypedef int             X_Int;
Ntypedef X_Int64         X_IntLongest;
Ntypedef X_UInt64        X_UIntLongest;
N
N#define X_Null              ((X_Void*)0)
N
Ntypedef int                 X_Boolean;
N#define X_True              (0 == 0)
N#define X_False             (0 != 0)
N
N#define MapperAssertion     ((sizeof(X_Int8) == 1) && (sizeof(X_UInt8) == 1) && (sizeof(X_Int16) == 2) && (sizeof(X_UInt16) == 2) && (sizeof(X_Int32) == 4) && (sizeof(X_UInt32) == 4) && (sizeof(X_Float32) == 4) && (sizeof(X_Float64) == 8))
N
N#ifndef __FUNCTION__
N    #define __FUNCTION__  "not support "
N#endif
N
N#ifndef __func__  
N    #define __func__    "not support "
N#endif
N
N/*
N这两个宏都可以用于获取当前函数名称，但它们在使用方式和适用范围上有所不同。 
N 
N __FUNCTION__  宏会在编译时被替换为当前函数的名称字符串，可以在任何函数中使用，包括全局作用域。但是它不是标准宏，不被所有编译器都支持。 
N 
N __func__  宏是C99标准的一部分，支持更广泛，并且也会在编译时被替换为当前函数的名称字符串。它只能在函数内使用，因此对于全局作用域或类作用域中的函数， __FUNCTION__  可能是更好的选择。 
N 
N因此，如果你的编译器支持  __FUNCTION__ ，并且你不需要跨编译器移植代码，则  __FUNCTION__  可以是更通用的选择。如果需要与不同类型的编译器和标准兼容，则应使用  __func__ 。
N*/
N
N#endif
L 5 "..\..\..\module\customize\ButtonModule\ButtonModule.h" 2
N#include "..\..\Common\CommonMarco.h"
L 1 "..\..\..\module\customize\ButtonModule\..\..\Common\CommonMarco.h" 1
N#ifndef __COMMONMARCO_H
N#define __COMMONMARCO_H
N
N#define CONCAT_2(p1, p2)      CONCAT_2_(p1, p2)
N/** Auxiliary macro used by @ref CONCAT_2 */
N#define CONCAT_2_(p1, p2)     p1##p2
N
N#define CONCAT_3_(__A, __B, __C)    __A##__B##__C
N#define CONCAT_3(__A, __B, __C)      CONCAT_3_(__A, __B, __C)
N
N#define UNUSED_VARIABLE(X)  ((void)(X))
N#define UNUSED_PARAMETER(X) UNUSED_VARIABLE(X)
N#define UNUSED_RETURN_VALUE(X) UNUSED_VARIABLE(X)
N#endif
L 6 "..\..\..\module\customize\ButtonModule\ButtonModule.h" 2
N/*
N****************************************************************************
Ncaution:
Nnow button module support just one instance !!!
N****************************************************************************
N*/
N#define  MAX_BUTTON_NUMBER   8
N#define  CombineButtonValue  uint8_t
Ntypedef uint32_t        			 ButtonActionFlagMask;
N#define ButtonMask					 ((ButtonActionFlagMask)(1u << 0))
N
N#include "ButtonStateMonitor.h"
L 1 "..\..\..\module\customize\ButtonModule\ButtonStateMonitor.h" 1
N#ifndef __BUTTONSTATEMONITOR_H
N#define __BUTTONSTATEMONITOR_H
N
N#include "..\..\Common\x_cross_platform.h"
N#include "..\..\Common\StateMachine\StateMachine.h"
L 1 "..\..\..\module\customize\ButtonModule\..\..\Common\StateMachine\StateMachine.h" 1
N#ifndef __STATEMACHINE_H
N#define __STATEMACHINE_H
N
N#ifdef __cplusplus
S	extern "C" {
N#endif
N
N#include "../x_cross_platform.h"
N#include "../AppError.h"
L 1 "..\..\..\module\customize\ButtonModule\..\..\Common\StateMachine\../AppError.h" 1
N#ifndef __APPERROR_H
N#define __APPERROR_H
N
N#include "x_cross_platform.h"
N
Ntypedef uint8_t						m_app_result;
N
N#define APP_SUCCESSED       		0
N#define APP_ERROR           		1
N#define APP_BEYOND_SCOPE    		2
N#define APP_POINTER_NULL    		3
N#define APP_ALREADY_DONE_BEFORE 	4
N#define APP_PARAM_ERROR				5
N#define APP_NO_ENOUGH_SPACE			6
N#define APP_UNEXPECT_STATE			7
N
N#endif
L 10 "..\..\..\module\customize\ButtonModule\..\..\Common\StateMachine\StateMachine.h" 2
N#include "../CommonMarco.h"
N
N#define INVALID_STATE_NUMBER		(0xFF)
N#define MAX_STATE_NUMBER    		(0xFE)
N#define DEFAULT_STATE_NUMBER        0
N
N
N
Ntypedef uint8_t 			StateNumber;
N
N/************************************* state machine*****************************************************************/
Ntypedef  struct
N{
N	StateNumber current_state;
N}s_StateMachineParam;
N
Ntypedef  struct {
N	StateNumber (*Action)(s_StateMachineParam *p_this);
N}StateAction;
Ntypedef struct
N{
N	const StateNumber 	AllStateNum;
N	StateAction const 	*p_Action;
N    StateNumber         *p_CurrentStateNum;
N	StateNumber         *p_SuddenChangeState;
N}s_StateMachine;
N
N#define APP_STATE_MACHINE_DEF_WITHOUT_POINTER(id,state_number,p_action)                \
Nstatic StateNumber CONCAT_2(id, _current_state_number) = DEFAULT_STATE_NUMBER;						\
Nstatic StateNumber CONCAT_2(id, _sudden_change_state_number) = INVALID_STATE_NUMBER;						\
Nstatic const s_StateMachine CONCAT_2(id, _entry) = {state_number,p_action,&CONCAT_2(id, _current_state_number),&CONCAT_2(id, _sudden_change_state_number)}
X#define APP_STATE_MACHINE_DEF_WITHOUT_POINTER(id,state_number,p_action)                static StateNumber CONCAT_2(id, _current_state_number) = DEFAULT_STATE_NUMBER;						static StateNumber CONCAT_2(id, _sudden_change_state_number) = INVALID_STATE_NUMBER;						static const s_StateMachine CONCAT_2(id, _entry) = {state_number,p_action,&CONCAT_2(id, _current_state_number),&CONCAT_2(id, _sudden_change_state_number)}
N
N
N#define APP_STATE_MACHINE_DEF(id,state_number,p_action)                \
Nstatic StateNumber CONCAT_2(id, _current_state_number) = DEFAULT_STATE_NUMBER;						\
Nstatic StateNumber CONCAT_2(id, _sudden_change_state_number) = INVALID_STATE_NUMBER;						\
Nstatic const s_StateMachine CONCAT_2(id, _entry) = {state_number,p_action,&CONCAT_2(id, _current_state_number),&CONCAT_2(id, _sudden_change_state_number)}; \
Nstatic const s_StateMachine* id = &CONCAT_2(id, _entry)
X#define APP_STATE_MACHINE_DEF(id,state_number,p_action)                static StateNumber CONCAT_2(id, _current_state_number) = DEFAULT_STATE_NUMBER;						static StateNumber CONCAT_2(id, _sudden_change_state_number) = INVALID_STATE_NUMBER;						static const s_StateMachine CONCAT_2(id, _entry) = {state_number,p_action,&CONCAT_2(id, _current_state_number),&CONCAT_2(id, _sudden_change_state_number)}; static const s_StateMachine* id = &CONCAT_2(id, _entry)
N
Nm_app_result mStateMachineRun( const s_StateMachine *p_ssp
N						,s_StateMachineParam *p_smp
N						,X_Void(*StateRecorder)(StateNumber state_going_to_leave,StateNumber state_going_to_enter));
X						,void(*StateRecorder)(StateNumber state_going_to_leave,StateNumber state_going_to_enter));
N
Nm_app_result mStateMachineStateSet(const s_StateMachine *p_ss,StateNumber state);
NStateNumber mStateMachineGetSuddenChangeState(const s_StateMachine *p_ss);
N
N#ifdef __cplusplus
S		}
N#endif
N
N#endif
N
N
N/*
N******************************************************
Nexample code
N******************************************************
Ntypedef struct
N{
N	s_StateMachineParam 		base;
N	StateNumber 						StateBackupWhenSuccessed;
N	StateNumber 						StateBackupWhenFailed;
N	uint16_t 								wait_counter;
N}sParamExtern;
N
Nstatic sParamExtern sPE;
N
Ntypedef enum
N{
N	RWC_Idle = 0,
N}RWC_state;
N
N**********************************************************************************************************************************
N			0
N*********************************************************************************************************************************
Nstatic StateNumber RWC_IdleAction(s_StateMachineParam *p_this)
N{
N	return p_this->current_state;
N}
N
Nstatic const StateAction SimpleStateAction[] = {
N		{RWC_IdleAction},
N};
N
NAPP_STATE_MACHINE_DEF(p_simple_state
N														,sizeof(SimpleStateAction)/sizeof(SimpleStateAction[0])
N														,&SimpleStateAction[0]);
N
Nstatic X_Void StateJumpRecorder(StateNumber state_going_to_leave,StateNumber state_going_to_enter)
N{
N
N}
N
NX_Void NoName(X_Void)
N{
N	SimpleStateMachineRun(p_simple_state,&sPE.base,StateJumpRecorder);
N}
N */
N
N
L 6 "..\..\..\module\customize\ButtonModule\ButtonStateMonitor.h" 2
N#include "ButtonModule.h"
L 1 "..\..\..\module\customize\ButtonModule\ButtonModule.h" 1
N#ifndef __BUTTONMODULE_H
S#define __BUTTONMODULE_H
S
S#include "..\..\Common\x_cross_platform.h"
S#include "..\..\Common\CommonMarco.h"
S/*
S****************************************************************************
Scaution:
Snow button module support just one instance !!!
S****************************************************************************
S*/
S#define  MAX_BUTTON_NUMBER   8
S#define  CombineButtonValue  uint8_t
Stypedef uint32_t        			 ButtonActionFlagMask;
S#define ButtonMask					 ((ButtonActionFlagMask)(1u << 0))
S
S#include "ButtonStateMonitor.h"
S
Stypedef struct
S{
S	uint16_t ClickTimeThresholdInMS;
S	uint16_t ReleaseTimeThresholdInMS;
S	uint16_t LongPushTimeThresholdInMS;
S	uint16_t ReleaseAllTimeThresholdInMS;
S	CombineButtonValue EachButtonMode;
S}sParamAboutTime;
S
Stypedef struct
S{
S	uint16_t push_time_counter;
S	uint16_t release_time_counter;
S	uint16_t latest_push_time_counter_backup;
S	sParamAboutTime const *  p_spat;
S}sParamSingleButton;
S
Stypedef struct
S{
S	uint8_t button_number;
S	uint8_t ModuleLoopTimeInMS;
S	X_Void (*init)(X_Void);
S	CombineButtonValue (*get_value)(X_Void);
S	X_Void (*config)(sParamSingleButton * p_spsb);
S	X_Void (*click)(const CombineButtonValue value);
S	X_Void (*double_click)(const CombineButtonValue value);
S	X_Void (*long_push)(const CombineButtonValue value);
S	X_Void (*long_push_release)(const CombineButtonValue value,uint16_t const*longpushtickcycle);
S	X_Void (*StateRecorder)(StateNumber current_state,StateNumber next_state);
S
S}sButtonModule;
S
Stypedef struct
S{
S	const sButtonModule  	*base;
S	const uint8_t          	button_number;
S	const s_StateMachine  *p_monitor[MAX_BUTTON_NUMBER];
S}sButtonModuleExtern;
S
S
S
S#define CUSTOM_BUTTON_MODULE_DEF(	p_button_module						\
S									,button_number                      \
S									,loop_time_in_ms					\
S									,function_init						\
S									,function_get_value					\
S									,function_config					\
S									,function_click_cb					\
S									,function_double_click_cb			\
S									,fucntion_long_push_cb				\
S									,function_long_push_release_cb		\
S									,function_state_recorder)				\
Sstatic const sButtonModule CONCAT_2(p_button_module, _entry) = {		\
S		button_number,													\
S		loop_time_in_ms,												\
S		function_init,													\
S		function_get_value,												\
S		function_config,												\
S		function_click_cb,												\
S		function_double_click_cb,										\
S		fucntion_long_push_cb,											\
S		function_long_push_release_cb,									\
S		function_state_recorder,										\
S};
X#define CUSTOM_BUTTON_MODULE_DEF(	p_button_module															,button_number                      									,loop_time_in_ms														,function_init															,function_get_value														,function_config														,function_click_cb														,function_double_click_cb												,fucntion_long_push_cb													,function_long_push_release_cb											,function_state_recorder)				static const sButtonModule CONCAT_2(p_button_module, _entry) = {				button_number,															loop_time_in_ms,														function_init,															function_get_value,														function_config,														function_click_cb,														function_double_click_cb,												fucntion_long_push_cb,													function_long_push_release_cb,											function_state_recorder,										};
S
S
SX_Void ButtonStateMonitor(const sButtonModuleExtern *p_sbm,CombineButtonValue *value);
SX_Void SetCurrentButtonConfigMode(CombineButtonValue mode);
S
N#endif
L 7 "..\..\..\module\customize\ButtonModule\ButtonStateMonitor.h" 2
N
NStateNumber CustomizedBM_InitAction(s_StateMachineParam *p_this);
NStateNumber CustomizedBM_StartAction(s_StateMachineParam *p_this);
NStateNumber CustomizedBM_ClickDetectAction(s_StateMachineParam *p_this);
NStateNumber CustomizedBM_LongPushDetectAction(s_StateMachineParam *p_this);
NStateNumber CustomizedBM_SureLongPushAction(s_StateMachineParam *p_this);
NStateNumber CustomizedBM_LongPushReleaseDetectAction(s_StateMachineParam *p_this);
NStateNumber CustomizedBM_SureLongPushReleaseAction(s_StateMachineParam *p_this);
NStateNumber CustomizedBM_ClickReleaseDetectAction(s_StateMachineParam *p_this);
NStateNumber CustomizedBM_DoubleClickDetectAction(s_StateMachineParam *p_this);
NStateNumber CustomizedBM_SureClickAction(s_StateMachineParam *p_this);
NStateNumber CustomizedBM_SureDoubleClickAction(s_StateMachineParam *p_this);
N
N/*************************************************1**************************************************/
N#define CUSTOM_BUTTON_MONITOR_1_DEF(p_button_module						\
N									,loop_time_in_ms					\
N									,function_init						\
N									,function_get_value					\
N									,function_config					\
N									,function_click_cb					\
N									,function_double_click_cb			\
N									,fucntion_long_push_cb				\
N									,function_long_push_release_cb		\
N									,function_state_recorder				\
N)																		\
N		CUSTOM_BUTTON_MODULE_DEF(p_button_module						\
N								,1										\
N								,loop_time_in_ms						\
N								,function_init							\
N								,function_get_value						\
N								,function_config						\
N								,function_click_cb						\
N								,function_double_click_cb				\
N								,fucntion_long_push_cb					\
N								,function_long_push_release_cb			\
N								,function_state_recorder					\
N);																		\
Nstatic const StateAction CONCAT_2(p_button_module, _ButtonStateAction)[] = {	\
N		{CustomizedBM_InitAction},												\
N		{CustomizedBM_StartAction},												\
N		{CustomizedBM_ClickDetectAction},										\
N		{CustomizedBM_LongPushDetectAction},									\
N		{CustomizedBM_SureLongPushAction},										\
N		{CustomizedBM_LongPushReleaseDetectAction},								\
N		{CustomizedBM_SureLongPushReleaseAction},								\
N		{CustomizedBM_ClickReleaseDetectAction},								\
N		{CustomizedBM_DoubleClickDetectAction},									\
N		{CustomizedBM_SureClickAction},											\
N		{CustomizedBM_SureDoubleClickAction},									\
N};																				\
N																				\
N/***********0************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_0																			\
N									,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   	\
N									,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																\
N/***********end************/														\
Nstatic const sButtonModuleExtern CONCAT_2(p_button_module, _with_monitor) = {		\
N		&CONCAT_2(p_button_module, _entry),											\
N		1,																			\
N		{																			\
N		&CONCAT_2(p_button_module_motion_action_0, _entry),							\
N		},																			\
N};																					\
N																					\
Nstatic const sButtonModuleExtern * p_button_module = &CONCAT_2(p_button_module, _with_monitor)
X#define CUSTOM_BUTTON_MONITOR_1_DEF(p_button_module															,loop_time_in_ms														,function_init															,function_get_value														,function_config														,function_click_cb														,function_double_click_cb												,fucntion_long_push_cb													,function_long_push_release_cb											,function_state_recorder				)																				CUSTOM_BUTTON_MODULE_DEF(p_button_module														,1																		,loop_time_in_ms														,function_init															,function_get_value														,function_config														,function_click_cb														,function_double_click_cb												,fucntion_long_push_cb													,function_long_push_release_cb											,function_state_recorder					);																		static const StateAction CONCAT_2(p_button_module, _ButtonStateAction)[] = {			{CustomizedBM_InitAction},														{CustomizedBM_StartAction},														{CustomizedBM_ClickDetectAction},												{CustomizedBM_LongPushDetectAction},											{CustomizedBM_SureLongPushAction},												{CustomizedBM_LongPushReleaseDetectAction},										{CustomizedBM_SureLongPushReleaseAction},										{CustomizedBM_ClickReleaseDetectAction},										{CustomizedBM_DoubleClickDetectAction},											{CustomizedBM_SureClickAction},													{CustomizedBM_SureDoubleClickAction},									};																																								 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_0																												,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																 														static const sButtonModuleExtern CONCAT_2(p_button_module, _with_monitor) = {				&CONCAT_2(p_button_module, _entry),													1,																					{																					&CONCAT_2(p_button_module_motion_action_0, _entry),									},																			};																																										static const sButtonModuleExtern * p_button_module = &CONCAT_2(p_button_module, _with_monitor)
N
N/*************************************************2**************************************************/
N#define CUSTOM_BUTTON_MONITOR_2_DEF(p_button_module						\
N									,loop_time_in_ms					\
N									,function_init						\
N									,function_get_value					\
N									,function_config					\
N									,function_click_cb					\
N									,function_double_click_cb			\
N									,fucntion_long_push_cb				\
N									,function_long_push_release_cb		\
N									,function_state_recorder				\
N)																		\
N		CUSTOM_BUTTON_MODULE_DEF(p_button_module						\
N								,2										\
N								,loop_time_in_ms						\
N								,function_init							\
N								,function_get_value						\
N								,function_config						\
N								,function_click_cb						\
N								,function_double_click_cb				\
N								,fucntion_long_push_cb					\
N								,function_long_push_release_cb			\
N								,function_state_recorder					\
N);																		\
Nstatic const StateAction CONCAT_2(p_button_module, _ButtonStateAction)[] = {	\
N		{CustomizedBM_InitAction},												\
N		{CustomizedBM_StartAction},												\
N		{CustomizedBM_ClickDetectAction},										\
N		{CustomizedBM_LongPushDetectAction},									\
N		{CustomizedBM_SureLongPushAction},										\
N		{CustomizedBM_LongPushReleaseDetectAction},								\
N		{CustomizedBM_SureLongPushReleaseAction},								\
N		{CustomizedBM_ClickReleaseDetectAction},								\
N		{CustomizedBM_DoubleClickDetectAction},									\
N		{CustomizedBM_SureClickAction},											\
N		{CustomizedBM_SureDoubleClickAction},									\
N};																				\
N																				\
N/***********0************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_0																			\
N									,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   	\
N									,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																\
N/***********1************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_1																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********end************/														\
Nstatic const sButtonModuleExtern CONCAT_2(p_button_module, _with_monitor) = {		\
N		&CONCAT_2(p_button_module, _entry),											\
N		2,																			\
N		{																			\
N		&CONCAT_2(p_button_module_motion_action_0, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_1, _entry),							\
N		},																			\
N};																					\
N																					\
Nstatic const sButtonModuleExtern * p_button_module = &CONCAT_2(p_button_module, _with_monitor)
X#define CUSTOM_BUTTON_MONITOR_2_DEF(p_button_module															,loop_time_in_ms														,function_init															,function_get_value														,function_config														,function_click_cb														,function_double_click_cb												,fucntion_long_push_cb													,function_long_push_release_cb											,function_state_recorder				)																				CUSTOM_BUTTON_MODULE_DEF(p_button_module														,2																		,loop_time_in_ms														,function_init															,function_get_value														,function_config														,function_click_cb														,function_double_click_cb												,fucntion_long_push_cb													,function_long_push_release_cb											,function_state_recorder					);																		static const StateAction CONCAT_2(p_button_module, _ButtonStateAction)[] = {			{CustomizedBM_InitAction},														{CustomizedBM_StartAction},														{CustomizedBM_ClickDetectAction},												{CustomizedBM_LongPushDetectAction},											{CustomizedBM_SureLongPushAction},												{CustomizedBM_LongPushReleaseDetectAction},										{CustomizedBM_SureLongPushReleaseAction},										{CustomizedBM_ClickReleaseDetectAction},										{CustomizedBM_DoubleClickDetectAction},											{CustomizedBM_SureClickAction},													{CustomizedBM_SureDoubleClickAction},									};																																								 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_0																												,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_1																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 														static const sButtonModuleExtern CONCAT_2(p_button_module, _with_monitor) = {				&CONCAT_2(p_button_module, _entry),													2,																					{																					&CONCAT_2(p_button_module_motion_action_0, _entry),									&CONCAT_2(p_button_module_motion_action_1, _entry),									},																			};																																										static const sButtonModuleExtern * p_button_module = &CONCAT_2(p_button_module, _with_monitor)
N
N/*************************************************3**************************************************/
N#define CUSTOM_BUTTON_MONITOR_3_DEF(p_button_module						\
N									,loop_time_in_ms						\
N									,function_init						\
N									,function_get_value					\
N									,function_config					\
N									,function_click_cb					\
N									,function_double_click_cb			\
N									,fucntion_long_push_cb				\
N									,function_long_push_release_cb		\
N									,function_state_recorder					\
N)																		\
N		CUSTOM_BUTTON_MODULE_DEF(p_button_module						\
N								,3										\
N								,loop_time_in_ms						\
N								,function_init							\
N								,function_get_value						\
N								,function_config						\
N								,function_click_cb						\
N								,function_double_click_cb				\
N								,fucntion_long_push_cb					\
N								,function_long_push_release_cb			\
N								,function_state_recorder					\
N);																		\
Nstatic const StateAction CONCAT_2(p_button_module, _ButtonStateAction)[] = {	\
N		{CustomizedBM_InitAction},												\
N		{CustomizedBM_StartAction},												\
N		{CustomizedBM_ClickDetectAction},										\
N		{CustomizedBM_LongPushDetectAction},									\
N		{CustomizedBM_SureLongPushAction},										\
N		{CustomizedBM_LongPushReleaseDetectAction},								\
N		{CustomizedBM_SureLongPushReleaseAction},								\
N		{CustomizedBM_ClickReleaseDetectAction},								\
N		{CustomizedBM_DoubleClickDetectAction},									\
N		{CustomizedBM_SureClickAction},											\
N		{CustomizedBM_SureDoubleClickAction},									\
N};																				\
N																				\
N/***********0************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_0																			\
N									,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   	\
N									,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																\
N/***********1************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_1																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********2************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_2																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********end************/														\
Nstatic const sButtonModuleExtern CONCAT_2(p_button_module, _with_monitor) = {		\
N		&CONCAT_2(p_button_module, _entry),											\
N		3,																			\
N		{																			\
N		&CONCAT_2(p_button_module_motion_action_0, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_1, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_2, _entry),							\
N		},																			\
N};																					\
N																					\
Nstatic const sButtonModuleExtern * p_button_module = &CONCAT_2(p_button_module, _with_monitor)
X#define CUSTOM_BUTTON_MONITOR_3_DEF(p_button_module															,loop_time_in_ms															,function_init															,function_get_value														,function_config														,function_click_cb														,function_double_click_cb												,fucntion_long_push_cb													,function_long_push_release_cb											,function_state_recorder					)																				CUSTOM_BUTTON_MODULE_DEF(p_button_module														,3																		,loop_time_in_ms														,function_init															,function_get_value														,function_config														,function_click_cb														,function_double_click_cb												,fucntion_long_push_cb													,function_long_push_release_cb											,function_state_recorder					);																		static const StateAction CONCAT_2(p_button_module, _ButtonStateAction)[] = {			{CustomizedBM_InitAction},														{CustomizedBM_StartAction},														{CustomizedBM_ClickDetectAction},												{CustomizedBM_LongPushDetectAction},											{CustomizedBM_SureLongPushAction},												{CustomizedBM_LongPushReleaseDetectAction},										{CustomizedBM_SureLongPushReleaseAction},										{CustomizedBM_ClickReleaseDetectAction},										{CustomizedBM_DoubleClickDetectAction},											{CustomizedBM_SureClickAction},													{CustomizedBM_SureDoubleClickAction},									};																																								 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_0																												,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_1																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_2																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 														static const sButtonModuleExtern CONCAT_2(p_button_module, _with_monitor) = {				&CONCAT_2(p_button_module, _entry),													3,																					{																					&CONCAT_2(p_button_module_motion_action_0, _entry),									&CONCAT_2(p_button_module_motion_action_1, _entry),									&CONCAT_2(p_button_module_motion_action_2, _entry),									},																			};																																										static const sButtonModuleExtern * p_button_module = &CONCAT_2(p_button_module, _with_monitor)
N
N/*************************************************4**************************************************/
N#define CUSTOM_BUTTON_MONITOR_4_DEF(p_button_module						\
N									,loop_time_in_ms						\
N									,function_init						\
N									,function_get_value					\
N									,function_config					\
N									,function_click_cb					\
N									,function_double_click_cb			\
N									,fucntion_long_push_cb				\
N									,function_long_push_release_cb		\
N									,function_state_recorder					\
N)																		\
N		CUSTOM_BUTTON_MODULE_DEF(p_button_module						\
N								,4										\
N								,loop_time_in_ms						\
N								,function_init							\
N								,function_get_value						\
N								,function_config						\
N								,function_click_cb						\
N								,function_double_click_cb				\
N								,fucntion_long_push_cb					\
N								,function_long_push_release_cb			\
N								,function_state_recorder					\
N);																		\
Nstatic const StateAction CONCAT_2(p_button_module, _ButtonStateAction)[] = {	\
N		{CustomizedBM_InitAction},												\
N		{CustomizedBM_StartAction},												\
N		{CustomizedBM_ClickDetectAction},										\
N		{CustomizedBM_LongPushDetectAction},									\
N		{CustomizedBM_SureLongPushAction},										\
N		{CustomizedBM_LongPushReleaseDetectAction},								\
N		{CustomizedBM_SureLongPushReleaseAction},								\
N		{CustomizedBM_ClickReleaseDetectAction},								\
N		{CustomizedBM_DoubleClickDetectAction},									\
N		{CustomizedBM_SureClickAction},											\
N		{CustomizedBM_SureDoubleClickAction},									\
N};																				\
N																				\
N/***********0************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_0																			\
N									,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   	\
N									,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																\
N/***********1************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_1																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********2************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_2																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********3************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_3																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																\
N/***********end************/														\
Nstatic const sButtonModuleExtern CONCAT_2(p_button_module, _with_monitor) = {		\
N		&CONCAT_2(p_button_module, _entry),											\
N		4,																			\
N		{																			\
N		&CONCAT_2(p_button_module_motion_action_0, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_1, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_2, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_3, _entry),							\
N		},																			\
N};																					\
N																					\
Nstatic const sButtonModuleExtern * p_button_module = &CONCAT_2(p_button_module, _with_monitor)
X#define CUSTOM_BUTTON_MONITOR_4_DEF(p_button_module															,loop_time_in_ms															,function_init															,function_get_value														,function_config														,function_click_cb														,function_double_click_cb												,fucntion_long_push_cb													,function_long_push_release_cb											,function_state_recorder					)																				CUSTOM_BUTTON_MODULE_DEF(p_button_module														,4																		,loop_time_in_ms														,function_init															,function_get_value														,function_config														,function_click_cb														,function_double_click_cb												,fucntion_long_push_cb													,function_long_push_release_cb											,function_state_recorder					);																		static const StateAction CONCAT_2(p_button_module, _ButtonStateAction)[] = {			{CustomizedBM_InitAction},														{CustomizedBM_StartAction},														{CustomizedBM_ClickDetectAction},												{CustomizedBM_LongPushDetectAction},											{CustomizedBM_SureLongPushAction},												{CustomizedBM_LongPushReleaseDetectAction},										{CustomizedBM_SureLongPushReleaseAction},										{CustomizedBM_ClickReleaseDetectAction},										{CustomizedBM_DoubleClickDetectAction},											{CustomizedBM_SureClickAction},													{CustomizedBM_SureDoubleClickAction},									};																																								 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_0																												,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_1																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_2																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_3																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																 														static const sButtonModuleExtern CONCAT_2(p_button_module, _with_monitor) = {				&CONCAT_2(p_button_module, _entry),													4,																					{																					&CONCAT_2(p_button_module_motion_action_0, _entry),									&CONCAT_2(p_button_module_motion_action_1, _entry),									&CONCAT_2(p_button_module_motion_action_2, _entry),									&CONCAT_2(p_button_module_motion_action_3, _entry),									},																			};																																										static const sButtonModuleExtern * p_button_module = &CONCAT_2(p_button_module, _with_monitor)
N
N/*************************************************5**************************************************/
N#define CUSTOM_BUTTON_MONITOR_5_DEF(p_button_module						\
N									,loop_time_in_ms						\
N									,function_init						\
N									,function_get_value					\
N									,function_config					\
N									,function_click_cb					\
N									,function_double_click_cb			\
N									,fucntion_long_push_cb				\
N									,function_long_push_release_cb		\
N									,function_state_recorder				\
N)																		\
N		CUSTOM_BUTTON_MODULE_DEF(p_button_module						\
N								,5										\
N								,loop_time_in_ms						\
N								,function_init							\
N								,function_get_value						\
N								,function_config						\
N								,function_click_cb						\
N								,function_double_click_cb				\
N								,fucntion_long_push_cb					\
N								,function_long_push_release_cb			\
N								,function_state_recorder				\
N);																		\
Nstatic const StateAction CONCAT_2(p_button_module, _ButtonStateAction)[] = {	\
N		{CustomizedBM_InitAction},												\
N		{CustomizedBM_StartAction},												\
N		{CustomizedBM_ClickDetectAction},										\
N		{CustomizedBM_LongPushDetectAction},									\
N		{CustomizedBM_SureLongPushAction},										\
N		{CustomizedBM_LongPushReleaseDetectAction},								\
N		{CustomizedBM_SureLongPushReleaseAction},								\
N		{CustomizedBM_ClickReleaseDetectAction},								\
N		{CustomizedBM_DoubleClickDetectAction},									\
N		{CustomizedBM_SureClickAction},											\
N		{CustomizedBM_SureDoubleClickAction},									\
N};																				\
N																				\
N/***********0************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_0																			\
N									,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   	\
N									,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																\
N/***********1************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_1																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********2************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_2																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********3************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_3																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********4************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_4																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********end************/														\
Nstatic const sButtonModuleExtern CONCAT_2(p_button_module, _with_monitor) = {		\
N		&CONCAT_2(p_button_module, _entry),											\
N		5,																			\
N		{																			\
N		&CONCAT_2(p_button_module_motion_action_0, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_1, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_2, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_3, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_4, _entry),							\
N		},																			\
N};																					\
N																					\
Nstatic const sButtonModuleExtern * p_button_module = &CONCAT_2(p_button_module, _with_monitor)
X#define CUSTOM_BUTTON_MONITOR_5_DEF(p_button_module															,loop_time_in_ms															,function_init															,function_get_value														,function_config														,function_click_cb														,function_double_click_cb												,fucntion_long_push_cb													,function_long_push_release_cb											,function_state_recorder				)																				CUSTOM_BUTTON_MODULE_DEF(p_button_module														,5																		,loop_time_in_ms														,function_init															,function_get_value														,function_config														,function_click_cb														,function_double_click_cb												,fucntion_long_push_cb													,function_long_push_release_cb											,function_state_recorder				);																		static const StateAction CONCAT_2(p_button_module, _ButtonStateAction)[] = {			{CustomizedBM_InitAction},														{CustomizedBM_StartAction},														{CustomizedBM_ClickDetectAction},												{CustomizedBM_LongPushDetectAction},											{CustomizedBM_SureLongPushAction},												{CustomizedBM_LongPushReleaseDetectAction},										{CustomizedBM_SureLongPushReleaseAction},										{CustomizedBM_ClickReleaseDetectAction},										{CustomizedBM_DoubleClickDetectAction},											{CustomizedBM_SureClickAction},													{CustomizedBM_SureDoubleClickAction},									};																																								 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_0																												,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_1																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_2																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_3																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_4																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 														static const sButtonModuleExtern CONCAT_2(p_button_module, _with_monitor) = {				&CONCAT_2(p_button_module, _entry),													5,																					{																					&CONCAT_2(p_button_module_motion_action_0, _entry),									&CONCAT_2(p_button_module_motion_action_1, _entry),									&CONCAT_2(p_button_module_motion_action_2, _entry),									&CONCAT_2(p_button_module_motion_action_3, _entry),									&CONCAT_2(p_button_module_motion_action_4, _entry),									},																			};																																										static const sButtonModuleExtern * p_button_module = &CONCAT_2(p_button_module, _with_monitor)
N
N/*************************************************6**************************************************/
N#define CUSTOM_BUTTON_MONITOR_6_DEF(p_button_module						\
N									,loop_time_in_ms						\
N									,function_init						\
N									,function_get_value					\
N									,function_config					\
N									,function_click_cb					\
N									,function_double_click_cb			\
N									,fucntion_long_push_cb				\
N									,function_long_push_release_cb		\
N									,function_state_recorder				\
N)																		\
N		CUSTOM_BUTTON_MODULE_DEF(p_button_module						\
N								,6										\
N								,loop_time_in_ms						\
N								,function_init							\
N								,function_get_value						\
N								,function_config						\
N								,function_click_cb						\
N								,function_double_click_cb				\
N								,fucntion_long_push_cb					\
N								,function_long_push_release_cb			\
N								,function_state_recorder				\
N);																		\
Nstatic const StateAction CONCAT_2(p_button_module, _ButtonStateAction)[] = {	\
N		{CustomizedBM_InitAction},												\
N		{CustomizedBM_StartAction},												\
N		{CustomizedBM_ClickDetectAction},										\
N		{CustomizedBM_LongPushDetectAction},									\
N		{CustomizedBM_SureLongPushAction},										\
N		{CustomizedBM_LongPushReleaseDetectAction},								\
N		{CustomizedBM_SureLongPushReleaseAction},								\
N		{CustomizedBM_ClickReleaseDetectAction},								\
N		{CustomizedBM_DoubleClickDetectAction},									\
N		{CustomizedBM_SureClickAction},											\
N		{CustomizedBM_SureDoubleClickAction},									\
N};																				\
N																				\
N/***********0************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_0																			\
N									,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   	\
N									,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																\
N/***********1************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_1																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********2************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_2																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********3************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_3																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********4************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_4																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********5************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_5																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********end************/														\
Nstatic const sButtonModuleExtern CONCAT_2(p_button_module, _with_monitor) = {		\
N		&CONCAT_2(p_button_module, _entry),											\
N		6,																			\
N		{																			\
N		&CONCAT_2(p_button_module_motion_action_0, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_1, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_2, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_3, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_4, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_5, _entry),							\
N		},																			\
N};																					\
N																					\
Nstatic const sButtonModuleExtern * p_button_module = &CONCAT_2(p_button_module, _with_monitor)
X#define CUSTOM_BUTTON_MONITOR_6_DEF(p_button_module															,loop_time_in_ms															,function_init															,function_get_value														,function_config														,function_click_cb														,function_double_click_cb												,fucntion_long_push_cb													,function_long_push_release_cb											,function_state_recorder				)																				CUSTOM_BUTTON_MODULE_DEF(p_button_module														,6																		,loop_time_in_ms														,function_init															,function_get_value														,function_config														,function_click_cb														,function_double_click_cb												,fucntion_long_push_cb													,function_long_push_release_cb											,function_state_recorder				);																		static const StateAction CONCAT_2(p_button_module, _ButtonStateAction)[] = {			{CustomizedBM_InitAction},														{CustomizedBM_StartAction},														{CustomizedBM_ClickDetectAction},												{CustomizedBM_LongPushDetectAction},											{CustomizedBM_SureLongPushAction},												{CustomizedBM_LongPushReleaseDetectAction},										{CustomizedBM_SureLongPushReleaseAction},										{CustomizedBM_ClickReleaseDetectAction},										{CustomizedBM_DoubleClickDetectAction},											{CustomizedBM_SureClickAction},													{CustomizedBM_SureDoubleClickAction},									};																																								 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_0																												,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_1																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_2																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_3																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_4																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_5																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 														static const sButtonModuleExtern CONCAT_2(p_button_module, _with_monitor) = {				&CONCAT_2(p_button_module, _entry),													6,																					{																					&CONCAT_2(p_button_module_motion_action_0, _entry),									&CONCAT_2(p_button_module_motion_action_1, _entry),									&CONCAT_2(p_button_module_motion_action_2, _entry),									&CONCAT_2(p_button_module_motion_action_3, _entry),									&CONCAT_2(p_button_module_motion_action_4, _entry),									&CONCAT_2(p_button_module_motion_action_5, _entry),									},																			};																																										static const sButtonModuleExtern * p_button_module = &CONCAT_2(p_button_module, _with_monitor)
N
N/*************************************************7**************************************************/
N#define CUSTOM_BUTTON_MONITOR_7_DEF(p_button_module						\
N									,loop_time_in_ms						\
N									,function_init						\
N									,function_get_value					\
N									,function_config					\
N									,function_click_cb					\
N									,function_double_click_cb			\
N									,fucntion_long_push_cb				\
N									,function_long_push_release_cb		\
N									,function_state_recorder				\
N)																		\
N		CUSTOM_BUTTON_MODULE_DEF(p_button_module						\
N								,7										\
N								,loop_time_in_ms						\
N								,function_init							\
N								,function_get_value						\
N								,function_config						\
N								,function_click_cb						\
N								,function_double_click_cb				\
N								,fucntion_long_push_cb					\
N								,function_long_push_release_cb			\
N								,function_state_recorder				\
N);																		\
Nstatic const StateAction CONCAT_2(p_button_module, _ButtonStateAction)[] = {	\
N		{CustomizedBM_InitAction},												\
N		{CustomizedBM_StartAction},												\
N		{CustomizedBM_ClickDetectAction},										\
N		{CustomizedBM_LongPushDetectAction},									\
N		{CustomizedBM_SureLongPushAction},										\
N		{CustomizedBM_LongPushReleaseDetectAction},								\
N		{CustomizedBM_SureLongPushReleaseAction},								\
N		{CustomizedBM_ClickReleaseDetectAction},								\
N		{CustomizedBM_DoubleClickDetectAction},									\
N		{CustomizedBM_SureClickAction},											\
N		{CustomizedBM_SureDoubleClickAction},									\
N};																				\
N																				\
N/***********0************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_0																			\
N									,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   	\
N									,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																\
N/***********1************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_1																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********2************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_2																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********3************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_3																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********4************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_4																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********5************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_5																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********6************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_6																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********end************/														\
Nstatic const sButtonModuleExtern CONCAT_2(p_button_module, _with_monitor) = {		\
N		&CONCAT_2(p_button_module, _entry),											\
N		7,																			\
N		{																			\
N		&CONCAT_2(p_button_module_motion_action_0, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_1, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_2, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_3, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_4, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_5, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_6, _entry),							\
N		},																			\
N};																					\
N																					\
Nstatic const sButtonModuleExtern * p_button_module = &CONCAT_2(p_button_module, _with_monitor)
X#define CUSTOM_BUTTON_MONITOR_7_DEF(p_button_module															,loop_time_in_ms															,function_init															,function_get_value														,function_config														,function_click_cb														,function_double_click_cb												,fucntion_long_push_cb													,function_long_push_release_cb											,function_state_recorder				)																				CUSTOM_BUTTON_MODULE_DEF(p_button_module														,7																		,loop_time_in_ms														,function_init															,function_get_value														,function_config														,function_click_cb														,function_double_click_cb												,fucntion_long_push_cb													,function_long_push_release_cb											,function_state_recorder				);																		static const StateAction CONCAT_2(p_button_module, _ButtonStateAction)[] = {			{CustomizedBM_InitAction},														{CustomizedBM_StartAction},														{CustomizedBM_ClickDetectAction},												{CustomizedBM_LongPushDetectAction},											{CustomizedBM_SureLongPushAction},												{CustomizedBM_LongPushReleaseDetectAction},										{CustomizedBM_SureLongPushReleaseAction},										{CustomizedBM_ClickReleaseDetectAction},										{CustomizedBM_DoubleClickDetectAction},											{CustomizedBM_SureClickAction},													{CustomizedBM_SureDoubleClickAction},									};																																								 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_0																												,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_1																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_2																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_3																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_4																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_5																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_6																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 														static const sButtonModuleExtern CONCAT_2(p_button_module, _with_monitor) = {				&CONCAT_2(p_button_module, _entry),													7,																					{																					&CONCAT_2(p_button_module_motion_action_0, _entry),									&CONCAT_2(p_button_module_motion_action_1, _entry),									&CONCAT_2(p_button_module_motion_action_2, _entry),									&CONCAT_2(p_button_module_motion_action_3, _entry),									&CONCAT_2(p_button_module_motion_action_4, _entry),									&CONCAT_2(p_button_module_motion_action_5, _entry),									&CONCAT_2(p_button_module_motion_action_6, _entry),									},																			};																																										static const sButtonModuleExtern * p_button_module = &CONCAT_2(p_button_module, _with_monitor)
N
N
N/*************************************************8**************************************************/
N#define CUSTOM_BUTTON_MONITOR_8_DEF(p_button_module						\
N									,loop_time_in_ms						\
N									,function_init						\
N									,function_get_value					\
N									,function_config					\
N									,function_click_cb					\
N									,function_double_click_cb			\
N									,fucntion_long_push_cb				\
N									,function_long_push_release_cb		\
N									,function_state_recorder				\
N)																		\
N		CUSTOM_BUTTON_MODULE_DEF(p_button_module						\
N								,8										\
N								,loop_time_in_ms						\
N								,function_init							\
N								,function_get_value						\
N								,function_config						\
N								,function_click_cb						\
N								,function_double_click_cb				\
N								,fucntion_long_push_cb					\
N								,function_long_push_release_cb			\
N								,function_state_recorder				\
N);																		\
Nstatic const StateAction CONCAT_2(p_button_module, _ButtonStateAction)[] = {	\
N		{CustomizedBM_InitAction},												\
N		{CustomizedBM_StartAction},												\
N		{CustomizedBM_ClickDetectAction},										\
N		{CustomizedBM_LongPushDetectAction},									\
N		{CustomizedBM_SureLongPushAction},										\
N		{CustomizedBM_LongPushReleaseDetectAction},								\
N		{CustomizedBM_SureLongPushReleaseAction},								\
N		{CustomizedBM_ClickReleaseDetectAction},								\
N		{CustomizedBM_DoubleClickDetectAction},									\
N		{CustomizedBM_SureClickAction},											\
N		{CustomizedBM_SureDoubleClickAction},									\
N};																				\
N																				\
N/***********0************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_0																			\
N									,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   	\
N									,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																\
N/***********1************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_1																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********2************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_2																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********3************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_3																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********4************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_4																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********5************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_5																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********6************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_6																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********7************/															\
NAPP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_7																			\
N							,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   			\
N							,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		\
N/***********end************/														\
Nstatic const sButtonModuleExtern CONCAT_2(p_button_module, _with_monitor) = {		\
N		&CONCAT_2(p_button_module, _entry),											\
N		8,																			\
N		{																			\
N		&CONCAT_2(p_button_module_motion_action_0, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_1, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_2, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_3, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_4, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_5, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_6, _entry),							\
N		&CONCAT_2(p_button_module_motion_action_7, _entry),							\
N		},																			\
N};																					\
N																					\
Nstatic const sButtonModuleExtern * p_button_module = &CONCAT_2(p_button_module, _with_monitor)
X#define CUSTOM_BUTTON_MONITOR_8_DEF(p_button_module															,loop_time_in_ms															,function_init															,function_get_value														,function_config														,function_click_cb														,function_double_click_cb												,fucntion_long_push_cb													,function_long_push_release_cb											,function_state_recorder				)																				CUSTOM_BUTTON_MODULE_DEF(p_button_module														,8																		,loop_time_in_ms														,function_init															,function_get_value														,function_config														,function_click_cb														,function_double_click_cb												,fucntion_long_push_cb													,function_long_push_release_cb											,function_state_recorder				);																		static const StateAction CONCAT_2(p_button_module, _ButtonStateAction)[] = {			{CustomizedBM_InitAction},														{CustomizedBM_StartAction},														{CustomizedBM_ClickDetectAction},												{CustomizedBM_LongPushDetectAction},											{CustomizedBM_SureLongPushAction},												{CustomizedBM_LongPushReleaseDetectAction},										{CustomizedBM_SureLongPushReleaseAction},										{CustomizedBM_ClickReleaseDetectAction},										{CustomizedBM_DoubleClickDetectAction},											{CustomizedBM_SureClickAction},													{CustomizedBM_SureDoubleClickAction},									};																																								 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_0																												,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_1																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_2																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_3																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_4																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_5																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_6																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 															APP_STATE_MACHINE_DEF_WITHOUT_POINTER(p_button_module_motion_action_7																										,sizeof(CONCAT_2(p_button_module, _ButtonStateAction))/sizeof(CONCAT_2(p_button_module, _ButtonStateAction)[0])   										,&CONCAT_2(p_button_module, _ButtonStateAction)[0]);																		 														static const sButtonModuleExtern CONCAT_2(p_button_module, _with_monitor) = {				&CONCAT_2(p_button_module, _entry),													8,																					{																					&CONCAT_2(p_button_module_motion_action_0, _entry),									&CONCAT_2(p_button_module_motion_action_1, _entry),									&CONCAT_2(p_button_module_motion_action_2, _entry),									&CONCAT_2(p_button_module_motion_action_3, _entry),									&CONCAT_2(p_button_module_motion_action_4, _entry),									&CONCAT_2(p_button_module_motion_action_5, _entry),									&CONCAT_2(p_button_module_motion_action_6, _entry),									&CONCAT_2(p_button_module_motion_action_7, _entry),									},																			};																																										static const sButtonModuleExtern * p_button_module = &CONCAT_2(p_button_module, _with_monitor)
N
N
N#endif
L 18 "..\..\..\module\customize\ButtonModule\ButtonModule.h" 2
N
Ntypedef struct
N{
N	uint16_t ClickTimeThresholdInMS;
N	uint16_t ReleaseTimeThresholdInMS;
N	uint16_t LongPushTimeThresholdInMS;
N	uint16_t ReleaseAllTimeThresholdInMS;
N	CombineButtonValue EachButtonMode;
X	uint8_t EachButtonMode;
N}sParamAboutTime;
N
Ntypedef struct
N{
N	uint16_t push_time_counter;
N	uint16_t release_time_counter;
N	uint16_t latest_push_time_counter_backup;
N	sParamAboutTime const *  p_spat;
N}sParamSingleButton;
N
Ntypedef struct
N{
N	uint8_t button_number;
N	uint8_t ModuleLoopTimeInMS;
N	X_Void (*init)(X_Void);
X	void (*init)(void);
N	CombineButtonValue (*get_value)(X_Void);
X	uint8_t (*get_value)(void);
N	X_Void (*config)(sParamSingleButton * p_spsb);
X	void (*config)(sParamSingleButton * p_spsb);
N	X_Void (*click)(const CombineButtonValue value);
X	void (*click)(const uint8_t value);
N	X_Void (*double_click)(const CombineButtonValue value);
X	void (*double_click)(const uint8_t value);
N	X_Void (*long_push)(const CombineButtonValue value);
X	void (*long_push)(const uint8_t value);
N	X_Void (*long_push_release)(const CombineButtonValue value,uint16_t const*longpushtickcycle);
X	void (*long_push_release)(const uint8_t value,uint16_t const*longpushtickcycle);
N	X_Void (*StateRecorder)(StateNumber current_state,StateNumber next_state);
X	void (*StateRecorder)(StateNumber current_state,StateNumber next_state);
N
N}sButtonModule;
N
Ntypedef struct
N{
N	const sButtonModule  	*base;
N	const uint8_t          	button_number;
N	const s_StateMachine  *p_monitor[MAX_BUTTON_NUMBER];
X	const s_StateMachine  *p_monitor[8];
N}sButtonModuleExtern;
N
N
N
N#define CUSTOM_BUTTON_MODULE_DEF(	p_button_module						\
N									,button_number                      \
N									,loop_time_in_ms					\
N									,function_init						\
N									,function_get_value					\
N									,function_config					\
N									,function_click_cb					\
N									,function_double_click_cb			\
N									,fucntion_long_push_cb				\
N									,function_long_push_release_cb		\
N									,function_state_recorder)				\
Nstatic const sButtonModule CONCAT_2(p_button_module, _entry) = {		\
N		button_number,													\
N		loop_time_in_ms,												\
N		function_init,													\
N		function_get_value,												\
N		function_config,												\
N		function_click_cb,												\
N		function_double_click_cb,										\
N		fucntion_long_push_cb,											\
N		function_long_push_release_cb,									\
N		function_state_recorder,										\
N};
X#define CUSTOM_BUTTON_MODULE_DEF(	p_button_module															,button_number                      									,loop_time_in_ms														,function_init															,function_get_value														,function_config														,function_click_cb														,function_double_click_cb												,fucntion_long_push_cb													,function_long_push_release_cb											,function_state_recorder)				static const sButtonModule CONCAT_2(p_button_module, _entry) = {				button_number,															loop_time_in_ms,														function_init,															function_get_value,														function_config,														function_click_cb,														function_double_click_cb,												fucntion_long_push_cb,													function_long_push_release_cb,											function_state_recorder,										};
N
N
NX_Void ButtonStateMonitor(const sButtonModuleExtern *p_sbm,CombineButtonValue *value);
Xvoid ButtonStateMonitor(const sButtonModuleExtern *p_sbm,uint8_t *value);
NX_Void SetCurrentButtonConfigMode(CombineButtonValue mode);
Xvoid SetCurrentButtonConfigMode(uint8_t mode);
N
N#endif
L 2 "..\..\..\module\customize\ButtonModule\ButtonModule.c" 2
N#include "..\..\Common\Math\bit_operation.h"
L 1 "..\..\..\module\customize\ButtonModule\..\..\Common\Math\bit_operation.h" 1
N#ifndef __BIT_OPERATION_H
N#define __BIT_OPERATION_H
N
N#ifdef __cplusplus
S extern "C"{
N#endif
N
N
N#include "../x_cross_platform.h" //!!! makefile is sentive to "/" and "\"  , use "/"！！！
N
N#define Set  (0 == 0)
N#define Clear (0 != 0)
N
Nuint8_t byte_rotate_bit(uint8_t source);// ! careful about the hardware platform ;test arm 32 ok
Nuint8_t byte_setbit(uint8_t source,uint8_t bitnumber);
Nuint8_t byte_clearbit(uint8_t source,uint8_t bitnumber);
Nuint8_t byte_getbit(uint8_t source,uint8_t bitnumber);
Nuint8_t byte_bitoverturn(uint8_t source,uint8_t bitnumber);
Nuint8_t ByteFactorSet(uint8_t factor,uint8_t bit_number,X_Boolean SetOrClear);
N
Nuint16_t twobyte_setbit(uint16_t source,uint8_t bitnumber);
Nuint16_t twobyte_clearbit(uint16_t source,uint8_t bitnumber);
Nuint16_t twobyte_getbit(uint16_t source,uint8_t bitnumber);
Nuint16_t twobyte_bitoverturn(uint16_t source,uint8_t bitnumber);
Nuint16_t TwoByteFactorSet(uint16_t factor,uint8_t bit_number,X_Boolean SetOrClear);
N
Nuint32_t uint32_rotate_bit(uint32_t source);// ! careful about the hardware platform
N
Nuint32_t fourbyte_setbit(uint32_t source,uint8_t bitnumber);
Nuint32_t fourbyte_clearbit(uint32_t source,uint8_t bitnumber);
Nuint32_t fourbyte_getbit(uint32_t source,uint8_t bitnumber);
Nuint32_t fourbyte_bitoverturn(uint32_t source,uint8_t bitnumber);
Nuint32_t FourByteFactorSet(uint32_t factor,uint8_t bit_number,X_Boolean SetOrClear);
N
Nuint8_t GetBinaryBitNumber(uint32_t value);
Nuint8_t GetLeadZeroCount(uint32_t source);
Nuint8_t GetRearZeroCount(uint32_t source);
N
N#ifdef __cplusplus
S 	}
N#endif
N
N
N#endif
L 3 "..\..\..\module\customize\ButtonModule\ButtonModule.c" 2
N
N#define TIMER_COUNTER_MAX                      (0xffff)
N
N#define VALID_PUSH_IN_MS_DEFAULT                100
N#define VALID_RELEASE_IN_MS_DEFAULT             40
N#define VALID_LONG_PUSH_IN_MS_DEFAULT           1000
N#define VALID_LONG_RELEASE_IN_MS_DEFAULT        80
N
N#define SetBitMethod             twobyte_setbit
N/*************************************************************************/
Ntypedef enum
N{
N	BA_click,
N	BA_doubleclick,
N	BA_longpush,
N	BA_longpushrelease,
N}eButtonAction;
N
Ntypedef enum
N{
N	BM_Init = 0,
N	BM_Start,
N	BM_ClickDetect,
N	BM_LongPushDetect,
N	BM_SureLongPush,
N	BM_LongPushReleaseDetect,
N	BM_SureLongPushRelease,
N	BM_ClickReleaseDetect,
N	BM_DoubleClickDetect,
N	BM_SureClick,
N	BM_SureDoubleClick,
N}ButtonMonitorState;
N
Ntypedef struct
N{
N	CombineButtonValue isClick;
X	uint8_t isClick;
N	CombineButtonValue isDoubleClick;
X	uint8_t isDoubleClick;
N	CombineButtonValue isLongpush;
X	uint8_t isLongpush;
N	CombineButtonValue isLongpushRelease;
X	uint8_t isLongpushRelease;
N	uint16_t LongPushLastCycle[MAX_BUTTON_NUMBER];
X	uint16_t LongPushLastCycle[8];
N}sButtonStateFlag;
N
Nstatic X_Boolean isCurrentButtonPushed = X_False;
Xstatic X_Boolean isCurrentButtonPushed = (0 != 0);
Nstatic CombineButtonValue CurrentButtonValue = 0;
Xstatic uint8_t CurrentButtonValue = 0;
Nstatic const sButtonModuleExtern *p_sBME;
Nstatic sButtonStateFlag sBSF = {0,0,0,0};
N
Nstatic const sParamAboutTime sPAT_Default = {
N		VALID_PUSH_IN_MS_DEFAULT,
X		100,
N		VALID_RELEASE_IN_MS_DEFAULT,
X		40,
N		VALID_LONG_PUSH_IN_MS_DEFAULT,
X		1000,
N		VALID_LONG_RELEASE_IN_MS_DEFAULT,
X		80,
N		0, // bit 0 :normal mode : click ,double click , long push , long push relase   bit 1 : not include double click
N};
N
Ntypedef struct
N{
N	s_StateMachineParam base;
N	uint8_t CurrentButtonNumber;
N	sParamSingleButton s_psb;
N}sParamExtern;
N
Nstatic sParamExtern sPE[MAX_BUTTON_NUMBER];
Xstatic sParamExtern sPE[8];
N
Nstatic X_Boolean DoesValidPush(const sParamSingleButton * p_psb)
N{
N	if(p_psb == X_Null || p_sBME == X_Null) {return X_False;}
X	if(p_psb == ((void*)0) || p_sBME == ((void*)0)) {return (0 != 0);}
N	return ((p_psb->push_time_counter * p_sBME->base->ModuleLoopTimeInMS)  >=  p_psb->p_spat->ClickTimeThresholdInMS);
N}
Nstatic X_Boolean DoesValidRelease(const sParamSingleButton * p_psb)
N{
N	if(p_psb == X_Null || p_sBME == X_Null) {return X_False;}
X	if(p_psb == ((void*)0) || p_sBME == ((void*)0)) {return (0 != 0);}
N	return ((p_psb->release_time_counter * p_sBME->base->ModuleLoopTimeInMS)  >=  p_psb->p_spat->ReleaseTimeThresholdInMS);
N}
Nstatic X_Boolean DoesValidLongPush(const sParamSingleButton * p_psb)
N{
N	if(p_psb == X_Null || p_sBME == X_Null) {return X_False;}
X	if(p_psb == ((void*)0) || p_sBME == ((void*)0)) {return (0 != 0);}
N	return ((p_psb->push_time_counter * p_sBME->base->ModuleLoopTimeInMS)  >=  p_psb->p_spat->LongPushTimeThresholdInMS);
N}
Nstatic X_Boolean DoesValidLongRelease(const sParamSingleButton * p_psb)
N{
N	if(p_psb == X_Null || p_sBME == X_Null) {return X_False;}
X	if(p_psb == ((void*)0) || p_sBME == ((void*)0)) {return (0 != 0);}
N	return ((p_psb->release_time_counter * p_sBME->base->ModuleLoopTimeInMS)  >=  p_psb->p_spat->ReleaseAllTimeThresholdInMS);
N}
N
Nstatic X_Void ClearPushCounter(sParamSingleButton * p_psb)
Xstatic void ClearPushCounter(sParamSingleButton * p_psb)
N{
N	if(p_psb == X_Null) {return ;}
X	if(p_psb == ((void*)0)) {return ;}
N	p_psb->latest_push_time_counter_backup = p_psb->push_time_counter;
N	p_psb->push_time_counter = 0;
N}
Nstatic X_Void ClearReleaseCounter(sParamSingleButton * p_psb)
Xstatic void ClearReleaseCounter(sParamSingleButton * p_psb)
N{
N	if(p_psb == X_Null) {return ;}
X	if(p_psb == ((void*)0)) {return ;}
N	p_psb->release_time_counter = 0;
N}
N
Nstatic X_Void TimeManager(sParamSingleButton * p_psb,X_Boolean isPushed)
Xstatic void TimeManager(sParamSingleButton * p_psb,X_Boolean isPushed)
N{
N	if(p_psb == X_Null) {return;}
X	if(p_psb == ((void*)0)) {return;}
N
N	if(isPushed == X_True)
X	if(isPushed == (0 == 0))
N	{
N		p_psb->release_time_counter = 0;
N		if(p_psb->push_time_counter >= TIMER_COUNTER_MAX) {return;}
X		if(p_psb->push_time_counter >= (0xffff)) {return;}
N		p_psb->push_time_counter ++;
N
N	}
N	else
N	{
N		if(p_psb->push_time_counter != 0) {p_psb->latest_push_time_counter_backup = p_psb->push_time_counter;}
N		p_psb->push_time_counter = 0;
N		if(p_psb->release_time_counter >= TIMER_COUNTER_MAX) {return;}
X		if(p_psb->release_time_counter >= (0xffff)) {return;}
N		p_psb->release_time_counter ++;
N	}
N}
N
Nstatic X_Void ButtonFlagInit(X_Void)
Xstatic void ButtonFlagInit(void)
N{
N	sBSF.isClick = 0;
N	sBSF.isDoubleClick = 0;
N	sBSF.isLongpush = 0;
N	sBSF.isLongpushRelease = 0;
N}
Nstatic X_Void ButtonFlagSet(eButtonAction action,uint8_t button_num,uint16_t long_push_last)
Xstatic void ButtonFlagSet(eButtonAction action,uint8_t button_num,uint16_t long_push_last)
N{
N	switch(action)
N	{
N		case BA_click:
N			sBSF.isClick = SetBitMethod(sBSF.isClick,button_num);
X			sBSF.isClick = twobyte_setbit(sBSF.isClick,button_num);
N			break;
N		case BA_doubleclick:
N			sBSF.isDoubleClick = SetBitMethod(sBSF.isDoubleClick,button_num);
X			sBSF.isDoubleClick = twobyte_setbit(sBSF.isDoubleClick,button_num);
N			break;
N		case BA_longpush:
N			sBSF.isLongpush = SetBitMethod(sBSF.isLongpush,button_num);
X			sBSF.isLongpush = twobyte_setbit(sBSF.isLongpush,button_num);
N			break;
N		case BA_longpushrelease:
N			sBSF.isLongpushRelease = SetBitMethod(sBSF.isLongpushRelease,button_num);
X			sBSF.isLongpushRelease = twobyte_setbit(sBSF.isLongpushRelease,button_num);
N			if(button_num >= MAX_BUTTON_NUMBER) {break;}
X			if(button_num >= 8) {break;}
N			sBSF.LongPushLastCycle[button_num] = long_push_last;
N			break;
N		default:
N			break;
N	}
N}
Nstatic X_Void ButtonFlagReport(const sButtonModuleExtern *p_sbm)
Xstatic void ButtonFlagReport(const sButtonModuleExtern *p_sbm)
N{
N	if(p_sbm->base->click != X_Null && sBSF.isClick != 0)
X	if(p_sbm->base->click != ((void*)0) && sBSF.isClick != 0)
N	{
N		p_sbm->base->click(sBSF.isClick);
N	}
N	if(p_sbm->base->double_click != X_Null && sBSF.isDoubleClick != 0)
X	if(p_sbm->base->double_click != ((void*)0) && sBSF.isDoubleClick != 0)
N	{
N		p_sbm->base->double_click(sBSF.isDoubleClick);
N	}
N	if(p_sbm->base->long_push != X_Null && sBSF.isLongpush != 0)
X	if(p_sbm->base->long_push != ((void*)0) && sBSF.isLongpush != 0)
N	{
N		p_sbm->base->long_push(sBSF.isLongpush);
N	}
N	if(p_sbm->base->long_push_release != X_Null && sBSF.isLongpushRelease != 0)
X	if(p_sbm->base->long_push_release != ((void*)0) && sBSF.isLongpushRelease != 0)
N	{
N		p_sbm->base->long_push_release(sBSF.isLongpushRelease,sBSF.LongPushLastCycle);
N	}
N	ButtonFlagInit();
N}
N
NStateNumber CustomizedBM_InitAction(s_StateMachineParam *p_this)
N{
N	sParamExtern *p_spe = (sParamExtern*)p_this;
N	if(p_sBME->base->config == X_Null)
X	if(p_sBME->base->config == ((void*)0))
N	{
N		p_spe->s_psb.p_spat = &sPAT_Default;
N	}
N	else
N	{
N		p_sBME->base->config(&p_spe->s_psb);// to do :get something param from flash or set it into flash
N	}
N	p_spe->s_psb.push_time_counter = 0;
N	p_spe->s_psb.release_time_counter = 0;
N	p_spe->s_psb.latest_push_time_counter_backup = 0;
N	ButtonFlagInit();
N	return BM_Start;
N}
NStateNumber CustomizedBM_StartAction(s_StateMachineParam *p_this)
N{
N//	if(CurrentButtonNumber >= p_sBME->button_number) {return BM_Init;}
N//	sParamSingleButton * p_spsb = &sPSB[CurrentButtonNumber];
N//	if((p_spsb->push_time_counter * p_sBME->base->ModuleLoopTimeInMS) >= p_spsb -> p_spat->ClickTimeThresholdInMS)
N	return BM_ClickDetect;
N}
NStateNumber CustomizedBM_ClickDetectAction(s_StateMachineParam *p_this)
N{
N	sParamExtern *p_spe = (sParamExtern*)p_this;
N	if(DoesValidPush(&p_spe->s_psb) == X_True)
X	if(DoesValidPush(&p_spe->s_psb) == (0 == 0))
N	{
N		ClearPushCounter(&p_spe->s_psb);
N		return BM_LongPushDetect;
N	}
N	if(DoesValidLongRelease(&p_spe->s_psb) == X_True) {return BM_Start;}
X	if(DoesValidLongRelease(&p_spe->s_psb) == (0 == 0)) {return BM_Start;}
N	return p_this->current_state;
N}
NStateNumber CustomizedBM_LongPushDetectAction(s_StateMachineParam *p_this)
N{
N	sParamExtern *p_spe = (sParamExtern*)p_this;
N	if(DoesValidLongPush(&p_spe->s_psb) == X_True) {return BM_SureLongPush;}
X	if(DoesValidLongPush(&p_spe->s_psb) == (0 == 0)) {return BM_SureLongPush;}
N	if(DoesValidRelease(&p_spe->s_psb) == X_True)
X	if(DoesValidRelease(&p_spe->s_psb) == (0 == 0))
N	{
N		ClearReleaseCounter(&p_spe->s_psb);
N		if(twobyte_getbit(p_spe ->s_psb.p_spat->EachButtonMode,p_spe ->CurrentButtonNumber) == 1)
N		{
N			return BM_SureClick;
N		}
N		else
N		{
N			return BM_ClickReleaseDetect;
N		}
N		
N	}
N	return p_this->current_state;
N}
NStateNumber CustomizedBM_SureLongPushAction(s_StateMachineParam *p_this)
N{
N	// to do : tell user
N	sParamExtern *p_spe = (sParamExtern*)p_this;
N	ButtonFlagSet(BA_longpush,p_spe->CurrentButtonNumber,0);
N	return BM_LongPushReleaseDetect;
N}
NStateNumber CustomizedBM_LongPushReleaseDetectAction(s_StateMachineParam *p_this)
N{
N	sParamExtern *p_spe = (sParamExtern*)p_this;
N	if(p_spe->CurrentButtonNumber >= p_sBME->button_number) {return BM_Init;}
N	if(DoesValidRelease(&p_spe->s_psb) == X_True) {return BM_SureLongPushRelease;}
X	if(DoesValidRelease(&p_spe->s_psb) == (0 == 0)) {return BM_SureLongPushRelease;}
N	return p_this->current_state;
N}
NStateNumber CustomizedBM_SureLongPushReleaseAction(s_StateMachineParam *p_this)
N{
N	sParamExtern *p_spe = (sParamExtern*)p_this;
N	if(p_spe->CurrentButtonNumber >= p_sBME->button_number) {return BM_Init;}
N	// to do : tell user
N	ButtonFlagSet(BA_longpushrelease,p_spe->CurrentButtonNumber,p_spe->s_psb.latest_push_time_counter_backup);
N	return BM_Start;
N}
NStateNumber CustomizedBM_ClickReleaseDetectAction(s_StateMachineParam *p_this)
N{
N	sParamExtern *p_spe = (sParamExtern*)p_this;
N	if(p_spe->CurrentButtonNumber >= p_sBME->button_number) {return BM_Init;}
N	if(DoesValidLongRelease(&p_spe->s_psb) == X_True) {return BM_SureClick;}
X	if(DoesValidLongRelease(&p_spe->s_psb) == (0 == 0)) {return BM_SureClick;}
N	if(DoesValidPush(&p_spe->s_psb) == X_True)
X	if(DoesValidPush(&p_spe->s_psb) == (0 == 0))
N	{
N		ClearPushCounter(&p_spe->s_psb);
N		return BM_DoubleClickDetect;
N	}
N	return p_this->current_state;
N}
NStateNumber CustomizedBM_DoubleClickDetectAction(s_StateMachineParam *p_this)
N{
N	sParamExtern *p_spe = (sParamExtern*)p_this;
N	if(p_spe->CurrentButtonNumber >= p_sBME->button_number) {return BM_Init;}
N	if(DoesValidRelease(&p_spe->s_psb) == X_True) {return BM_SureDoubleClick;}
X	if(DoesValidRelease(&p_spe->s_psb) == (0 == 0)) {return BM_SureDoubleClick;}
N	if(DoesValidLongPush(&p_spe->s_psb) == X_True){return BM_SureLongPush;}
X	if(DoesValidLongPush(&p_spe->s_psb) == (0 == 0)){return BM_SureLongPush;}
N	return p_this->current_state;
N}
NStateNumber CustomizedBM_SureClickAction(s_StateMachineParam *p_this)
N{
N	// to do : tell user
N	sParamExtern *p_spe = (sParamExtern*)p_this;
N	ButtonFlagSet(BA_click,p_spe->CurrentButtonNumber,0);
N	return BM_Start;
N}
NStateNumber CustomizedBM_SureDoubleClickAction(s_StateMachineParam *p_this)
N{
N	// to do : tell user
N	sParamExtern *p_spe = (sParamExtern*)p_this;
N	ButtonFlagSet(BA_doubleclick,p_spe->CurrentButtonNumber,0);
N	return BM_Start;
N}
N
NX_Void ButtonStateMonitor(const sButtonModuleExtern *p_sbm,CombineButtonValue *value)
Xvoid ButtonStateMonitor(const sButtonModuleExtern *p_sbm,uint8_t *value)
N{
N	uint8_t i;
N
N	CurrentButtonValue = p_sbm->base->get_value();
N	if(value != X_Null) {*value = CurrentButtonValue;}
X	if(value != ((void*)0)) {*value = CurrentButtonValue;}
N	p_sBME = p_sbm;
N	for(i=0;i<p_sbm->button_number;i++)
N	{
N		sPE[i].CurrentButtonNumber = i;
N		isCurrentButtonPushed = (twobyte_getbit(CurrentButtonValue,i) == 1) ? X_True : X_False;
X		isCurrentButtonPushed = (twobyte_getbit(CurrentButtonValue,i) == 1) ? (0 == 0) : (0 != 0);
N		mStateMachineRun(p_sbm->p_monitor[i],&sPE[i].base,p_sbm->base->StateRecorder);
N		TimeManager(&sPE[i].s_psb,isCurrentButtonPushed);
N	}
N	ButtonFlagReport(p_sbm);
N}
