; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\system_stm32f4xx.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\system_stm32f4xx.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\HARDWARE\LED -I..\HARDWARE\LCD -I..\HARDWARE\KEY -I..\HARDWARE\SRAM -I..\HARDWARE\SDIO -I..\MALLOC -I..\USMART -I..\HARDWARE\SPI -I..\HARDWARE\W25QXX -I..\FATFS\exfuns -I..\FATFS\src -I..\TEXT -I..\FWLIB\inc -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\I2S -I..\HARDWARE\WM8978 -I..\APP -I..\AUDIOCODEC\wav -I..\new_user -I..\new_user\task -I..\new_user\MVC -I..\..\..\module\common -I..\..\..\module\common\InsertLog -I..\..\..\module\common\loopqueue -I..\..\..\module\common\StateMachine -I..\..\..\module\common\priorityqueue -I..\..\..\module\common\Math -I..\..\..\module\component\const_loop_scheduler -I..\..\..\module\component\const_loop_scheduler\TemplateTask -I..\..\..\module\component\const_loop_scheduler\HierarchicalSM -I..\..\..\module\component\BlockableStateMachine -I..\..\..\module\customize\ButtonModule -I..\..\..\module\external\Segger\SEGGER_RTT_V640\Syscalls -I..\..\..\module\external\Segger\SEGGER_RTT_V640\RTT -I.\RTE\_AudioPlayer -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include" -I"D:\Program Files\ARM\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_COMPILER_PRESENT -DX_TASK_LOG_DEBUG_METHOD=SeggerRTT_LogDebug --omf_browse=..\obj\system_stm32f4xx.crf system_stm32f4xx.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;563      */
;;;564    static void SetSysClock(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;565    {
;;;566    #if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx) || defined (STM32F401xx)
;;;567    /******************************************************************************/
;;;568    /*            PLL (clocked by HSE) used as System clock source                */
;;;569    /******************************************************************************/
;;;570      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2000              MOVS     r0,#0
000004  9001              STR      r0,[sp,#4]
000006  9000              STR      r0,[sp,#0]
;;;571      
;;;572      /* Enable HSE */
;;;573      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000008  4834              LDR      r0,|L1.220|
00000a  6800              LDR      r0,[r0,#0]
00000c  f4403080          ORR      r0,r0,#0x10000
000010  4932              LDR      r1,|L1.220|
000012  6008              STR      r0,[r1,#0]
;;;574     
;;;575      /* Wait till HSE is ready and if Time out is reached exit */
;;;576      do
000014  bf00              NOP      
                  |L1.22|
;;;577      {
;;;578        HSEStatus = RCC->CR & RCC_CR_HSERDY;
000016  4831              LDR      r0,|L1.220|
000018  6800              LDR      r0,[r0,#0]
00001a  f4003000          AND      r0,r0,#0x20000
00001e  9000              STR      r0,[sp,#0]
;;;579        StartUpCounter++;
000020  9801              LDR      r0,[sp,#4]
000022  1c40              ADDS     r0,r0,#1
000024  9001              STR      r0,[sp,#4]
;;;580      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000026  9800              LDR      r0,[sp,#0]
000028  b918              CBNZ     r0,|L1.50|
00002a  9801              LDR      r0,[sp,#4]
00002c  f5b04fa0          CMP      r0,#0x5000
000030  d1f1              BNE      |L1.22|
                  |L1.50|
;;;581    
;;;582      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000032  482a              LDR      r0,|L1.220|
000034  6800              LDR      r0,[r0,#0]
000036  f4003000          AND      r0,r0,#0x20000
00003a  b110              CBZ      r0,|L1.66|
;;;583      {
;;;584        HSEStatus = (uint32_t)0x01;
00003c  2001              MOVS     r0,#1
00003e  9000              STR      r0,[sp,#0]
000040  e001              B        |L1.70|
                  |L1.66|
;;;585      }
;;;586      else
;;;587      {
;;;588        HSEStatus = (uint32_t)0x00;
000042  2000              MOVS     r0,#0
000044  9000              STR      r0,[sp,#0]
                  |L1.70|
;;;589      }
;;;590    
;;;591      if (HSEStatus == (uint32_t)0x01)
000046  9800              LDR      r0,[sp,#0]
000048  2801              CMP      r0,#1
00004a  d146              BNE      |L1.218|
;;;592      {
;;;593        /* Select regulator voltage output Scale 1 mode */
;;;594        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
00004c  4823              LDR      r0,|L1.220|
00004e  3040              ADDS     r0,r0,#0x40
000050  6800              LDR      r0,[r0,#0]
000052  f0405080          ORR      r0,r0,#0x10000000
000056  4921              LDR      r1,|L1.220|
000058  3140              ADDS     r1,r1,#0x40
00005a  6008              STR      r0,[r1,#0]
;;;595        PWR->CR |= PWR_CR_VOS;
00005c  4820              LDR      r0,|L1.224|
00005e  6800              LDR      r0,[r0,#0]
000060  f4404040          ORR      r0,r0,#0xc000
000064  491e              LDR      r1,|L1.224|
000066  6008              STR      r0,[r1,#0]
;;;596    
;;;597        /* HCLK = SYSCLK / 1*/
;;;598        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
000068  481c              LDR      r0,|L1.220|
00006a  3008              ADDS     r0,r0,#8
00006c  6800              LDR      r0,[r0,#0]
00006e  491b              LDR      r1,|L1.220|
000070  3108              ADDS     r1,r1,#8
000072  6008              STR      r0,[r1,#0]
;;;599    
;;;600    #if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
;;;601        /* PCLK2 = HCLK / 2*/
;;;602        RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
000074  4608              MOV      r0,r1
000076  6800              LDR      r0,[r0,#0]
000078  f4404000          ORR      r0,r0,#0x8000
00007c  6008              STR      r0,[r1,#0]
;;;603        
;;;604        /* PCLK1 = HCLK / 4*/
;;;605        RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
00007e  4608              MOV      r0,r1
000080  6800              LDR      r0,[r0,#0]
000082  f44050a0          ORR      r0,r0,#0x1400
000086  6008              STR      r0,[r1,#0]
;;;606    #endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx */
;;;607    
;;;608    #if defined (STM32F401xx)
;;;609        /* PCLK2 = HCLK / 2*/
;;;610        RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;611        
;;;612        /* PCLK1 = HCLK / 4*/
;;;613        RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;614    #endif /* STM32F401xx */
;;;615       
;;;616        /* Configure the main PLL */
;;;617        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
000088  4816              LDR      r0,|L1.228|
00008a  1f09              SUBS     r1,r1,#4
00008c  6008              STR      r0,[r1,#0]
;;;618                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;619    
;;;620        /* Enable the main PLL */
;;;621        RCC->CR |= RCC_CR_PLLON;
00008e  1f08              SUBS     r0,r1,#4
000090  6800              LDR      r0,[r0,#0]
000092  f0407080          ORR      r0,r0,#0x1000000
000096  1f09              SUBS     r1,r1,#4
000098  6008              STR      r0,[r1,#0]
;;;622    
;;;623        /* Wait till the main PLL is ready */
;;;624        while((RCC->CR & RCC_CR_PLLRDY) == 0)
00009a  bf00              NOP      
                  |L1.156|
00009c  480f              LDR      r0,|L1.220|
00009e  6800              LDR      r0,[r0,#0]
0000a0  f0007000          AND      r0,r0,#0x2000000
0000a4  2800              CMP      r0,#0
0000a6  d0f9              BEQ      |L1.156|
;;;625        {
;;;626        }
;;;627       
;;;628    #if defined (STM32F427_437xx) || defined (STM32F429_439xx)
;;;629        /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
;;;630        PWR->CR |= PWR_CR_ODEN;
;;;631        while((PWR->CSR & PWR_CSR_ODRDY) == 0)
;;;632        {
;;;633        }
;;;634        PWR->CR |= PWR_CR_ODSWEN;
;;;635        while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
;;;636        {
;;;637        }      
;;;638        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;639        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
;;;640    #endif /* STM32F427_437x || STM32F429_439xx  */
;;;641    
;;;642    #if defined (STM32F40_41xxx)     
;;;643        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;644        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
0000a8  f2407005          MOV      r0,#0x705
0000ac  490e              LDR      r1,|L1.232|
0000ae  6008              STR      r0,[r1,#0]
;;;645    #endif /* STM32F40_41xxx  */
;;;646    
;;;647    #if defined (STM32F401xx)
;;;648        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;649        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;650    #endif /* STM32F401xx */
;;;651    
;;;652        /* Select the main PLL as system clock source */
;;;653        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
0000b0  480a              LDR      r0,|L1.220|
0000b2  3008              ADDS     r0,r0,#8
0000b4  6800              LDR      r0,[r0,#0]
0000b6  f0200003          BIC      r0,r0,#3
0000ba  4908              LDR      r1,|L1.220|
0000bc  3108              ADDS     r1,r1,#8
0000be  6008              STR      r0,[r1,#0]
;;;654        RCC->CFGR |= RCC_CFGR_SW_PLL;
0000c0  4608              MOV      r0,r1
0000c2  6800              LDR      r0,[r0,#0]
0000c4  f0400002          ORR      r0,r0,#2
0000c8  6008              STR      r0,[r1,#0]
;;;655    
;;;656        /* Wait till the main PLL is used as system clock source */
;;;657        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
0000ca  bf00              NOP      
                  |L1.204|
0000cc  4803              LDR      r0,|L1.220|
0000ce  3008              ADDS     r0,r0,#8
0000d0  6800              LDR      r0,[r0,#0]
0000d2  f000000c          AND      r0,r0,#0xc
0000d6  2808              CMP      r0,#8
0000d8  d1f8              BNE      |L1.204|
                  |L1.218|
;;;658        {
;;;659        }
;;;660      }
;;;661      else
;;;662      { /* If HSE fails to start-up, the application will have wrong clock
;;;663             configuration. User can add here some code to deal with this error */
;;;664      }
;;;665    #elif defined (STM32F411xE)
;;;666    #if defined (USE_HSE_BYPASS) 
;;;667    /******************************************************************************/
;;;668    /*            PLL (clocked by HSE) used as System clock source                */
;;;669    /******************************************************************************/
;;;670      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
;;;671      
;;;672      /* Enable HSE and HSE BYPASS */
;;;673      RCC->CR |= ((uint32_t)RCC_CR_HSEON | RCC_CR_HSEBYP);
;;;674     
;;;675      /* Wait till HSE is ready and if Time out is reached exit */
;;;676      do
;;;677      {
;;;678        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;679        StartUpCounter++;
;;;680      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
;;;681    
;;;682      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
;;;683      {
;;;684        HSEStatus = (uint32_t)0x01;
;;;685      }
;;;686      else
;;;687      {
;;;688        HSEStatus = (uint32_t)0x00;
;;;689      }
;;;690    
;;;691      if (HSEStatus == (uint32_t)0x01)
;;;692      {
;;;693        /* Select regulator voltage output Scale 1 mode */
;;;694        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
;;;695        PWR->CR |= PWR_CR_VOS;
;;;696    
;;;697        /* HCLK = SYSCLK / 1*/
;;;698        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
;;;699    
;;;700        /* PCLK2 = HCLK / 2*/
;;;701        RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;702        
;;;703        /* PCLK1 = HCLK / 4*/
;;;704        RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;705    
;;;706        /* Configure the main PLL */
;;;707        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
;;;708                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;709        
;;;710        /* Enable the main PLL */
;;;711        RCC->CR |= RCC_CR_PLLON;
;;;712    
;;;713        /* Wait till the main PLL is ready */
;;;714        while((RCC->CR & RCC_CR_PLLRDY) == 0)
;;;715        {
;;;716        }
;;;717    
;;;718        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;719        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;720    
;;;721        /* Select the main PLL as system clock source */
;;;722        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
;;;723        RCC->CFGR |= RCC_CFGR_SW_PLL;
;;;724    
;;;725        /* Wait till the main PLL is used as system clock source */
;;;726        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
;;;727        {
;;;728        }
;;;729      }
;;;730      else
;;;731      { /* If HSE fails to start-up, the application will have wrong clock
;;;732             configuration. User can add here some code to deal with this error */
;;;733      }
;;;734    #else /* HSI will be used as PLL clock source */
;;;735      /* Select regulator voltage output Scale 1 mode */
;;;736      RCC->APB1ENR |= RCC_APB1ENR_PWREN;
;;;737      PWR->CR |= PWR_CR_VOS;
;;;738      
;;;739      /* HCLK = SYSCLK / 1*/
;;;740      RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
;;;741      
;;;742      /* PCLK2 = HCLK / 2*/
;;;743      RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;744      
;;;745      /* PCLK1 = HCLK / 4*/
;;;746      RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;747      
;;;748      /* Configure the main PLL */
;;;749      RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (PLL_Q << 24); 
;;;750      
;;;751      /* Enable the main PLL */
;;;752      RCC->CR |= RCC_CR_PLLON;
;;;753      
;;;754      /* Wait till the main PLL is ready */
;;;755      while((RCC->CR & RCC_CR_PLLRDY) == 0)
;;;756      {
;;;757      }
;;;758      
;;;759      /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;760      FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;761      
;;;762      /* Select the main PLL as system clock source */
;;;763      RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
;;;764      RCC->CFGR |= RCC_CFGR_SW_PLL;
;;;765      
;;;766      /* Wait till the main PLL is used as system clock source */
;;;767      while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
;;;768      {
;;;769      }
;;;770    #endif /* USE_HSE_BYPASS */  
;;;771    #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx */  
;;;772    }
0000da  bd0c              POP      {r2,r3,pc}
;;;773    
                          ENDP

                  |L1.220|
                          DCD      0x40023800
                  |L1.224|
                          DCD      0x40007000
                  |L1.228|
                          DCD      0x07405408
                  |L1.232|
                          DCD      0x40023c00

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;493      */
;;;494    void SystemCoreClockUpdate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;495    {
;;;496      uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
000002  2000              MOVS     r0,#0
000004  2200              MOVS     r2,#0
000006  2302              MOVS     r3,#2
000008  2400              MOVS     r4,#0
00000a  2102              MOVS     r1,#2
;;;497      
;;;498      /* Get SYSCLK source -------------------------------------------------------*/
;;;499      tmp = RCC->CFGR & RCC_CFGR_SWS;
00000c  4d27              LDR      r5,|L2.172|
00000e  682d              LDR      r5,[r5,#0]
000010  f005000c          AND      r0,r5,#0xc
;;;500    
;;;501      switch (tmp)
000014  b120              CBZ      r0,|L2.32|
000016  2804              CMP      r0,#4
000018  d006              BEQ      |L2.40|
00001a  2808              CMP      r0,#8
00001c  d134              BNE      |L2.136|
00001e  e007              B        |L2.48|
                  |L2.32|
;;;502      {
;;;503        case 0x00:  /* HSI used as system clock source */
;;;504          SystemCoreClock = HSI_VALUE;
000020  4d23              LDR      r5,|L2.176|
000022  4e24              LDR      r6,|L2.180|
000024  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;505          break;
000026  e033              B        |L2.144|
                  |L2.40|
;;;506        case 0x04:  /* HSE used as system clock source */
;;;507          SystemCoreClock = HSE_VALUE;
000028  4d23              LDR      r5,|L2.184|
00002a  4e22              LDR      r6,|L2.180|
00002c  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;508          break;
00002e  e02f              B        |L2.144|
                  |L2.48|
;;;509        case 0x08:  /* PLL used as system clock source */
;;;510           /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;511             SYSCLK = PLL_VCO / PLL_P
;;;512             */    
;;;513          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
000030  4d1e              LDR      r5,|L2.172|
000032  1f2d              SUBS     r5,r5,#4
000034  682d              LDR      r5,[r5,#0]
000036  f3c55480          UBFX     r4,r5,#22,#1
;;;514          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
00003a  4d1c              LDR      r5,|L2.172|
00003c  1f2d              SUBS     r5,r5,#4
00003e  682d              LDR      r5,[r5,#0]
000040  f005013f          AND      r1,r5,#0x3f
;;;515          
;;;516    #if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx) || defined (STM32F401xx)
;;;517          if (pllsource != 0)
000044  b154              CBZ      r4,|L2.92|
;;;518          {
;;;519            /* HSE used as PLL clock source */
;;;520            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
000046  4d1c              LDR      r5,|L2.184|
000048  fbb5f5f1          UDIV     r5,r5,r1
00004c  4e17              LDR      r6,|L2.172|
00004e  1f36              SUBS     r6,r6,#4
000050  6836              LDR      r6,[r6,#0]
000052  f3c61688          UBFX     r6,r6,#6,#9
000056  fb05f206          MUL      r2,r5,r6
00005a  e009              B        |L2.112|
                  |L2.92|
;;;521          }
;;;522          else
;;;523          {
;;;524            /* HSI used as PLL clock source */
;;;525            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
00005c  4d14              LDR      r5,|L2.176|
00005e  fbb5f5f1          UDIV     r5,r5,r1
000062  4e12              LDR      r6,|L2.172|
000064  1f36              SUBS     r6,r6,#4
000066  6836              LDR      r6,[r6,#0]
000068  f3c61688          UBFX     r6,r6,#6,#9
00006c  fb05f206          MUL      r2,r5,r6
                  |L2.112|
;;;526          }
;;;527    #elif defined (STM32F411xE)
;;;528    #if defined (USE_HSE_BYPASS)
;;;529          if (pllsource != 0)
;;;530          {
;;;531            /* HSE used as PLL clock source */
;;;532            pllvco = (HSE_BYPASS_INPUT_FREQUENCY / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;533          }  
;;;534    #else  
;;;535          if (pllsource == 0)
;;;536          {
;;;537            /* HSI used as PLL clock source */
;;;538            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;539          }  
;;;540    #endif /* USE_HSE_BYPASS */  
;;;541    #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx */  
;;;542          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
000070  4d0e              LDR      r5,|L2.172|
000072  1f2d              SUBS     r5,r5,#4
000074  682d              LDR      r5,[r5,#0]
000076  f3c54501          UBFX     r5,r5,#16,#2
00007a  1c6d              ADDS     r5,r5,#1
00007c  006b              LSLS     r3,r5,#1
;;;543          SystemCoreClock = pllvco/pllp;      
00007e  fbb2f5f3          UDIV     r5,r2,r3
000082  4e0c              LDR      r6,|L2.180|
000084  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;544          break;
000086  e003              B        |L2.144|
                  |L2.136|
;;;545        default:
;;;546          SystemCoreClock = HSI_VALUE;
000088  4d09              LDR      r5,|L2.176|
00008a  4e0a              LDR      r6,|L2.180|
00008c  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;547          break;
00008e  bf00              NOP      
                  |L2.144|
000090  bf00              NOP                            ;505
;;;548      }
;;;549      /* Compute HCLK frequency --------------------------------------------------*/
;;;550      /* Get HCLK prescaler */
;;;551      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000092  4d06              LDR      r5,|L2.172|
000094  682d              LDR      r5,[r5,#0]
000096  f3c51503          UBFX     r5,r5,#4,#4
00009a  4e08              LDR      r6,|L2.188|
00009c  5d70              LDRB     r0,[r6,r5]
;;;552      /* HCLK frequency */
;;;553      SystemCoreClock >>= tmp;
00009e  4d05              LDR      r5,|L2.180|
0000a0  682d              LDR      r5,[r5,#0]  ; SystemCoreClock
0000a2  40c5              LSRS     r5,r5,r0
0000a4  4e03              LDR      r6,|L2.180|
0000a6  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;554    }
0000a8  bd70              POP      {r4-r6,pc}
;;;555    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L2.172|
                          DCD      0x40023808
                  |L2.176|
                          DCD      0x00f42400
                  |L2.180|
                          DCD      SystemCoreClock
                  |L2.184|
                          DCD      0x007a1200
                  |L2.188|
                          DCD      AHBPrescTable

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;416      */
;;;417    void SystemInit(void)
000000  b510              PUSH     {r4,lr}
;;;418    {
;;;419      /* FPU settings ------------------------------------------------------------*/
;;;420      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;421        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
000002  4815              LDR      r0,|L3.88|
000004  6800              LDR      r0,[r0,#0]
000006  f4400070          ORR      r0,r0,#0xf00000
00000a  4913              LDR      r1,|L3.88|
00000c  6008              STR      r0,[r1,#0]
;;;422      #endif
;;;423      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;424      /* Set HSION bit */
;;;425      RCC->CR |= (uint32_t)0x00000001;
00000e  4813              LDR      r0,|L3.92|
000010  6800              LDR      r0,[r0,#0]
000012  f0400001          ORR      r0,r0,#1
000016  4911              LDR      r1,|L3.92|
000018  6008              STR      r0,[r1,#0]
;;;426    
;;;427      /* Reset CFGR register */
;;;428      RCC->CFGR = 0x00000000;
00001a  2000              MOVS     r0,#0
00001c  490f              LDR      r1,|L3.92|
00001e  3108              ADDS     r1,r1,#8
000020  6008              STR      r0,[r1,#0]
;;;429    
;;;430      /* Reset HSEON, CSSON and PLLON bits */
;;;431      RCC->CR &= (uint32_t)0xFEF6FFFF;
000022  480e              LDR      r0,|L3.92|
000024  6800              LDR      r0,[r0,#0]
000026  490e              LDR      r1,|L3.96|
000028  4008              ANDS     r0,r0,r1
00002a  490c              LDR      r1,|L3.92|
00002c  6008              STR      r0,[r1,#0]
;;;432    
;;;433      /* Reset PLLCFGR register */
;;;434      RCC->PLLCFGR = 0x24003010;
00002e  480d              LDR      r0,|L3.100|
000030  1d09              ADDS     r1,r1,#4
000032  6008              STR      r0,[r1,#0]
;;;435    
;;;436      /* Reset HSEBYP bit */
;;;437      RCC->CR &= (uint32_t)0xFFFBFFFF;
000034  1f08              SUBS     r0,r1,#4
000036  6800              LDR      r0,[r0,#0]
000038  f4202080          BIC      r0,r0,#0x40000
00003c  1f09              SUBS     r1,r1,#4
00003e  6008              STR      r0,[r1,#0]
;;;438    
;;;439      /* Disable all interrupts */
;;;440      RCC->CIR = 0x00000000;
000040  2000              MOVS     r0,#0
000042  4906              LDR      r1,|L3.92|
000044  310c              ADDS     r1,r1,#0xc
000046  6008              STR      r0,[r1,#0]
;;;441    
;;;442    #if defined (DATA_IN_ExtSRAM) || defined (DATA_IN_ExtSDRAM)
;;;443      SystemInit_ExtMemCtl(); 
;;;444    #endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
;;;445             
;;;446      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;447         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;448      SetSysClock();
000048  f7fffffe          BL       SetSysClock
;;;449    
;;;450      /* Configure the Vector Table location add offset address ------------------*/
;;;451    #ifdef VECT_TAB_SRAM
;;;452      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;453    #else
;;;454      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
00004c  f04f6000          MOV      r0,#0x8000000
000050  4901              LDR      r1,|L3.88|
000052  3980              SUBS     r1,r1,#0x80
000054  6008              STR      r0,[r1,#0]
;;;455    #endif
;;;456    }
000056  bd10              POP      {r4,pc}
;;;457    
                          ENDP

                  |L3.88|
                          DCD      0xe000ed88
                  |L3.92|
                          DCD      0x40023800
                  |L3.96|
                          DCD      0xfef6ffff
                  |L3.100|
                          DCD      0x24003010

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x0a037a00
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "system_stm32f4xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___18_system_stm32f4xx_c_5d646a67____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REVSH|
#line 144
|__asm___18_system_stm32f4xx_c_5d646a67____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
