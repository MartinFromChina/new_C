; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\fontupd.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\fontupd.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\HARDWARE\LED -I..\HARDWARE\LCD -I..\HARDWARE\KEY -I..\HARDWARE\SRAM -I..\HARDWARE\SDIO -I..\MALLOC -I..\USMART -I..\HARDWARE\SPI -I..\HARDWARE\W25QXX -I..\FATFS\exfuns -I..\FATFS\src -I..\TEXT -I..\FWLIB\inc -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\I2S -I..\HARDWARE\WM8978 -I..\APP -I..\AUDIOCODEC\wav -I..\new_user -I..\new_user\task -I..\new_user\MVC -I..\..\..\module\common -I..\..\..\module\common\InsertLog -I..\..\..\module\common\loopqueue -I..\..\..\module\common\StateMachine -I..\..\..\module\common\priorityqueue -I..\..\..\module\common\Math -I..\..\..\module\component\const_loop_scheduler -I..\..\..\module\component\const_loop_scheduler\TemplateTask -I..\..\..\module\component\const_loop_scheduler\HierarchicalSM -I..\..\..\module\component\BlockableStateMachine -I..\..\..\module\customize\ButtonModule -I..\..\..\module\external\Segger\SEGGER_RTT_V640\Syscalls -I..\..\..\module\external\Segger\SEGGER_RTT_V640\RTT -I.\RTE\_AudioPlayer -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include" -I"D:\Program Files\ARM\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_COMPILER_PRESENT -DX_TASK_LOG_DEBUG_METHOD=SeggerRTT_LogDebug --omf_browse=..\obj\fontupd.crf ..\TEXT\fontupd.c]
                          THUMB

                          AREA ||i.font_init||, CODE, READONLY, ALIGN=2

                  font_init PROC
;;;210    //		 其他,字库丢失
;;;211    u8 font_init(void)
000000  b510              PUSH     {r4,lr}
;;;212    {		
;;;213    	u8 t=0;
000002  2400              MOVS     r4,#0
;;;214    	W25QXX_Init();  
000004  f7fffffe          BL       W25QXX_Init
;;;215    	while(t<10)//连续读取10次,都是错误,说明确实是有问题,得更新字库了
000008  e00f              B        |L1.42|
                  |L1.10|
;;;216    	{
;;;217    		t++;
00000a  1c60              ADDS     r0,r4,#1
00000c  b2c4              UXTB     r4,r0
;;;218    		W25QXX_Read((u8*)&ftinfo,FONTINFOADDR,sizeof(ftinfo));//读出ftinfo结构体数据
00000e  2221              MOVS     r2,#0x21
000010  f44f0140          MOV      r1,#0xc00000
000014  480a              LDR      r0,|L1.64|
000016  f7fffffe          BL       W25QXX_Read
;;;219    		if(ftinfo.fontok==0XAA)break;
00001a  4809              LDR      r0,|L1.64|
00001c  7800              LDRB     r0,[r0,#0]  ; ftinfo
00001e  28aa              CMP      r0,#0xaa
000020  d100              BNE      |L1.36|
000022  e004              B        |L1.46|
                  |L1.36|
;;;220    		delay_ms(20);
000024  2014              MOVS     r0,#0x14
000026  f7fffffe          BL       delay_ms
                  |L1.42|
00002a  2c0a              CMP      r4,#0xa               ;215
00002c  dbed              BLT      |L1.10|
                  |L1.46|
00002e  bf00              NOP                            ;219
;;;221    	}
;;;222    	if(ftinfo.fontok!=0XAA)return 1;
000030  4803              LDR      r0,|L1.64|
000032  7800              LDRB     r0,[r0,#0]  ; ftinfo
000034  28aa              CMP      r0,#0xaa
000036  d001              BEQ      |L1.60|
000038  2001              MOVS     r0,#1
                  |L1.58|
;;;223    	return 0;		    
;;;224    }
00003a  bd10              POP      {r4,pc}
                  |L1.60|
00003c  2000              MOVS     r0,#0                 ;223
00003e  e7fc              B        |L1.58|
;;;225    
                          ENDP

                  |L1.64|
                          DCD      ftinfo

                          AREA ||i.fupd_prog||, CODE, READONLY, ALIGN=2

                  fupd_prog PROC
;;;43     //pos:当前文件指针位置
;;;44     u32 fupd_prog(u16 x,u16 y,u8 size,u32 fsize,u32 pos)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;45     {
000004  ed2d8b02          VPUSH    {d8}
000008  b083              SUB      sp,sp,#0xc
00000a  4607              MOV      r7,r0
00000c  4688              MOV      r8,r1
00000e  4614              MOV      r4,r2
000010  461e              MOV      r6,r3
000012  eddd8a0c          VLDR     s17,[sp,#0x30]
;;;46     	float prog;
;;;47     	u8 t=0XFF;
000016  25ff              MOVS     r5,#0xff
;;;48     	prog=(float)pos/fsize;
000018  eef80a68          VCVT.F32.U32 s1,s17
00001c  ee006a10          VMOV     s0,r6
000020  eeb80a40          VCVT.F32.U32 s0,s0
000024  ee801a80          VDIV.F32 s2,s1,s0
000028  eeb08a41          VMOV.F32 s16,s2
;;;49     	prog*=100;
00002c  ed9f0a19          VLDR     s0,|L2.148|
000030  ee280a00          VMUL.F32 s0,s16,s0
000034  eeb08a40          VMOV.F32 s16,s0
;;;50     	if(t!=prog)
000038  ee005a10          VMOV     s0,r5
00003c  eeb80a40          VCVT.F32.U32 s0,s0
000040  eeb40a48          VCMP.F32 s0,s16
000044  eef1fa10          VMRS     APSR_nzcv,FPSCR
000048  d01e              BEQ      |L2.136|
;;;51     	{
;;;52     		LCD_ShowString(x+3*size/2,y,240,320,size,"%");		
00004a  a013              ADR      r0,|L2.152|
00004c  eb040944          ADD      r9,r4,r4,LSL #1
000050  eb0971d9          ADD      r1,r9,r9,LSR #31
000054  eb070161          ADD      r1,r7,r1,ASR #1
000058  e9cd4000          STRD     r4,r0,[sp,#0]
00005c  b288              UXTH     r0,r1
00005e  f44f73a0          MOV      r3,#0x140
000062  22f0              MOVS     r2,#0xf0
000064  4641              MOV      r1,r8
000066  f7fffffe          BL       LCD_ShowString
;;;53     		t=prog;
00006a  eebc0ac8          VCVT.U32.F32 s0,s16
00006e  ee100a10          VMOV     r0,s0
000072  b2c5              UXTB     r5,r0
;;;54     		if(t>100)t=100;
000074  2d64              CMP      r5,#0x64
000076  dd00              BLE      |L2.122|
000078  2564              MOVS     r5,#0x64
                  |L2.122|
;;;55     		LCD_ShowNum(x,y,t,3,size);//显示数值
00007a  2303              MOVS     r3,#3
00007c  462a              MOV      r2,r5
00007e  4641              MOV      r1,r8
000080  4638              MOV      r0,r7
000082  9400              STR      r4,[sp,#0]
000084  f7fffffe          BL       LCD_ShowNum
                  |L2.136|
;;;56     	}
;;;57     	return 0;					    
000088  2000              MOVS     r0,#0
;;;58     } 
00008a  b003              ADD      sp,sp,#0xc
00008c  ecbd8b02          VPOP     {d8}
000090  e8bd83f0          POP      {r4-r9,pc}
;;;59     //更新某一个
                          ENDP

                  |L2.148|
000094  42c80000          DCFS     0x42c80000 ; 100
                  |L2.152|
000098  2500              DCB      "%",0
00009a  00                DCB      0
00009b  00                DCB      0

                          AREA ||i.updata_fontx||, CODE, READONLY, ALIGN=2

                  updata_fontx PROC
;;;64     //返回值:0,成功;其他,失败.
;;;65     u8 updata_fontx(u16 x,u16 y,u8 size,u8 *fxpath,u8 fx)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;66     {
000004  b083              SUB      sp,sp,#0xc
000006  4681              MOV      r9,r0
000008  4698              MOV      r8,r3
00000a  f8dda040          LDR      r10,[sp,#0x40]
;;;67     	u32 flashaddr=0;								    
00000e  2000              MOVS     r0,#0
000010  9002              STR      r0,[sp,#8]
;;;68     	FIL * fftemp;
;;;69     	u8 *tempbuf;
;;;70      	u8 res;	
;;;71     	u16 bread;
;;;72     	u32 offx=0;
000012  2700              MOVS     r7,#0
;;;73     	u8 rval=0;	     
000014  4683              MOV      r11,r0
;;;74     	fftemp=(FIL*)mymalloc(SRAMIN,sizeof(FIL));	//分配内存	
000016  f44f710a          MOV      r1,#0x228
00001a  f7fffffe          BL       mymalloc
00001e  4604              MOV      r4,r0
;;;75     	if(fftemp==NULL)rval=1;
000020  b90c              CBNZ     r4,|L3.38|
000022  f04f0b01          MOV      r11,#1
                  |L3.38|
;;;76     	tempbuf=mymalloc(SRAMIN,4096);				//分配4096个字节空间
000026  f44f5180          MOV      r1,#0x1000
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       mymalloc
000030  4606              MOV      r6,r0
;;;77     	if(tempbuf==NULL)rval=1;
000032  b90e              CBNZ     r6,|L3.56|
000034  f04f0b01          MOV      r11,#1
                  |L3.56|
;;;78      	res=f_open(fftemp,(const TCHAR*)fxpath,FA_READ); 
000038  2201              MOVS     r2,#1
00003a  4641              MOV      r1,r8
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       f_open
000042  4605              MOV      r5,r0
;;;79      	if(res)rval=2;//打开文件失败  
000044  b10d              CBZ      r5,|L3.74|
000046  f04f0b02          MOV      r11,#2
                  |L3.74|
;;;80      	if(rval==0)	 
00004a  f1bb0f00          CMP      r11,#0
00004e  d178              BNE      |L3.322|
;;;81     	{
;;;82     		switch(fx)
000050  f1ba0f00          CMP      r10,#0
000054  d009              BEQ      |L3.106|
000056  f1ba0f01          CMP      r10,#1
00005a  d012              BEQ      |L3.130|
00005c  f1ba0f02          CMP      r10,#2
000060  d021              BEQ      |L3.166|
000062  f1ba0f03          CMP      r10,#3
000066  d142              BNE      |L3.238|
000068  e02f              B        |L3.202|
                  |L3.106|
;;;83     		{
;;;84     			case 0:												//更新UNIGBK.BIN
;;;85     				ftinfo.ugbkaddr=FONTINFOADDR+sizeof(ftinfo);	//信息头之后，紧跟UNIGBK转换码表
00006a  483c              LDR      r0,|L3.348|
00006c  493c              LDR      r1,|L3.352|
00006e  f8c10001          STR      r0,[r1,#1]  ; ftinfo
;;;86     				ftinfo.ugbksize=fftemp->fsize;					//UNIGBK大小
000072  68e0              LDR      r0,[r4,#0xc]
000074  f8c10005          STR      r0,[r1,#5]  ; ftinfo
;;;87     				flashaddr=ftinfo.ugbkaddr;
000078  4608              MOV      r0,r1
00007a  f8d00001          LDR      r0,[r0,#1]  ; ftinfo
00007e  9002              STR      r0,[sp,#8]
;;;88     				break;
000080  e035              B        |L3.238|
                  |L3.130|
;;;89     			case 1:
;;;90     				ftinfo.f12addr=ftinfo.ugbkaddr+ftinfo.ugbksize;	//UNIGBK之后，紧跟GBK12字库
000082  4837              LDR      r0,|L3.352|
000084  f8d00001          LDR      r0,[r0,#1]  ; ftinfo
000088  4935              LDR      r1,|L3.352|
00008a  f8d11005          LDR      r1,[r1,#5]  ; ftinfo
00008e  4408              ADD      r0,r0,r1
000090  4933              LDR      r1,|L3.352|
000092  f8c10009          STR      r0,[r1,#9]  ; ftinfo
;;;91     				ftinfo.gbk12size=fftemp->fsize;					//GBK12字库大小
000096  68e0              LDR      r0,[r4,#0xc]
000098  f8c1000d          STR      r0,[r1,#0xd]  ; ftinfo
;;;92     				flashaddr=ftinfo.f12addr;						//GBK12的起始地址
00009c  4608              MOV      r0,r1
00009e  f8d00009          LDR      r0,[r0,#9]  ; ftinfo
0000a2  9002              STR      r0,[sp,#8]
;;;93     				break;
0000a4  e023              B        |L3.238|
                  |L3.166|
;;;94     			case 2:
;;;95     				ftinfo.f16addr=ftinfo.f12addr+ftinfo.gbk12size;	//GBK12之后，紧跟GBK16字库
0000a6  482e              LDR      r0,|L3.352|
0000a8  f8d00009          LDR      r0,[r0,#9]  ; ftinfo
0000ac  492c              LDR      r1,|L3.352|
0000ae  f8d1100d          LDR      r1,[r1,#0xd]  ; ftinfo
0000b2  4408              ADD      r0,r0,r1
0000b4  492a              LDR      r1,|L3.352|
0000b6  f8c10011          STR      r0,[r1,#0x11]  ; ftinfo
;;;96     				ftinfo.gbk16size=fftemp->fsize;					//GBK16字库大小
0000ba  68e0              LDR      r0,[r4,#0xc]
0000bc  f8c10015          STR      r0,[r1,#0x15]  ; ftinfo
;;;97     				flashaddr=ftinfo.f16addr;						//GBK16的起始地址
0000c0  4608              MOV      r0,r1
0000c2  f8d00011          LDR      r0,[r0,#0x11]  ; ftinfo
0000c6  9002              STR      r0,[sp,#8]
;;;98     				break;
0000c8  e011              B        |L3.238|
                  |L3.202|
;;;99     			case 3:
;;;100    				ftinfo.f24addr=ftinfo.f16addr+ftinfo.gbk16size;	//GBK16之后，紧跟GBK24字库
0000ca  4825              LDR      r0,|L3.352|
0000cc  f8d00011          LDR      r0,[r0,#0x11]  ; ftinfo
0000d0  4923              LDR      r1,|L3.352|
0000d2  f8d11015          LDR      r1,[r1,#0x15]  ; ftinfo
0000d6  4408              ADD      r0,r0,r1
0000d8  4921              LDR      r1,|L3.352|
0000da  f8c10019          STR      r0,[r1,#0x19]  ; ftinfo
;;;101    				ftinfo.gkb24size=fftemp->fsize;					//GBK24字库大小
0000de  68e0              LDR      r0,[r4,#0xc]
0000e0  f8c1001d          STR      r0,[r1,#0x1d]  ; ftinfo
;;;102    				flashaddr=ftinfo.f24addr;						//GBK24的起始地址
0000e4  4608              MOV      r0,r1
0000e6  f8d00019          LDR      r0,[r0,#0x19]  ; ftinfo
0000ea  9002              STR      r0,[sp,#8]
;;;103    				break;
0000ec  bf00              NOP      
                  |L3.238|
0000ee  bf00              NOP                            ;88
;;;104    		} 
;;;105    			
;;;106    		while(res==FR_OK)//死循环执行
0000f0  e021              B        |L3.310|
                  |L3.242|
;;;107    		{
;;;108    	 		res=f_read(fftemp,tempbuf,4096,(UINT *)&bread);		//读取数据	 
0000f2  ab01              ADD      r3,sp,#4
0000f4  f44f5280          MOV      r2,#0x1000
0000f8  4631              MOV      r1,r6
0000fa  4620              MOV      r0,r4
0000fc  f7fffffe          BL       f_read
000100  4605              MOV      r5,r0
;;;109    			if(res!=FR_OK)break;								//执行错误
000102  b105              CBZ      r5,|L3.262|
000104  e019              B        |L3.314|
                  |L3.262|
;;;110    			W25QXX_Write(tempbuf,offx+flashaddr,4096);		//从0开始写入4096个数据  
000106  9802              LDR      r0,[sp,#8]
000108  1839              ADDS     r1,r7,r0
00010a  f44f5280          MOV      r2,#0x1000
00010e  4630              MOV      r0,r6
000110  f7fffffe          BL       W25QXX_Write
;;;111    	  		offx+=bread;	  
000114  f8bd0004          LDRH     r0,[sp,#4]
000118  4407              ADD      r7,r7,r0
;;;112    			fupd_prog(x,y,size,fftemp->fsize,offx);	 			//进度显示
00011a  9700              STR      r7,[sp,#0]
00011c  68e3              LDR      r3,[r4,#0xc]
00011e  4648              MOV      r0,r9
000120  e9dd1204          LDRD     r1,r2,[sp,#0x10]
000124  f7fffffe          BL       fupd_prog
;;;113    			if(bread!=4096)break;								//读完了.
000128  f8bd0004          LDRH     r0,[sp,#4]
00012c  f5b05f80          CMP      r0,#0x1000
000130  d001              BEQ      |L3.310|
000132  e002              B        |L3.314|
000134  e005              B        |L3.322|
                  |L3.310|
000136  2d00              CMP      r5,#0                 ;106
000138  d0db              BEQ      |L3.242|
                  |L3.314|
00013a  bf00              NOP                            ;109
;;;114    	 	} 	
;;;115    		f_close(fftemp);		
00013c  4620              MOV      r0,r4
00013e  f7fffffe          BL       f_close
                  |L3.322|
;;;116    	}			 
;;;117    	myfree(SRAMIN,fftemp);	//释放内存
000142  4621              MOV      r1,r4
000144  2000              MOVS     r0,#0
000146  f7fffffe          BL       myfree
;;;118    	myfree(SRAMIN,tempbuf);	//释放内存
00014a  4631              MOV      r1,r6
00014c  2000              MOVS     r0,#0
00014e  f7fffffe          BL       myfree
;;;119    	return res;
000152  4628              MOV      r0,r5
;;;120    } 
000154  b007              ADD      sp,sp,#0x1c
000156  e8bd8ff0          POP      {r4-r11,pc}
;;;121    //更新字体文件,UNIGBK,GBK12,GBK16,GBK24一起更新
                          ENDP

00015a  0000              DCW      0x0000
                  |L3.348|
                          DCD      0x00c00021
                  |L3.352|
                          DCD      ftinfo

                          AREA ||i.update_font||, CODE, READONLY, ALIGN=2

                  update_font PROC
;;;127    //		 其他,错误代码.	  
;;;128    u8 update_font(u16 x,u16 y,u8 size,u8* src)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;129    {	
000004  b083              SUB      sp,sp,#0xc
000006  4606              MOV      r6,r0
000008  4615              MOV      r5,r2
;;;130    	u8 *pname;
;;;131    	u32 *buf;
;;;132    	u8 res=0;		   
00000a  2400              MOVS     r4,#0
;;;133     	u16 i,j;
;;;134    	FIL *fftemp;
;;;135    	u8 rval=0; 
00000c  46a0              MOV      r8,r4
;;;136    	res=0XFF;		
00000e  24ff              MOVS     r4,#0xff
;;;137    	ftinfo.fontok=0XFF;
000010  20ff              MOVS     r0,#0xff
000012  49bf              LDR      r1,|L4.784|
000014  7008              STRB     r0,[r1,#0]
;;;138    	pname=mymalloc(SRAMIN,100);	//申请100字节内存  
000016  2164              MOVS     r1,#0x64
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       mymalloc
00001e  4682              MOV      r10,r0
;;;139    	buf=mymalloc(SRAMIN,4096);	//申请4K字节内存  
000020  f44f5180          MOV      r1,#0x1000
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       mymalloc
00002a  4683              MOV      r11,r0
;;;140    	fftemp=(FIL*)mymalloc(SRAMIN,sizeof(FIL));	//分配内存	
00002c  f44f710a          MOV      r1,#0x228
000030  2000              MOVS     r0,#0
000032  f7fffffe          BL       mymalloc
000036  9002              STR      r0,[sp,#8]
;;;141    	if(buf==NULL||pname==NULL||fftemp==NULL)
000038  f1bb0f00          CMP      r11,#0
00003c  d004              BEQ      |L4.72|
00003e  f1ba0f00          CMP      r10,#0
000042  d001              BEQ      |L4.72|
000044  9802              LDR      r0,[sp,#8]
000046  b978              CBNZ     r0,|L4.104|
                  |L4.72|
;;;142    	{
;;;143    		myfree(SRAMIN,fftemp);
000048  2000              MOVS     r0,#0
00004a  9902              LDR      r1,[sp,#8]
00004c  f7fffffe          BL       myfree
;;;144    		myfree(SRAMIN,pname);
000050  4651              MOV      r1,r10
000052  2000              MOVS     r0,#0
000054  f7fffffe          BL       myfree
;;;145    		myfree(SRAMIN,buf);
000058  4659              MOV      r1,r11
00005a  2000              MOVS     r0,#0
00005c  f7fffffe          BL       myfree
;;;146    		return 5;	//内存申请失败
000060  2005              MOVS     r0,#5
                  |L4.98|
;;;147    	}
;;;148    	//先查找文件是否正常 
;;;149    	strcpy((char*)pname,(char*)src);	//copy src内容到pname
;;;150    	strcat((char*)pname,(char*)UNIGBK_PATH); 
;;;151     	res=f_open(fftemp,(const TCHAR*)pname,FA_READ); 
;;;152     	if(res)rval|=1<<4;//打开文件失败  
;;;153    	strcpy((char*)pname,(char*)src);	//copy src内容到pname
;;;154    	strcat((char*)pname,(char*)GBK12_PATH); 
;;;155     	res=f_open(fftemp,(const TCHAR*)pname,FA_READ); 
;;;156     	if(res)rval|=1<<5;//打开文件失败  
;;;157    	strcpy((char*)pname,(char*)src);	//copy src内容到pname
;;;158    	strcat((char*)pname,(char*)GBK16_PATH); 
;;;159     	res=f_open(fftemp,(const TCHAR*)pname,FA_READ); 
;;;160     	if(res)rval|=1<<6;//打开文件失败  
;;;161    	strcpy((char*)pname,(char*)src);	//copy src内容到pname
;;;162    	strcat((char*)pname,(char*)GBK24_PATH); 
;;;163     	res=f_open(fftemp,(const TCHAR*)pname,FA_READ); 
;;;164     	if(res)rval|=1<<7;//打开文件失败   
;;;165    	myfree(SRAMIN,fftemp);//释放内存
;;;166    	if(rval==0)//字库文件都存在.
;;;167    	{  
;;;168    		LCD_ShowString(x,y,240,320,size,"Erasing sectors... ");//提示正在擦除扇区	
;;;169    		for(i=0;i<FONTSECSIZE;i++)	//先擦除字库区域,提高写入速度
;;;170    		{
;;;171    			fupd_prog(x+20*size/2,y,size,FONTSECSIZE,i);//进度显示
;;;172    			W25QXX_Read((u8*)buf,((FONTINFOADDR/4096)+i)*4096,4096);//读出整个扇区的内容
;;;173    			for(j=0;j<1024;j++)//校验数据
;;;174    			{
;;;175    				if(buf[j]!=0XFFFFFFFF)break;//需要擦除  	  
;;;176    			}
;;;177    			if(j!=1024)W25QXX_Erase_Sector((FONTINFOADDR/4096)+i);	//需要擦除的扇区
;;;178    		}
;;;179    		myfree(SRAMIN,buf);
;;;180    		LCD_ShowString(x,y,240,320,size,"Updating UNIGBK.BIN");		
;;;181    		strcpy((char*)pname,(char*)src);				//copy src内容到pname
;;;182    		strcat((char*)pname,(char*)UNIGBK_PATH); 
;;;183    		res=updata_fontx(x+20*size/2,y,size,pname,0);	//更新UNIGBK.BIN
;;;184    		if(res){myfree(SRAMIN,pname);return 1;}
;;;185    		LCD_ShowString(x,y,240,320,size,"Updating GBK12.BIN  ");
;;;186    		strcpy((char*)pname,(char*)src);				//copy src内容到pname
;;;187    		strcat((char*)pname,(char*)GBK12_PATH); 
;;;188    		res=updata_fontx(x+20*size/2,y,size,pname,1);	//更新GBK12.FON
;;;189    		if(res){myfree(SRAMIN,pname);return 2;}
;;;190    		LCD_ShowString(x,y,240,320,size,"Updating GBK16.BIN  ");
;;;191    		strcpy((char*)pname,(char*)src);				//copy src内容到pname
;;;192    		strcat((char*)pname,(char*)GBK16_PATH); 
;;;193    		res=updata_fontx(x+20*size/2,y,size,pname,2);	//更新GBK16.FON
;;;194    		if(res){myfree(SRAMIN,pname);return 3;}
;;;195    		LCD_ShowString(x,y,240,320,size,"Updating GBK24.BIN  ");
;;;196    		strcpy((char*)pname,(char*)src);				//copy src内容到pname
;;;197    		strcat((char*)pname,(char*)GBK24_PATH); 
;;;198    		res=updata_fontx(x+20*size/2,y,size,pname,3);	//更新GBK24.FON
;;;199    		if(res){myfree(SRAMIN,pname);return 4;}
;;;200    		//全部更新好了
;;;201    		ftinfo.fontok=0XAA;
;;;202    		W25QXX_Write((u8*)&ftinfo,FONTINFOADDR,sizeof(ftinfo));	//保存字库信息
;;;203    	}
;;;204    	myfree(SRAMIN,pname);//释放内存 
;;;205    	myfree(SRAMIN,buf);
;;;206    	return rval;//无错误.			 
;;;207    } 
000062  b007              ADD      sp,sp,#0x1c
000064  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.104|
000068  4650              MOV      r0,r10                ;149
00006a  9906              LDR      r1,[sp,#0x18]         ;149
00006c  f7fffffe          BL       strcpy
000070  48a8              LDR      r0,|L4.788|
000072  6801              LDR      r1,[r0,#0]            ;150  ; UNIGBK_PATH
000074  4650              MOV      r0,r10                ;150
000076  f7fffffe          BL       strcat
00007a  2201              MOVS     r2,#1                 ;151
00007c  4651              MOV      r1,r10                ;151
00007e  9802              LDR      r0,[sp,#8]            ;151
000080  f7fffffe          BL       f_open
000084  4604              MOV      r4,r0                 ;151
000086  b10c              CBZ      r4,|L4.140|
000088  f0480810          ORR      r8,r8,#0x10           ;152
                  |L4.140|
00008c  4650              MOV      r0,r10                ;153
00008e  9906              LDR      r1,[sp,#0x18]         ;153
000090  f7fffffe          BL       strcpy
000094  48a0              LDR      r0,|L4.792|
000096  6801              LDR      r1,[r0,#0]            ;154  ; GBK12_PATH
000098  4650              MOV      r0,r10                ;154
00009a  f7fffffe          BL       strcat
00009e  2201              MOVS     r2,#1                 ;155
0000a0  4651              MOV      r1,r10                ;155
0000a2  9802              LDR      r0,[sp,#8]            ;155
0000a4  f7fffffe          BL       f_open
0000a8  4604              MOV      r4,r0                 ;155
0000aa  b10c              CBZ      r4,|L4.176|
0000ac  f0480820          ORR      r8,r8,#0x20           ;156
                  |L4.176|
0000b0  4650              MOV      r0,r10                ;157
0000b2  9906              LDR      r1,[sp,#0x18]         ;157
0000b4  f7fffffe          BL       strcpy
0000b8  4898              LDR      r0,|L4.796|
0000ba  6801              LDR      r1,[r0,#0]            ;158  ; GBK16_PATH
0000bc  4650              MOV      r0,r10                ;158
0000be  f7fffffe          BL       strcat
0000c2  2201              MOVS     r2,#1                 ;159
0000c4  4651              MOV      r1,r10                ;159
0000c6  9802              LDR      r0,[sp,#8]            ;159
0000c8  f7fffffe          BL       f_open
0000cc  4604              MOV      r4,r0                 ;159
0000ce  b10c              CBZ      r4,|L4.212|
0000d0  f0480840          ORR      r8,r8,#0x40           ;160
                  |L4.212|
0000d4  4650              MOV      r0,r10                ;161
0000d6  9906              LDR      r1,[sp,#0x18]         ;161
0000d8  f7fffffe          BL       strcpy
0000dc  4890              LDR      r0,|L4.800|
0000de  6801              LDR      r1,[r0,#0]            ;162  ; GBK24_PATH
0000e0  4650              MOV      r0,r10                ;162
0000e2  f7fffffe          BL       strcat
0000e6  2201              MOVS     r2,#1                 ;163
0000e8  4651              MOV      r1,r10                ;163
0000ea  9802              LDR      r0,[sp,#8]            ;163
0000ec  f7fffffe          BL       f_open
0000f0  4604              MOV      r4,r0                 ;163
0000f2  b10c              CBZ      r4,|L4.248|
0000f4  f0480880          ORR      r8,r8,#0x80           ;164
                  |L4.248|
0000f8  2000              MOVS     r0,#0                 ;165
0000fa  9902              LDR      r1,[sp,#8]            ;165
0000fc  f7fffffe          BL       myfree
000100  f1b80f00          CMP      r8,#0                 ;166
000104  d16f              BNE      |L4.486|
000106  a087              ADR      r0,|L4.804|
000108  f44f73a0          MOV      r3,#0x140             ;168
00010c  22f0              MOVS     r2,#0xf0              ;168
00010e  e9cd5000          STRD     r5,r0,[sp,#0]         ;168
000112  4630              MOV      r0,r6                 ;168
000114  9904              LDR      r1,[sp,#0x10]         ;168
000116  f7fffffe          BL       LCD_ShowString
00011a  2700              MOVS     r7,#0                 ;169
00011c  e030              B        |L4.384|
                  |L4.286|
00011e  eb050185          ADD      r1,r5,r5,LSL #2       ;171
000122  0089              LSLS     r1,r1,#2              ;171
000124  e9cd7100          STRD     r7,r1,[sp,#0]         ;171
000128  eb0171d1          ADD      r1,r1,r1,LSR #31      ;171
00012c  eb060161          ADD      r1,r6,r1,ASR #1       ;171
000130  b288              UXTH     r0,r1                 ;171
000132  f2403317          MOV      r3,#0x317             ;171
000136  462a              MOV      r2,r5                 ;171
000138  9904              LDR      r1,[sp,#0x10]         ;171
00013a  f7fffffe          BL       fupd_prog
00013e  f5076040          ADD      r0,r7,#0xc00          ;172
000142  0301              LSLS     r1,r0,#12             ;172
000144  f44f5280          MOV      r2,#0x1000            ;172
000148  4658              MOV      r0,r11                ;172
00014a  f7fffffe          BL       W25QXX_Read
00014e  f04f0900          MOV      r9,#0                 ;173
000152  e008              B        |L4.358|
                  |L4.340|
000154  f85b0029          LDR      r0,[r11,r9,LSL #2]    ;175
000158  1c40              ADDS     r0,r0,#1              ;175
00015a  b100              CBZ      r0,|L4.350|
00015c  e006              B        |L4.364|
                  |L4.350|
00015e  f1090001          ADD      r0,r9,#1              ;173
000162  fa1ff980          UXTH     r9,r0                 ;173
                  |L4.358|
000166  f5b96f80          CMP      r9,#0x400             ;173
00016a  dbf3              BLT      |L4.340|
                  |L4.364|
00016c  bf00              NOP                            ;175
00016e  f5b96f80          CMP      r9,#0x400             ;177
000172  d003              BEQ      |L4.380|
000174  f5076040          ADD      r0,r7,#0xc00          ;177
000178  f7fffffe          BL       W25QXX_Erase_Sector
                  |L4.380|
00017c  1c78              ADDS     r0,r7,#1              ;169
00017e  b287              UXTH     r7,r0                 ;169
                  |L4.384|
000180  f2403017          MOV      r0,#0x317             ;169
000184  4287              CMP      r7,r0                 ;169
000186  dbca              BLT      |L4.286|
000188  4659              MOV      r1,r11                ;179
00018a  2000              MOVS     r0,#0                 ;179
00018c  f7fffffe          BL       myfree
000190  a069              ADR      r0,|L4.824|
000192  f44f73a0          MOV      r3,#0x140             ;180
000196  22f0              MOVS     r2,#0xf0              ;180
000198  e9cd5000          STRD     r5,r0,[sp,#0]         ;180
00019c  4630              MOV      r0,r6                 ;180
00019e  9904              LDR      r1,[sp,#0x10]         ;180
0001a0  f7fffffe          BL       LCD_ShowString
0001a4  4650              MOV      r0,r10                ;181
0001a6  9906              LDR      r1,[sp,#0x18]         ;181
0001a8  f7fffffe          BL       strcpy
0001ac  4859              LDR      r0,|L4.788|
0001ae  6801              LDR      r1,[r0,#0]            ;182  ; UNIGBK_PATH
0001b0  4650              MOV      r0,r10                ;182
0001b2  f7fffffe          BL       strcat
0001b6  2000              MOVS     r0,#0                 ;183
0001b8  eb050185          ADD      r1,r5,r5,LSL #2       ;183
0001bc  0089              LSLS     r1,r1,#2              ;183
0001be  e9cd0100          STRD     r0,r1,[sp,#0]         ;183
0001c2  eb0171d1          ADD      r1,r1,r1,LSR #31      ;183
0001c6  eb060161          ADD      r1,r6,r1,ASR #1       ;183
0001ca  b288              UXTH     r0,r1                 ;183
0001cc  4653              MOV      r3,r10                ;183
0001ce  462a              MOV      r2,r5                 ;183
0001d0  9904              LDR      r1,[sp,#0x10]         ;183
0001d2  f7fffffe          BL       updata_fontx
0001d6  4604              MOV      r4,r0                 ;183
0001d8  b134              CBZ      r4,|L4.488|
0001da  4651              MOV      r1,r10                ;184
0001dc  2000              MOVS     r0,#0                 ;184
0001de  f7fffffe          BL       myfree
0001e2  2001              MOVS     r0,#1                 ;184
0001e4  e73d              B        |L4.98|
                  |L4.486|
0001e6  e089              B        |L4.764|
                  |L4.488|
0001e8  a058              ADR      r0,|L4.844|
0001ea  f44f73a0          MOV      r3,#0x140             ;185
0001ee  22f0              MOVS     r2,#0xf0              ;185
0001f0  e9cd5000          STRD     r5,r0,[sp,#0]         ;185
0001f4  4630              MOV      r0,r6                 ;185
0001f6  9904              LDR      r1,[sp,#0x10]         ;185
0001f8  f7fffffe          BL       LCD_ShowString
0001fc  4650              MOV      r0,r10                ;186
0001fe  9906              LDR      r1,[sp,#0x18]         ;186
000200  f7fffffe          BL       strcpy
000204  4844              LDR      r0,|L4.792|
000206  6801              LDR      r1,[r0,#0]            ;187  ; GBK12_PATH
000208  4650              MOV      r0,r10                ;187
00020a  f7fffffe          BL       strcat
00020e  2001              MOVS     r0,#1                 ;188
000210  eb050185          ADD      r1,r5,r5,LSL #2       ;188
000214  0089              LSLS     r1,r1,#2              ;188
000216  e9cd0100          STRD     r0,r1,[sp,#0]         ;188
00021a  eb0171d1          ADD      r1,r1,r1,LSR #31      ;188
00021e  eb060161          ADD      r1,r6,r1,ASR #1       ;188
000222  b288              UXTH     r0,r1                 ;188
000224  4653              MOV      r3,r10                ;188
000226  462a              MOV      r2,r5                 ;188
000228  9904              LDR      r1,[sp,#0x10]         ;188
00022a  f7fffffe          BL       updata_fontx
00022e  4604              MOV      r4,r0                 ;188
000230  b12c              CBZ      r4,|L4.574|
000232  4651              MOV      r1,r10                ;189
000234  2000              MOVS     r0,#0                 ;189
000236  f7fffffe          BL       myfree
00023a  2002              MOVS     r0,#2                 ;189
00023c  e711              B        |L4.98|
                  |L4.574|
00023e  a049              ADR      r0,|L4.868|
000240  f44f73a0          MOV      r3,#0x140             ;190
000244  22f0              MOVS     r2,#0xf0              ;190
000246  e9cd5000          STRD     r5,r0,[sp,#0]         ;190
00024a  4630              MOV      r0,r6                 ;190
00024c  9904              LDR      r1,[sp,#0x10]         ;190
00024e  f7fffffe          BL       LCD_ShowString
000252  4650              MOV      r0,r10                ;191
000254  9906              LDR      r1,[sp,#0x18]         ;191
000256  f7fffffe          BL       strcpy
00025a  4830              LDR      r0,|L4.796|
00025c  6801              LDR      r1,[r0,#0]            ;192  ; GBK16_PATH
00025e  4650              MOV      r0,r10                ;192
000260  f7fffffe          BL       strcat
000264  2002              MOVS     r0,#2                 ;193
000266  eb050185          ADD      r1,r5,r5,LSL #2       ;193
00026a  0089              LSLS     r1,r1,#2              ;193
00026c  e9cd0100          STRD     r0,r1,[sp,#0]         ;193
000270  eb0171d1          ADD      r1,r1,r1,LSR #31      ;193
000274  eb060161          ADD      r1,r6,r1,ASR #1       ;193
000278  b288              UXTH     r0,r1                 ;193
00027a  4653              MOV      r3,r10                ;193
00027c  462a              MOV      r2,r5                 ;193
00027e  9904              LDR      r1,[sp,#0x10]         ;193
000280  f7fffffe          BL       updata_fontx
000284  4604              MOV      r4,r0                 ;193
000286  b12c              CBZ      r4,|L4.660|
000288  4651              MOV      r1,r10                ;194
00028a  2000              MOVS     r0,#0                 ;194
00028c  f7fffffe          BL       myfree
000290  2003              MOVS     r0,#3                 ;194
000292  e6e6              B        |L4.98|
                  |L4.660|
000294  a039              ADR      r0,|L4.892|
000296  f44f73a0          MOV      r3,#0x140             ;195
00029a  22f0              MOVS     r2,#0xf0              ;195
00029c  e9cd5000          STRD     r5,r0,[sp,#0]         ;195
0002a0  4630              MOV      r0,r6                 ;195
0002a2  9904              LDR      r1,[sp,#0x10]         ;195
0002a4  f7fffffe          BL       LCD_ShowString
0002a8  4650              MOV      r0,r10                ;196
0002aa  9906              LDR      r1,[sp,#0x18]         ;196
0002ac  f7fffffe          BL       strcpy
0002b0  481b              LDR      r0,|L4.800|
0002b2  6801              LDR      r1,[r0,#0]            ;197  ; GBK24_PATH
0002b4  4650              MOV      r0,r10                ;197
0002b6  f7fffffe          BL       strcat
0002ba  2003              MOVS     r0,#3                 ;198
0002bc  eb050185          ADD      r1,r5,r5,LSL #2       ;198
0002c0  0089              LSLS     r1,r1,#2              ;198
0002c2  e9cd0100          STRD     r0,r1,[sp,#0]         ;198
0002c6  eb0171d1          ADD      r1,r1,r1,LSR #31      ;198
0002ca  eb060161          ADD      r1,r6,r1,ASR #1       ;198
0002ce  b288              UXTH     r0,r1                 ;198
0002d0  4653              MOV      r3,r10                ;198
0002d2  462a              MOV      r2,r5                 ;198
0002d4  9904              LDR      r1,[sp,#0x10]         ;198
0002d6  f7fffffe          BL       updata_fontx
0002da  4604              MOV      r4,r0                 ;198
0002dc  b12c              CBZ      r4,|L4.746|
0002de  4651              MOV      r1,r10                ;199
0002e0  2000              MOVS     r0,#0                 ;199
0002e2  f7fffffe          BL       myfree
0002e6  2004              MOVS     r0,#4                 ;199
0002e8  e6bb              B        |L4.98|
                  |L4.746|
0002ea  20aa              MOVS     r0,#0xaa              ;201
0002ec  4908              LDR      r1,|L4.784|
0002ee  7008              STRB     r0,[r1,#0]            ;201
0002f0  2221              MOVS     r2,#0x21              ;202
0002f2  f44f0140          MOV      r1,#0xc00000          ;202
0002f6  4806              LDR      r0,|L4.784|
0002f8  f7fffffe          BL       W25QXX_Write
                  |L4.764|
0002fc  4651              MOV      r1,r10                ;204
0002fe  2000              MOVS     r0,#0                 ;204
000300  f7fffffe          BL       myfree
000304  4659              MOV      r1,r11                ;205
000306  2000              MOVS     r0,#0                 ;205
000308  f7fffffe          BL       myfree
00030c  4640              MOV      r0,r8                 ;206
00030e  e6a8              B        |L4.98|
;;;208    //初始化字体
                          ENDP

                  |L4.784|
                          DCD      ftinfo
                  |L4.788|
                          DCD      UNIGBK_PATH
                  |L4.792|
                          DCD      GBK12_PATH
                  |L4.796|
                          DCD      GBK16_PATH
                  |L4.800|
                          DCD      GBK24_PATH
                  |L4.804|
000324  45726173          DCB      "Erasing sectors... ",0
000328  696e6720
00032c  73656374
000330  6f72732e
000334  2e2e2000
                  |L4.824|
000338  55706461          DCB      "Updating UNIGBK.BIN",0
00033c  74696e67
000340  20554e49
000344  47424b2e
000348  42494e00
                  |L4.844|
00034c  55706461          DCB      "Updating GBK12.BIN  ",0
000350  74696e67
000354  2047424b
000358  31322e42
00035c  494e2020
000360  00      
000361  00                DCB      0
000362  00                DCB      0
000363  00                DCB      0
                  |L4.868|
000364  55706461          DCB      "Updating GBK16.BIN  ",0
000368  74696e67
00036c  2047424b
000370  31362e42
000374  494e2020
000378  00      
000379  00                DCB      0
00037a  00                DCB      0
00037b  00                DCB      0
                  |L4.892|
00037c  55706461          DCB      "Updating GBK24.BIN  ",0
000380  74696e67
000384  2047424b
000388  32342e42
00038c  494e2020
000390  00      
000391  00                DCB      0
000392  00                DCB      0
000393  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ftinfo
                          %        33

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  GBK24_PATH
                          DCD      ||.conststring||
                  GBK16_PATH
                          DCD      ||.conststring||+0x18
                  GBK12_PATH
                          DCD      ||.conststring||+0x30
                  UNIGBK_PATH
                          DCD      ||.conststring||+0x48

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  2f535953          DCB      "/SYSTEM/FONT/GBK24.FON",0
000004  54454d2f
000008  464f4e54
00000c  2f47424b
000010  32342e46
000014  4f4e00  
000017  00                DCB      0
000018  2f535953          DCB      "/SYSTEM/FONT/GBK16.FON",0
00001c  54454d2f
000020  464f4e54
000024  2f47424b
000028  31362e46
00002c  4f4e00  
00002f  00                DCB      0
000030  2f535953          DCB      "/SYSTEM/FONT/GBK12.FON",0
000034  54454d2f
000038  464f4e54
00003c  2f47424b
000040  31322e46
000044  4f4e00  
000047  00                DCB      0
000048  2f535953          DCB      "/SYSTEM/FONT/UNIGBK.BIN",0
00004c  54454d2f
000050  464f4e54
000054  2f554e49
000058  47424b2e
00005c  42494e00

;*** Start embedded assembler ***

#line 1 "..\\TEXT\\fontupd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_fontupd_c_1dae91e8____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___9_fontupd_c_1dae91e8____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_fontupd_c_1dae91e8____REVSH|
#line 144
|__asm___9_fontupd_c_1dae91e8____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
