; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\b_statemachine.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\b_statemachine.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\HARDWARE\LED -I..\HARDWARE\LCD -I..\HARDWARE\KEY -I..\HARDWARE\SRAM -I..\HARDWARE\SDIO -I..\MALLOC -I..\USMART -I..\HARDWARE\SPI -I..\HARDWARE\W25QXX -I..\FATFS\exfuns -I..\FATFS\src -I..\TEXT -I..\FWLIB\inc -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\I2S -I..\HARDWARE\WM8978 -I..\APP -I..\AUDIOCODEC\wav -I..\new_user -I..\new_user\task -I..\new_user\MVC -I..\..\..\module\common -I..\..\..\module\common\InsertLog -I..\..\..\module\common\loopqueue -I..\..\..\module\common\StateMachine -I..\..\..\module\common\priorityqueue -I..\..\..\module\common\Math -I..\..\..\module\component\const_loop_scheduler -I..\..\..\module\component\const_loop_scheduler\TemplateTask -I..\..\..\module\component\const_loop_scheduler\HierarchicalSM -I..\..\..\module\component\BlockableStateMachine -I..\..\..\module\customize\ButtonModule -I..\..\..\module\external\Segger\SEGGER_RTT_V640\Syscalls -I..\..\..\module\external\Segger\SEGGER_RTT_V640\RTT -I.\RTE\_AudioPlayer -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include" -I"D:\Program Files\ARM\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_COMPILER_PRESENT -DX_TASK_LOG_DEBUG_METHOD=SeggerRTT_LogDebug --omf_browse=..\obj\b_statemachine.crf ..\..\..\module\component\BlockableStateMachine\b_StateMachine.c]
                          THUMB

                          AREA ||i.BSM_Run||, CODE, READONLY, ALIGN=1

                  BSM_Run PROC
;;;2      
;;;3      X_Boolean BSM_Run( const s_B_StateMachine *p_bsm,s_BSM_Param *p_param_base,uint32_t ms)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4      {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;5          StateNumber temp_state;
;;;6      
;;;7      	if(p_bsm == (s_B_StateMachine *)0 || p_param_base == (s_BSM_Param *)0) {return X_False;}
00000a  b104              CBZ      r4,|L1.14|
00000c  b916              CBNZ     r6,|L1.20|
                  |L1.14|
00000e  2000              MOVS     r0,#0
                  |L1.16|
;;;8      	if(p_bsm->p_Action_buf == (BSM_Action *)0){return X_False;}    // no need pointer check ?
;;;9      	if(p_bsm->TotalStateNum > MAX_B_STATE_NUMBER || p_bsm->TotalStateNum == 0) {return X_False;}
;;;10     
;;;11         // 1,load cur state from innear or outside suddenchange 
;;;12     	temp_state = (*p_bsm->p_CurrentStateNum);
;;;13     	if(p_bsm ->is_state_self_ctrl != X_True 
;;;14                     && *p_bsm ->p_SuddenChangeState < p_bsm->TotalStateNum) 
;;;15     	{
;;;16     		temp_state = *p_bsm ->p_SuddenChangeState;
;;;17     		*p_bsm ->p_SuddenChangeState = INVALID_B_STATE_NUMBER;
;;;18     	}
;;;19     
;;;20     	if(p_bsm ->p_Action_buf[temp_state] != (BSM_Action)0)
;;;21     	{
;;;22             // 2,run cur_state action , get next state 
;;;23     		p_param_base->cur_state = temp_state;
;;;24     		temp_state = p_bsm ->p_Action_buf[temp_state](p_param_base,ms); 
;;;25     		
;;;26             // 3,restore next state 
;;;27     
;;;28             if(temp_state == B_STATE_NUMBER_STILL)
;;;29             {
;;;30                 temp_state = p_param_base->cur_state;
;;;31             }
;;;32             else
;;;33             {
;;;34                 p_param_base -> cur_line_num = 0;
;;;35             }
;;;36     
;;;37     		if(temp_state >= p_bsm->TotalStateNum)
;;;38     		{
;;;39     			(*p_bsm->p_CurrentStateNum) = DEFAULT_B_STATE_NUMBER;
;;;40     			return X_False;
;;;41     		}
;;;42     		(*p_bsm->p_CurrentStateNum) = temp_state;
;;;43     		
;;;44             return X_True;
;;;45     	}
;;;46     	return X_False;
;;;47     }
000010  e8bd81f0          POP      {r4-r8,pc}
                  |L1.20|
000014  68a0              LDR      r0,[r4,#8]            ;8
000016  b908              CBNZ     r0,|L1.28|
000018  2000              MOVS     r0,#0                 ;8
00001a  e7f9              B        |L1.16|
                  |L1.28|
00001c  7820              LDRB     r0,[r4,#0]            ;9
00001e  28fd              CMP      r0,#0xfd              ;9
000020  dc01              BGT      |L1.38|
000022  7820              LDRB     r0,[r4,#0]            ;9
000024  b908              CBNZ     r0,|L1.42|
                  |L1.38|
000026  2000              MOVS     r0,#0                 ;9
000028  e7f2              B        |L1.16|
                  |L1.42|
00002a  68e0              LDR      r0,[r4,#0xc]          ;12
00002c  7805              LDRB     r5,[r0,#0]            ;12
00002e  6860              LDR      r0,[r4,#4]            ;13
000030  2801              CMP      r0,#1                 ;13
000032  d009              BEQ      |L1.72|
000034  6920              LDR      r0,[r4,#0x10]         ;14
000036  7800              LDRB     r0,[r0,#0]            ;14
000038  7821              LDRB     r1,[r4,#0]            ;14
00003a  4288              CMP      r0,r1                 ;14
00003c  da04              BGE      |L1.72|
00003e  6920              LDR      r0,[r4,#0x10]         ;16
000040  7805              LDRB     r5,[r0,#0]            ;16
000042  20ff              MOVS     r0,#0xff              ;17
000044  6921              LDR      r1,[r4,#0x10]         ;17
000046  7008              STRB     r0,[r1,#0]            ;17
                  |L1.72|
000048  68a0              LDR      r0,[r4,#8]            ;20
00004a  f8500025          LDR      r0,[r0,r5,LSL #2]     ;20
00004e  b1c0              CBZ      r0,|L1.130|
000050  7035              STRB     r5,[r6,#0]            ;23
000052  68a0              LDR      r0,[r4,#8]            ;24
000054  f8502025          LDR      r2,[r0,r5,LSL #2]     ;24
000058  4639              MOV      r1,r7                 ;24
00005a  4630              MOV      r0,r6                 ;24
00005c  4790              BLX      r2                    ;24
00005e  4605              MOV      r5,r0                 ;24
000060  2dfe              CMP      r5,#0xfe              ;28
000062  d101              BNE      |L1.104|
000064  7835              LDRB     r5,[r6,#0]            ;30
000066  e001              B        |L1.108|
                  |L1.104|
000068  2000              MOVS     r0,#0                 ;34
00006a  60b0              STR      r0,[r6,#8]            ;34
                  |L1.108|
00006c  7820              LDRB     r0,[r4,#0]            ;37
00006e  42a8              CMP      r0,r5                 ;37
000070  dc03              BGT      |L1.122|
000072  2000              MOVS     r0,#0                 ;39
000074  68e1              LDR      r1,[r4,#0xc]          ;39
000076  7008              STRB     r0,[r1,#0]            ;39
000078  e7ca              B        |L1.16|
                  |L1.122|
00007a  68e0              LDR      r0,[r4,#0xc]          ;42
00007c  7005              STRB     r5,[r0,#0]            ;42
00007e  2001              MOVS     r0,#1                 ;44
000080  e7c6              B        |L1.16|
                  |L1.130|
000082  2000              MOVS     r0,#0                 ;46
000084  e7c4              B        |L1.16|
;;;48     
                          ENDP


                          AREA ||i.BSM_SetState||, CODE, READONLY, ALIGN=1

                  BSM_SetState PROC
;;;48     
;;;49     X_Boolean BSM_SetState(const s_B_StateMachine *p_bsm,StateNumber state)
000000  4602              MOV      r2,r0
;;;50     {
;;;51         if(p_bsm == (s_B_StateMachine *)0) {return X_False;}
000002  b90a              CBNZ     r2,|L2.8|
000004  2000              MOVS     r0,#0
                  |L2.6|
;;;52         if(p_bsm ->is_state_self_ctrl == X_True)  {return X_False;}
;;;53     	if((state + 1) > p_bsm->TotalStateNum ) {return X_False;}
;;;54     	*p_bsm ->p_SuddenChangeState = state;
;;;55     	return X_True;
;;;56     }
000006  4770              BX       lr
                  |L2.8|
000008  6850              LDR      r0,[r2,#4]            ;52
00000a  2801              CMP      r0,#1                 ;52
00000c  d101              BNE      |L2.18|
00000e  2000              MOVS     r0,#0                 ;52
000010  e7f9              B        |L2.6|
                  |L2.18|
000012  7813              LDRB     r3,[r2,#0]            ;53
000014  1c48              ADDS     r0,r1,#1              ;53
000016  4283              CMP      r3,r0                 ;53
000018  da01              BGE      |L2.30|
00001a  2000              MOVS     r0,#0                 ;53
00001c  e7f3              B        |L2.6|
                  |L2.30|
00001e  6910              LDR      r0,[r2,#0x10]         ;54
000020  7001              STRB     r1,[r0,#0]            ;54
000022  2001              MOVS     r0,#1                 ;55
000024  e7ef              B        |L2.6|
                          ENDP

