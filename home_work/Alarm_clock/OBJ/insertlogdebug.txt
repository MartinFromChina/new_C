; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\insertlogdebug.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\insertlogdebug.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\HARDWARE\LED -I..\HARDWARE\LCD -I..\HARDWARE\KEY -I..\HARDWARE\SRAM -I..\HARDWARE\SDIO -I..\MALLOC -I..\USMART -I..\HARDWARE\SPI -I..\HARDWARE\W25QXX -I..\FATFS\exfuns -I..\FATFS\src -I..\TEXT -I..\FWLIB\inc -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\I2S -I..\HARDWARE\WM8978 -I..\APP -I..\AUDIOCODEC\wav -I..\new_user -I..\new_user\task -I..\new_user\MVC -I..\..\..\module\common -I..\..\..\module\common\InsertLog -I..\..\..\module\common\loopqueue -I..\..\..\module\common\StateMachine -I..\..\..\module\common\priorityqueue -I..\..\..\module\common\Math -I..\..\..\module\component\const_loop_scheduler -I..\..\..\module\component\const_loop_scheduler\TemplateTask -I..\..\..\module\component\const_loop_scheduler\HierarchicalSM -I..\..\..\module\component\BlockableStateMachine -I..\..\..\module\customize\ButtonModule -I..\..\..\module\external\Segger\SEGGER_RTT_V640\Syscalls -I..\..\..\module\external\Segger\SEGGER_RTT_V640\RTT -I.\RTE\_AudioPlayer -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include" -I"D:\Program Files\ARM\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_COMPILER_PRESENT -DX_TASK_LOG_DEBUG_METHOD=SeggerRTT_LogDebug --omf_browse=..\obj\insertlogdebug.crf ..\..\..\module\common\InsertLog\InsertLogDebug.c]
                          THUMB

                          AREA ||i.CounterEntryCheck||, CODE, READONLY, ALIGN=1

                  CounterEntryCheck PROC
;;;14     
;;;15     X_Boolean CounterEntryCheck(uint32_t *backup_entry,uint32_t counter_limit){
000000  4602              MOV      r2,r0
;;;16     	if(backup_entry == X_Null) {return X_False;}
000002  b90a              CBNZ     r2,|L1.8|
000004  2000              MOVS     r0,#0
                  |L1.6|
;;;17     	if(counter_limit < 1){return X_False;}
;;;18     
;;;19     	if(*backup_entry == 0)
;;;20     	{
;;;21     		*backup_entry = 1;
;;;22     		return X_True;
;;;23     	}
;;;24     
;;;25     	if(*backup_entry < (counter_limit - 1)) {(*backup_entry) ++ ;}
;;;26     	else {*backup_entry = 0 ;}
;;;27     	return X_False;
;;;28     }
000006  4770              BX       lr
                  |L1.8|
000008  b909              CBNZ     r1,|L1.14|
00000a  2000              MOVS     r0,#0                 ;17
00000c  e7fb              B        |L1.6|
                  |L1.14|
00000e  6810              LDR      r0,[r2,#0]            ;19
000010  b910              CBNZ     r0,|L1.24|
000012  2001              MOVS     r0,#1                 ;21
000014  6010              STR      r0,[r2,#0]            ;21
000016  e7f6              B        |L1.6|
                  |L1.24|
000018  1e48              SUBS     r0,r1,#1              ;25
00001a  6813              LDR      r3,[r2,#0]            ;25
00001c  4283              CMP      r3,r0                 ;25
00001e  d203              BCS      |L1.40|
000020  6810              LDR      r0,[r2,#0]            ;25
000022  1c40              ADDS     r0,r0,#1              ;25
000024  6010              STR      r0,[r2,#0]            ;25
000026  e001              B        |L1.44|
                  |L1.40|
000028  2000              MOVS     r0,#0                 ;26
00002a  6010              STR      r0,[r2,#0]            ;26
                  |L1.44|
00002c  2000              MOVS     r0,#0                 ;27
00002e  e7ea              B        |L1.6|
;;;29     /***************************************/
                          ENDP


                          AREA ||i.OnceEntryCheck||, CODE, READONLY, ALIGN=1

                  OnceEntryCheck PROC
;;;4      
;;;5      X_Boolean OnceEntryCheck(uint16_t *backup_entry,uint16_t new_value) {
000000  4602              MOV      r2,r0
;;;6      	if(backup_entry == X_Null) {return X_False;}
000002  b90a              CBNZ     r2,|L2.8|
000004  2000              MOVS     r0,#0
                  |L2.6|
;;;7      	if(*backup_entry != new_value)
;;;8      	{
;;;9      		*backup_entry = new_value;
;;;10     		return X_True;
;;;11     	}
;;;12     	return X_False;
;;;13     }
000006  4770              BX       lr
                  |L2.8|
000008  8810              LDRH     r0,[r2,#0]            ;7
00000a  4288              CMP      r0,r1                 ;7
00000c  d002              BEQ      |L2.20|
00000e  8011              STRH     r1,[r2,#0]            ;9
000010  2001              MOVS     r0,#1                 ;10
000012  e7f8              B        |L2.6|
                  |L2.20|
000014  2000              MOVS     r0,#0                 ;12
000016  e7f6              B        |L2.6|
;;;14     
                          ENDP


                          AREA ||i.insert_CounterEntryValueSet||, CODE, READONLY, ALIGN=1

                  insert_CounterEntryValueSet PROC
;;;34     }
;;;35     X_Void insert_CounterEntryValueSet(uint32_t * p_entry,uint32_t value)
000000  b100              CBZ      r0,|L3.4|
;;;36     
;;;37     {
;;;38     	if(p_entry != X_Null) {*p_entry = value;}
000002  6001              STR      r1,[r0,#0]
                  |L3.4|
;;;39     }
000004  4770              BX       lr
;;;40     
                          ENDP


                          AREA ||i.insert_LogDebugInit||, CODE, READONLY, ALIGN=2

                  insert_LogDebugInit PROC
;;;40     
;;;41     X_Void insert_LogDebugInit(X_Boolean  (*Log_method_init)(log_func *pp_func_reg))
000000  b510              PUSH     {r4,lr}
;;;42     {
000002  4604              MOV      r4,r0
;;;43     	if(Log_method_init == X_Null) {return;}
000004  b904              CBNZ     r4,|L4.8|
                  |L4.6|
;;;44         Log_method_init(&p_log_func);
;;;45     }
000006  bd10              POP      {r4,pc}
                  |L4.8|
000008  4801              LDR      r0,|L4.16|
00000a  47a0              BLX      r4                    ;44
00000c  bf00              NOP      
00000e  e7fa              B        |L4.6|
;;;46     
                          ENDP

                  |L4.16|
                          DCD      p_log_func

                          AREA ||i.insert_OnceEntryValueSet||, CODE, READONLY, ALIGN=1

                  insert_OnceEntryValueSet PROC
;;;30     
;;;31     X_Void insert_OnceEntryValueSet(uint16_t * p_entry,uint16_t value)
000000  b100              CBZ      r0,|L5.4|
;;;32     {
;;;33     	if(p_entry != X_Null) {*p_entry = value;}
000002  8001              STRH     r1,[r0,#0]
                  |L5.4|
;;;34     }
000004  4770              BX       lr
;;;35     X_Void insert_CounterEntryValueSet(uint32_t * p_entry,uint32_t value)
                          ENDP


                          AREA ||i.log_printf||, CODE, READONLY, ALIGN=2

                  log_printf PROC
;;;46     
;;;47     int log_printf(const char * sFormat, ...)
000000  b40f              PUSH     {r0-r3}
;;;48     {
000002  b538              PUSH     {r3-r5,lr}
;;;49     	int r = 10;
000004  240a              MOVS     r4,#0xa
;;;50     	va_list ParamList;
;;;51     	if(p_log_func != X_Null)
000006  4808              LDR      r0,|L6.40|
000008  6800              LDR      r0,[r0,#0]  ; p_log_func
00000a  b148              CBZ      r0,|L6.32|
;;;52     	{
;;;53     		va_start(ParamList, sFormat);
00000c  a805              ADD      r0,sp,#0x14
00000e  9000              STR      r0,[sp,#0]
;;;54     		r = p_log_func(sFormat, ParamList);
000010  4a05              LDR      r2,|L6.40|
000012  9900              LDR      r1,[sp,#0]
000014  9804              LDR      r0,[sp,#0x10]
000016  6812              LDR      r2,[r2,#0]  ; p_log_func
000018  4790              BLX      r2
00001a  4604              MOV      r4,r0
;;;55     		va_end(ParamList);
00001c  2000              MOVS     r0,#0
00001e  9000              STR      r0,[sp,#0]
                  |L6.32|
;;;56     	}
;;;57     	return r;
000020  4620              MOV      r0,r4
;;;58     }
000022  bc38              POP      {r3-r5}
000024  f85dfb14          LDR      pc,[sp],#0x14
;;;59     /***************************************/
                          ENDP

                  |L6.40|
                          DCD      p_log_func

                          AREA ||i.remove_CounterEntryValueSet||, CODE, READONLY, ALIGN=1

                  remove_CounterEntryValueSet PROC
;;;60     X_Void remove_OnceEntryValueSet(uint16_t * p_entry,uint16_t value){UNUSED_PARAMETER(p_entry);UNUSED_PARAMETER(value);}
;;;61     X_Void remove_CounterEntryValueSet(uint32_t * p_entry,uint32_t value){UNUSED_PARAMETER(p_entry);UNUSED_PARAMETER(value);}									
000000  4770              BX       lr
;;;62     X_Void remove_LogDebugInit(X_Boolean  (*Log_method_init)(log_func *pp_func_reg)){UNUSED_PARAMETER(Log_method_init);}
                          ENDP


                          AREA ||i.remove_LogDebugInit||, CODE, READONLY, ALIGN=1

                  remove_LogDebugInit PROC
;;;61     X_Void remove_CounterEntryValueSet(uint32_t * p_entry,uint32_t value){UNUSED_PARAMETER(p_entry);UNUSED_PARAMETER(value);}									
;;;62     X_Void remove_LogDebugInit(X_Boolean  (*Log_method_init)(log_func *pp_func_reg)){UNUSED_PARAMETER(Log_method_init);}
000000  4770              BX       lr
;;;63     
                          ENDP


                          AREA ||i.remove_OnceEntryValueSet||, CODE, READONLY, ALIGN=1

                  remove_OnceEntryValueSet PROC
;;;59     /***************************************/
;;;60     X_Void remove_OnceEntryValueSet(uint16_t * p_entry,uint16_t value){UNUSED_PARAMETER(p_entry);UNUSED_PARAMETER(value);}
000000  4770              BX       lr
;;;61     X_Void remove_CounterEntryValueSet(uint32_t * p_entry,uint32_t value){UNUSED_PARAMETER(p_entry);UNUSED_PARAMETER(value);}									
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  p_log_func
                          DCD      0x00000000
