; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\mtestmode.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\mtestmode.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\HARDWARE\LED -I..\HARDWARE\LCD -I..\HARDWARE\KEY -I..\HARDWARE\SRAM -I..\HARDWARE\SDIO -I..\MALLOC -I..\USMART -I..\HARDWARE\SPI -I..\HARDWARE\W25QXX -I..\FATFS\exfuns -I..\FATFS\src -I..\TEXT -I..\FWLIB\inc -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\I2S -I..\HARDWARE\WM8978 -I..\APP -I..\AUDIOCODEC\wav -I..\new_user -I..\new_user\task -I..\new_user\MVC -I..\..\..\module\common -I..\..\..\module\common\InsertLog -I..\..\..\module\common\loopqueue -I..\..\..\module\common\StateMachine -I..\..\..\module\common\priorityqueue -I..\..\..\module\common\Math -I..\..\..\module\component\const_loop_scheduler -I..\..\..\module\component\const_loop_scheduler\TemplateTask -I..\..\..\module\component\const_loop_scheduler\HierarchicalSM -I..\..\..\module\component\BlockableStateMachine -I..\..\..\module\customize\ButtonModule -I..\..\..\module\external\Segger\SEGGER_RTT_V640\Syscalls -I..\..\..\module\external\Segger\SEGGER_RTT_V640\RTT -I.\RTE\_AudioPlayer -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include" -I"D:\Program Files\ARM\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_COMPILER_PRESENT -DX_TASK_LOG_DEBUG_METHOD=SeggerRTT_LogDebug --omf_browse=..\obj\mtestmode.crf ..\..\..\module\customize\TestModeConsole\mTestMode.c]
                          THUMB

                          AREA ||i.DoesCommandThatNotBelongTestRoutine||, CODE, READONLY, ALIGN=2

                  DoesCommandThatNotBelongTestRoutine PROC
;;;25     /****************************************************************************************/
;;;26     static X_Boolean DoesCommandThatNotBelongTestRoutine(uint8_t *p_command,uint16_t compare_length)
000000  b570              PUSH     {r4-r6,lr}
;;;27     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;28        if(memcmp(p_command,"ENTER",5) == 0) {return X_True;}
000006  2205              MOVS     r2,#5
000008  a108              ADR      r1,|L1.44|
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       memcmp
000010  b908              CBNZ     r0,|L1.22|
000012  2001              MOVS     r0,#1
                  |L1.20|
;;;29     	 if(memcmp(p_command,"EXIT",4) == 0) {return X_True;}
;;;30     	 return X_False;
;;;31     }
000014  bd70              POP      {r4-r6,pc}
                  |L1.22|
000016  2204              MOVS     r2,#4                 ;29
000018  a106              ADR      r1,|L1.52|
00001a  4620              MOV      r0,r4                 ;29
00001c  f7fffffe          BL       memcmp
000020  b908              CBNZ     r0,|L1.38|
000022  2001              MOVS     r0,#1                 ;29
000024  e7f6              B        |L1.20|
                  |L1.38|
000026  2000              MOVS     r0,#0                 ;30
000028  e7f4              B        |L1.20|
;;;32     /**********************************************************************************************************************************
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
00002c  454e5445          DCB      "ENTER",0
000030  5200    
000032  00                DCB      0
000033  00                DCB      0
                  |L1.52|
000034  45584954          DCB      "EXIT",0
000038  00      
000039  00                DCB      0
00003a  00                DCB      0
00003b  00                DCB      0

                          AREA ||i.GetRountineEventNum||, CODE, READONLY, ALIGN=2

                  GetRountineEventNum PROC
;;;518    
;;;519    static uint8_t GetRountineEventNum(sTestModeParamExtern *p_extern)
000000  b570              PUSH     {r4-r6,lr}
;;;520    {
000002  4604              MOV      r4,r0
;;;521    	uint8_t i,num;
;;;522    	num = 0;
000004  2600              MOVS     r6,#0
;;;523    	for(i=0;i< p_extern ->command_table_size;i++)
000006  2500              MOVS     r5,#0
000008  e012              B        |L2.48|
                  |L2.10|
;;;524    	{
;;;525    		num ++;
00000a  1c70              ADDS     r0,r6,#1
00000c  b2c6              UXTB     r6,r0
;;;526    		if(memcmp(TEST_MODE_CMD_ROUTINE_END_STRING,p_extern ->p_command_table[i].command_string,p_extern ->p_command_table[i].compare_length) == 0)
00000e  f8d407f8          LDR      r0,[r4,#0x7f8]
000012  eb001005          ADD      r0,r0,r5,LSL #4
000016  7a42              LDRB     r2,[r0,#9]
000018  f8d407f8          LDR      r0,[r4,#0x7f8]
00001c  eb001005          ADD      r0,r0,r5,LSL #4
000020  6841              LDR      r1,[r0,#4]
000022  a00b              ADR      r0,|L2.80|
000024  f7fffffe          BL       memcmp
000028  b900              CBNZ     r0,|L2.44|
;;;527    		{
;;;528    			break;
00002a  e005              B        |L2.56|
                  |L2.44|
00002c  1c68              ADDS     r0,r5,#1              ;523
00002e  b2c5              UXTB     r5,r0                 ;523
                  |L2.48|
000030  f8b407fc          LDRH     r0,[r4,#0x7fc]        ;523
000034  42a8              CMP      r0,r5                 ;523
000036  dce8              BGT      |L2.10|
                  |L2.56|
000038  bf00              NOP      
;;;529    		}
;;;530    	}
;;;531    	
;;;532    	if(i >= p_extern ->command_table_size || num <= 1) {return 0;}
00003a  f8b407fc          LDRH     r0,[r4,#0x7fc]
00003e  42a8              CMP      r0,r5
000040  dd01              BLE      |L2.70|
000042  2e01              CMP      r6,#1
000044  dc01              BGT      |L2.74|
                  |L2.70|
000046  2000              MOVS     r0,#0
                  |L2.72|
;;;533    	return (num - 1);
;;;534    }
000048  bd70              POP      {r4-r6,pc}
                  |L2.74|
00004a  1e70              SUBS     r0,r6,#1              ;533
00004c  b2c0              UXTB     r0,r0                 ;533
00004e  e7fb              B        |L2.72|
;;;535    StateNumber TM_RUNALL_todo(s_StateMachineParam *p_base)
                          ENDP

                  |L2.80|
000050  52554e41          DCB      "RUNALL",0
000054  4c4c00  
000057  00                DCB      0

                          AREA ||i.StateJumpRecorder||, CODE, READONLY, ALIGN=1

                  StateJumpRecorder PROC
;;;231    *********************************************************************************************************************************/
;;;232    static X_Void StateJumpRecorder(StateNumber state_going_to_leave,StateNumber state_going_to_enter){}
000000  4770              BX       lr
;;;233    static X_Void StopAllProcessInit(s_StateMachineParam *p_this)
                          ENDP


                          AREA ||i.StopAllProcessInit||, CODE, READONLY, ALIGN=1

                  StopAllProcessInit PROC
;;;232    static X_Void StateJumpRecorder(StateNumber state_going_to_leave,StateNumber state_going_to_enter){}
;;;233    static X_Void StopAllProcessInit(s_StateMachineParam *p_this)
000000  b570              PUSH     {r4-r6,lr}
;;;234    {
000002  4604              MOV      r4,r0
;;;235    	// no need null pointer check ,because the only caller is me 
;;;236    	sTestModeParamExtern *p_ext = (sTestModeParamExtern*)p_this;
000004  4625              MOV      r5,r4
;;;237    	p_ext ->test_mode_hold_cnt = p_ext ->test_mode_hold_time_in_ms;
000006  f8d50810          LDR      r0,[r5,#0x810]
00000a  f8c5081c          STR      r0,[r5,#0x81c]
;;;238    	
;;;239    	p_ext ->recovery            = (tm_recovery_method)0;
00000e  2000              MOVS     r0,#0
000010  f8c507e8          STR      r0,[r5,#0x7e8]
;;;240    	p_ext ->onWait              = (tm_onWait)0;
000014  f8c507ec          STR      r0,[r5,#0x7ec]
;;;241    	p_ext ->onError             = (tm_onError)0;
000018  f8c507f0          STR      r0,[r5,#0x7f0]
;;;242    	p_ext ->wait_counter        = 0;
00001c  f8c507e4          STR      r0,[r5,#0x7e4]
;;;243    	p_ext ->routine_cnt         = 0;
000020  f8a50820          STRH     r0,[r5,#0x820]
;;;244    	p_ext ->failed_cnt          = 0;
000024  f88507f4          STRB     r0,[r5,#0x7f4]
;;;245    	p_ext ->successed_cnt       = 0;
000028  f88507f5          STRB     r0,[r5,#0x7f5]
;;;246    	p_ext ->routine_cnt         = 0;
00002c  f8a50820          STRH     r0,[r5,#0x820]
;;;247    	p_ext ->dot_cnt             = 0;
000030  f8a50822          STRH     r0,[r5,#0x822]
;;;248    //////////	p_ext ->isInSpecialMode     = X_False;  // no need
;;;249    	p_ext ->isDotPrintDisable   = X_False;
000034  60e8              STR      r0,[r5,#0xc]
;;;250    	p_ext ->isNewCommandCome    = X_False;
000036  f8c50814          STR      r0,[r5,#0x814]
;;;251    	
;;;252    	if(p_ext ->kill_all_method != X_Null) {p_ext ->kill_all_method();}
00003a  f8d5080c          LDR      r0,[r5,#0x80c]
00003e  b110              CBZ      r0,|L4.70|
000040  f8d5080c          LDR      r0,[r5,#0x80c]
000044  4780              BLX      r0
                  |L4.70|
;;;253    }
000046  bd70              POP      {r4-r6,pc}
;;;254    static X_Boolean TM_find_header(sTestModeRecvParam *p_recv,uint8_t current_data)
                          ENDP


                          AREA ||i.TM_CommandAnalysisAction||, CODE, READONLY, ALIGN=2

                  TM_CommandAnalysisAction PROC
;;;53     *********************************************************************************************************************************/
;;;54     StateNumber TM_CommandAnalysisAction(s_StateMachineParam *p_this)
000000  b570              PUSH     {r4-r6,lr}
;;;55     {
000002  4606              MOV      r6,r0
;;;56     	uint8_t i;
;;;57     	sTestModeParamExtern *p_ext = (sTestModeParamExtern *)p_this;
000004  4634              MOV      r4,r6
;;;58     	
;;;59     	if(p_ext ->isNewCommandCome == X_True)
000006  f8d40814          LDR      r0,[r4,#0x814]
00000a  2801              CMP      r0,#1
00000c  d17c              BNE      |L5.264|
;;;60     	{
;;;61     		for(i=0;i<p_ext -> command_table_size;i++)
00000e  2500              MOVS     r5,#0
000010  e065              B        |L5.222|
                  |L5.18|
;;;62     		{
;;;63     						if((p_ext ->temp_command_length == p_ext ->p_command_table[i].length || p_ext ->p_command_table[i].length == TM_LENGTH_DONT_CARE) &&
000012  f8d407f8          LDR      r0,[r4,#0x7f8]
000016  eb001005          ADD      r0,r0,r5,LSL #4
00001a  7a00              LDRB     r0,[r0,#8]
00001c  f8b417e0          LDRH     r1,[r4,#0x7e0]
000020  4288              CMP      r0,r1
000022  d006              BEQ      |L5.50|
000024  f8d407f8          LDR      r0,[r4,#0x7f8]
000028  eb001005          ADD      r0,r0,r5,LSL #4
00002c  7a00              LDRB     r0,[r0,#8]
00002e  28ff              CMP      r0,#0xff
000030  d153              BNE      |L5.218|
                  |L5.50|
;;;64     						(memcmp(p_ext ->temp_command_buf, p_ext ->p_command_table[i].command_string,p_ext ->p_command_table[i].compare_length) == 0))
000032  f8d407f8          LDR      r0,[r4,#0x7f8]
000036  eb001005          ADD      r0,r0,r5,LSL #4
00003a  7a42              LDRB     r2,[r0,#9]
00003c  f8d407f8          LDR      r0,[r4,#0x7f8]
000040  eb001005          ADD      r0,r0,r5,LSL #4
000044  6841              LDR      r1,[r0,#4]
000046  f1040010          ADD      r0,r4,#0x10
00004a  f7fffffe          BL       memcmp
00004e  2800              CMP      r0,#0
000050  d143              BNE      |L5.218|
;;;65     			{
;;;66     				
;;;67     				if(p_ext ->p_command_table[i].isSpecialModeOnly == X_True)
000052  f8d407f8          LDR      r0,[r4,#0x7f8]
000056  eb001005          ADD      r0,r0,r5,LSL #4
00005a  6800              LDR      r0,[r0,#0]
00005c  2801              CMP      r0,#1
00005e  d110              BNE      |L5.130|
;;;68     				{
;;;69     					if(p_ext ->isInSpecialMode == X_False)
000060  f8d40818          LDR      r0,[r4,#0x818]
000064  b948              CBNZ     r0,|L5.122|
;;;70     					{
;;;71     						TmLogPrintf(TEST_MODE_BASIC_LOG_DEBUG,(p_ext ->send_buf_method," please enter test mode first!!!\r\n"));
000066  bf00              NOP      
000068  a131              ADR      r1,|L5.304|
00006a  6860              LDR      r0,[r4,#4]
00006c  f7fffffe          BL       mTM_SendString
000070  bf00              NOP      
;;;72     						p_ext ->isNewCommandCome = X_False;
000072  2000              MOVS     r0,#0
000074  f8c40814          STR      r0,[r4,#0x814]
;;;73     						break;
000078  e035              B        |L5.230|
                  |L5.122|
;;;74     					}
;;;75     					else
;;;76     					{
;;;77     						p_ext ->test_mode_hold_cnt = p_ext ->test_mode_hold_time_in_ms;
00007a  f8d40810          LDR      r0,[r4,#0x810]
00007e  f8c4081c          STR      r0,[r4,#0x81c]
                  |L5.130|
;;;78     					}
;;;79     				}
;;;80     				
;;;81     				if(p_ext ->p_command_table[i].todo != X_Null) 
000082  f8d407f8          LDR      r0,[r4,#0x7f8]
000086  eb001005          ADD      r0,r0,r5,LSL #4
00008a  68c0              LDR      r0,[r0,#0xc]
00008c  b300              CBZ      r0,|L5.208|
;;;82     				{
;;;83     					if(DoesCommandThatNotBelongTestRoutine(p_ext ->temp_command_buf,p_ext ->p_command_table[i].compare_length) == X_False)
00008e  f8d407f8          LDR      r0,[r4,#0x7f8]
000092  eb001005          ADD      r0,r0,r5,LSL #4
000096  7a41              LDRB     r1,[r0,#9]
000098  f1040010          ADD      r0,r4,#0x10
00009c  f7fffffe          BL       DoesCommandThatNotBelongTestRoutine
0000a0  b928              CBNZ     r0,|L5.174|
;;;84     					{
;;;85     						TmLogPrintf(TEST_MODE_BASIC_LOG_DEBUG,(p_ext ->send_buf_method,"\r\n ( Begin Test Rountine ) \r\n"));
0000a2  bf00              NOP      
0000a4  a12b              ADR      r1,|L5.340|
0000a6  6860              LDR      r0,[r4,#4]
0000a8  f7fffffe          BL       mTM_SendString
0000ac  bf00              NOP      
                  |L5.174|
;;;86     					}
;;;87     					p_ext ->failed_cnt = 0;
0000ae  2000              MOVS     r0,#0
0000b0  f50464fd          ADD      r4,r4,#0x7e8
0000b4  7320              STRB     r0,[r4,#0xc]
;;;88     					p_ext ->successed_cnt = 0;
0000b6  7360              STRB     r0,[r4,#0xd]
;;;89     					p_ext ->recovery = (tm_recovery_method)0;
0000b8  6020              STR      r0,[r4,#0]
;;;90     					p_ext ->onWait   = (tm_onWait)0;
0000ba  6060              STR      r0,[r4,#4]
;;;91     					p_ext ->onError  = (tm_onError)0;
0000bc  60a0              STR      r0,[r4,#8]
;;;92     					return p_ext ->p_command_table[i].todo(p_this);
0000be  6920              LDR      r0,[r4,#0x10]
0000c0  f5a464fd          SUB      r4,r4,#0x7e8
0000c4  eb001005          ADD      r0,r0,r5,LSL #4
0000c8  68c1              LDR      r1,[r0,#0xc]
0000ca  4630              MOV      r0,r6
0000cc  4788              BLX      r1
                  |L5.206|
;;;93     				}
;;;94     				p_ext ->isNewCommandCome = X_False;
;;;95     				return p_this->current_state;
;;;96     			}
;;;97     		}
;;;98     		
;;;99     		if(i >= p_ext -> command_table_size) 
;;;100    		{
;;;101    			if(p_ext ->temp_command_length <= (MAX_TEST_MODE_COMMAND_LENGTH - 1))
;;;102    			{
;;;103    				p_ext ->temp_command_buf[p_ext ->temp_command_length] = ' ';
;;;104    			}
;;;105    			else
;;;106    			{
;;;107    				p_ext ->temp_command_buf[(MAX_TEST_MODE_COMMAND_LENGTH - 1)] = ' ';
;;;108    			}
;;;109    			TmLogPrintf(TEST_MODE_BASIC_LOG_DEBUG,(p_ext ->send_buf_method," Unrecognized TestMode Command !!! : %s\r\n"
;;;110    			,p_ext ->temp_command_buf));		
;;;111    			p_ext ->isNewCommandCome = X_False;
;;;112    		}
;;;113    		return p_this->current_state;	 
;;;114    	}
;;;115    
;;;116    	return p_this->current_state;	 
;;;117    }
0000ce  bd70              POP      {r4-r6,pc}
                  |L5.208|
0000d0  2000              MOVS     r0,#0                 ;94
0000d2  f8c40814          STR      r0,[r4,#0x814]        ;94
0000d6  7830              LDRB     r0,[r6,#0]            ;95
0000d8  e7f9              B        |L5.206|
                  |L5.218|
0000da  1c68              ADDS     r0,r5,#1              ;61
0000dc  b2c5              UXTB     r5,r0                 ;61
                  |L5.222|
0000de  f8b407fc          LDRH     r0,[r4,#0x7fc]        ;61
0000e2  42a8              CMP      r0,r5                 ;61
0000e4  dc95              BGT      |L5.18|
                  |L5.230|
0000e6  bf00              NOP                            ;73
0000e8  f8b407fc          LDRH     r0,[r4,#0x7fc]        ;99
0000ec  42a8              CMP      r0,r5                 ;99
0000ee  dc1a              BGT      |L5.294|
0000f0  f8b407e0          LDRH     r0,[r4,#0x7e0]        ;101
0000f4  f5b06ffa          CMP      r0,#0x7d0             ;101
0000f8  da07              BGE      |L5.266|
0000fa  2120              MOVS     r1,#0x20              ;103
0000fc  f8b427e0          LDRH     r2,[r4,#0x7e0]        ;103
000100  f1040010          ADD      r0,r4,#0x10           ;103
000104  5481              STRB     r1,[r0,r2]            ;103
000106  e003              B        |L5.272|
                  |L5.264|
000108  e00f              B        |L5.298|
                  |L5.266|
00010a  2120              MOVS     r1,#0x20              ;107
00010c  f88417df          STRB     r1,[r4,#0x7df]        ;107
                  |L5.272|
000110  bf00              NOP                            ;109
000112  f1040210          ADD      r2,r4,#0x10           ;109
000116  a117              ADR      r1,|L5.372|
000118  6860              LDR      r0,[r4,#4]            ;109
00011a  f7fffffe          BL       mTM_SendString
00011e  bf00              NOP                            ;109
000120  2000              MOVS     r0,#0                 ;111
000122  f8c40814          STR      r0,[r4,#0x814]        ;111
                  |L5.294|
000126  7830              LDRB     r0,[r6,#0]            ;113
000128  e7d1              B        |L5.206|
                  |L5.298|
00012a  7830              LDRB     r0,[r6,#0]            ;116
00012c  e7cf              B        |L5.206|
;;;118    /**********************************************************************************************************************************
                          ENDP

00012e  0000              DCW      0x0000
                  |L5.304|
000130  20706c65          DCB      " please enter test mode first!!!\r\n",0
000134  61736520
000138  656e7465
00013c  72207465
000140  7374206d
000144  6f646520
000148  66697273
00014c  74212121
000150  0d0a00  
000153  00                DCB      0
                  |L5.340|
000154  0d0a2028          DCB      "\r\n ( Begin Test Rountine ) \r\n",0
000158  20426567
00015c  696e2054
000160  65737420
000164  526f756e
000168  74696e65
00016c  2029200d
000170  0a00    
000172  00                DCB      0
000173  00                DCB      0
                  |L5.372|
000174  20556e72          DCB      " Unrecognized TestMode Command !!! : %s\r\n",0
000178  65636f67
00017c  6e697a65
000180  64205465
000184  73744d6f
000188  64652043
00018c  6f6d6d61
000190  6e642021
000194  2121203a
000198  2025730d
00019c  0a00    
00019e  00                DCB      0
00019f  00                DCB      0

                          AREA ||i.TM_DoCommandRoutineAction||, CODE, READONLY, ALIGN=1

                  TM_DoCommandRoutineAction PROC
;;;120    *********************************************************************************************************************************/
;;;121    StateNumber TM_DoCommandRoutineAction(s_StateMachineParam *p_this)
000000  b570              PUSH     {r4-r6,lr}
;;;122    {
000002  4605              MOV      r5,r0
;;;123    	sTestModeParamExtern *p_ext = (sTestModeParamExtern *)p_this;
000004  462c              MOV      r4,r5
;;;124    	uint8_t index = (p_ext ->routine_cnt >= 1) ? (p_ext ->routine_cnt - 1)  : 0 ;
000006  f8b40820          LDRH     r0,[r4,#0x820]
00000a  2801              CMP      r0,#1
00000c  db03              BLT      |L6.22|
00000e  f8b40820          LDRH     r0,[r4,#0x820]
000012  1e40              SUBS     r0,r0,#1
000014  e000              B        |L6.24|
                  |L6.22|
000016  2000              MOVS     r0,#0
                  |L6.24|
000018  b2c6              UXTB     r6,r0
;;;125    	
;;;126    	if(p_ext ->routine_cnt >= 1) {p_ext ->routine_cnt --;}
00001a  f8b40820          LDRH     r0,[r4,#0x820]
00001e  2801              CMP      r0,#1
000020  db04              BLT      |L6.44|
000022  f8b40820          LDRH     r0,[r4,#0x820]
000026  1e40              SUBS     r0,r0,#1
000028  f8a40820          STRH     r0,[r4,#0x820]
                  |L6.44|
;;;127    	
;;;128    	if(index < p_ext ->command_table_size)
00002c  f8b407fc          LDRH     r0,[r4,#0x7fc]
000030  42b0              CMP      r0,r6
000032  dd0f              BLE      |L6.84|
;;;129    	{
;;;130    		if(p_ext ->p_command_table[index].todo != X_Null) 
000034  f8d407f8          LDR      r0,[r4,#0x7f8]
000038  eb001006          ADD      r0,r0,r6,LSL #4
00003c  68c0              LDR      r0,[r0,#0xc]
00003e  b138              CBZ      r0,|L6.80|
;;;131    		{
;;;132    			return p_ext ->p_command_table[index].todo(p_this);
000040  f8d407f8          LDR      r0,[r4,#0x7f8]
000044  eb001006          ADD      r0,r0,r6,LSL #4
000048  68c1              LDR      r1,[r0,#0xc]
00004a  4628              MOV      r0,r5
00004c  4788              BLX      r1
                  |L6.78|
;;;133    		}
;;;134    		return p_this ->current_state;
;;;135    	}
;;;136    	else
;;;137    	{
;;;138    		p_ext ->routine_cnt = p_ext ->command_table_size;
;;;139    	}
;;;140    	return p_this ->current_state;
;;;141    }
00004e  bd70              POP      {r4-r6,pc}
                  |L6.80|
000050  7828              LDRB     r0,[r5,#0]            ;134
000052  e7fc              B        |L6.78|
                  |L6.84|
000054  f8b407fc          LDRH     r0,[r4,#0x7fc]        ;138
000058  f8a40820          STRH     r0,[r4,#0x820]        ;138
00005c  7828              LDRB     r0,[r5,#0]            ;140
00005e  e7f6              B        |L6.78|
;;;142    /**********************************************************************************************************************************
                          ENDP


                          AREA ||i.TM_ENTER_todo||, CODE, READONLY, ALIGN=2

                  TM_ENTER_todo PROC
;;;540    }
;;;541    StateNumber TM_ENTER_todo(s_StateMachineParam *p_base)
000000  b570              PUSH     {r4-r6,lr}
;;;542    {
000002  4604              MOV      r4,r0
;;;543    	sTestModeParamExtern *p_ext = (sTestModeParamExtern *)p_base;
000004  4625              MOV      r5,r4
;;;544    	p_ext ->isInSpecialMode = X_True;
000006  2001              MOVS     r0,#1
000008  f8c50818          STR      r0,[r5,#0x818]
;;;545    	
;;;546    	p_ext ->test_mode_hold_cnt = p_ext ->test_mode_hold_time_in_ms;
00000c  f8d50810          LDR      r0,[r5,#0x810]
000010  f8c5081c          STR      r0,[r5,#0x81c]
;;;547    	if(p_ext ->enter_method!= X_Null) {p_ext ->enter_method();}
000014  f8d50804          LDR      r0,[r5,#0x804]
000018  b110              CBZ      r0,|L7.32|
00001a  f8d50804          LDR      r0,[r5,#0x804]
00001e  4780              BLX      r0
                  |L7.32|
;;;548    	TmLogPrintf(TEST_MODE_BASIC_LOG_DEBUG,(p_ext ->send_buf_method,"@ enter test mode !\r\n"));
000020  bf00              NOP      
000022  a103              ADR      r1,|L7.48|
000024  6868              LDR      r0,[r5,#4]
000026  f7fffffe          BL       mTM_SendString
00002a  bf00              NOP      
;;;549    	return TM_SpecialCmdFinish;
00002c  2005              MOVS     r0,#5
;;;550    }
00002e  bd70              POP      {r4-r6,pc}
;;;551    StateNumber TM_EXIT_todo(s_StateMachineParam *p_base)
                          ENDP

                  |L7.48|
000030  4020656e          DCB      "@ enter test mode !\r\n",0
000034  74657220
000038  74657374
00003c  206d6f64
000040  6520210d
000044  0a00    
000046  00                DCB      0
000047  00                DCB      0

                          AREA ||i.TM_EXIT_todo||, CODE, READONLY, ALIGN=2

                  TM_EXIT_todo PROC
;;;550    }
;;;551    StateNumber TM_EXIT_todo(s_StateMachineParam *p_base)
000000  b570              PUSH     {r4-r6,lr}
;;;552    {
000002  4604              MOV      r4,r0
;;;553    	sTestModeParamExtern *p_ext = (sTestModeParamExtern *)p_base;
000004  4625              MOV      r5,r4
;;;554    	p_ext ->isInSpecialMode = X_False;
000006  2000              MOVS     r0,#0
000008  f8c50818          STR      r0,[r5,#0x818]
;;;555    	if(p_ext ->exit_method!= X_Null) {p_ext ->exit_method();}
00000c  f8d50808          LDR      r0,[r5,#0x808]
000010  b110              CBZ      r0,|L8.24|
000012  f8d50808          LDR      r0,[r5,#0x808]
000016  4780              BLX      r0
                  |L8.24|
;;;556    	TmLogPrintf(TEST_MODE_BASIC_LOG_DEBUG,(p_ext ->send_buf_method,"@ exit test mode !!!\r\n"));
000018  bf00              NOP      
00001a  a103              ADR      r1,|L8.40|
00001c  6868              LDR      r0,[r5,#4]
00001e  f7fffffe          BL       mTM_SendString
000022  bf00              NOP      
;;;557    	return TM_SpecialCmdFinish;
000024  2005              MOVS     r0,#5
;;;558    }
000026  bd70              POP      {r4-r6,pc}
;;;559    
                          ENDP

                  |L8.40|
000028  40206578          DCB      "@ exit test mode !!!\r\n",0
00002c  69742074
000030  65737420
000034  6d6f6465
000038  20212121
00003c  0d0a00  
00003f  00                DCB      0

                          AREA ||i.TM_FinishAction||, CODE, READONLY, ALIGN=2

                  TM_FinishAction PROC
;;;202    *********************************************************************************************************************************/
;;;203    StateNumber TM_FinishAction(s_StateMachineParam *p_this)
000000  b570              PUSH     {r4-r6,lr}
;;;204    {
000002  4605              MOV      r5,r0
;;;205    	sTestModeParamExtern *p_ext = (sTestModeParamExtern *)p_this;
000004  462c              MOV      r4,r5
;;;206    	if(p_ext ->recovery != X_Null) {p_ext ->recovery();}
000006  f8d407e8          LDR      r0,[r4,#0x7e8]
00000a  b110              CBZ      r0,|L9.18|
00000c  f8d407e8          LDR      r0,[r4,#0x7e8]
000010  4780              BLX      r0
                  |L9.18|
;;;207    	if(p_ext ->routine_cnt > 0)
000012  f8b40820          LDRH     r0,[r4,#0x820]
000016  2800              CMP      r0,#0
000018  dd01              BLE      |L9.30|
;;;208    	{
;;;209    		return TM_DoCommandRoutine;
00001a  2002              MOVS     r0,#2
                  |L9.28|
;;;210    	}
;;;211    	else
;;;212    	{
;;;213    		p_ext ->isNewCommandCome = X_False;
;;;214    		p_ext ->isDotPrintDisable = X_False;
;;;215    		TmLogPrintf(TEST_MODE_BASIC_LOG_DEBUG,(p_ext ->send_buf_method,
;;;216    								"\r\n ( Test Rountine Finished ): \r\n[ %d PASSED ] \r\n[ %d FAILED ] \r\n"
;;;217    								,p_ext ->successed_cnt,p_ext ->failed_cnt));
;;;218    	}
;;;219    	return TM_CommandAnalysis;
;;;220    }
00001c  bd70              POP      {r4-r6,pc}
                  |L9.30|
00001e  2000              MOVS     r0,#0                 ;213
000020  f8c40814          STR      r0,[r4,#0x814]        ;213
000024  60e0              STR      r0,[r4,#0xc]          ;214
000026  bf00              NOP                            ;215
000028  f89437f4          LDRB     r3,[r4,#0x7f4]        ;215
00002c  f89427f5          LDRB     r2,[r4,#0x7f5]        ;215
000030  4903              LDR      r1,|L9.64|
000032  6860              LDR      r0,[r4,#4]            ;215
000034  f7fffffe          BL       mTM_SendString
000038  bf00              NOP                            ;215
00003a  2001              MOVS     r0,#1                 ;219
00003c  e7ee              B        |L9.28|
;;;221    /**********************************************************************************************************************************
                          ENDP

00003e  0000              DCW      0x0000
                  |L9.64|
                          DCD      ||.conststring||

                          AREA ||i.TM_IdleAction||, CODE, READONLY, ALIGN=1

                  TM_IdleAction PROC
;;;34     *********************************************************************************************************************************/
;;;35     StateNumber TM_IdleAction(s_StateMachineParam *p_this)
000000  4601              MOV      r1,r0
;;;36     {
;;;37     	sTestModeParamExtern *p_ext = (sTestModeParamExtern *)p_this;
000002  460a              MOV      r2,r1
;;;38     	p_ext ->recovery            = (tm_recovery_method)0;
000004  2000              MOVS     r0,#0
000006  f8c207e8          STR      r0,[r2,#0x7e8]
;;;39     	p_ext ->onWait              = (tm_onWait)0;
00000a  f8c207ec          STR      r0,[r2,#0x7ec]
;;;40     	p_ext ->onError             = (tm_onError)0;
00000e  f8c207f0          STR      r0,[r2,#0x7f0]
;;;41     	p_ext ->wait_counter        = 0;
000012  f8c207e4          STR      r0,[r2,#0x7e4]
;;;42     	p_ext ->routine_cnt         = 0;
000016  f8a20820          STRH     r0,[r2,#0x820]
;;;43     	p_ext ->failed_cnt          = 0;
00001a  f88207f4          STRB     r0,[r2,#0x7f4]
;;;44     	p_ext ->successed_cnt       = 0;
00001e  f88207f5          STRB     r0,[r2,#0x7f5]
;;;45     	p_ext ->routine_cnt         = 0;
000022  f8a20820          STRH     r0,[r2,#0x820]
;;;46     	p_ext ->dot_cnt             = 0;
000026  f8a20822          STRH     r0,[r2,#0x822]
;;;47     	p_ext ->isInSpecialMode     = X_False;
00002a  f8c20818          STR      r0,[r2,#0x818]
;;;48     	p_ext ->isDotPrintDisable   = X_False;
00002e  60d0              STR      r0,[r2,#0xc]
;;;49     	return TM_CommandAnalysis;
000030  2001              MOVS     r0,#1
;;;50     }
000032  4770              BX       lr
;;;51     /**********************************************************************************************************************************
                          ENDP


                          AREA ||i.TM_RUNALL_todo||, CODE, READONLY, ALIGN=1

                  TM_RUNALL_todo PROC
;;;534    }
;;;535    StateNumber TM_RUNALL_todo(s_StateMachineParam *p_base)
000000  b570              PUSH     {r4-r6,lr}
;;;536    {
000002  4604              MOV      r4,r0
;;;537    	sTestModeParamExtern *p_ext = (sTestModeParamExtern *)p_base;
000004  4625              MOV      r5,r4
;;;538    	p_ext ->routine_cnt = GetRountineEventNum(p_ext);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       GetRountineEventNum
00000c  f8a50820          STRH     r0,[r5,#0x820]
;;;539    	return TM_DoCommandRoutine;
000010  2002              MOVS     r0,#2
;;;540    }
000012  bd70              POP      {r4-r6,pc}
;;;541    StateNumber TM_ENTER_todo(s_StateMachineParam *p_base)
                          ENDP


                          AREA ||i.TM_SpecialCmdFinishAction||, CODE, READONLY, ALIGN=1

                  TM_SpecialCmdFinishAction PROC
;;;223    *********************************************************************************************************************************/
;;;224    StateNumber TM_SpecialCmdFinishAction(s_StateMachineParam *p_this)
000000  4601              MOV      r1,r0
;;;225    {
;;;226    	sTestModeParamExtern *p_ext = (sTestModeParamExtern *)p_this;
000002  460a              MOV      r2,r1
;;;227    	p_ext ->isNewCommandCome = X_False;
000004  2000              MOVS     r0,#0
000006  f8c20814          STR      r0,[r2,#0x814]
;;;228    	return TM_CommandAnalysis;
00000a  2001              MOVS     r0,#1
;;;229    }
00000c  4770              BX       lr
;;;230    /**********************************************************************************************************************************
                          ENDP


                          AREA ||i.TM_WaitAction||, CODE, READONLY, ALIGN=2

                  TM_WaitAction PROC
;;;144    *********************************************************************************************************************************/
;;;145    StateNumber TM_WaitAction(s_StateMachineParam *p_this)
000000  b570              PUSH     {r4-r6,lr}
;;;146    {
000002  4605              MOV      r5,r0
;;;147    	sTestModeParamExtern *p_ext = (sTestModeParamExtern *)p_this;
000004  462c              MOV      r4,r5
;;;148    	if(p_ext ->isDotPrintDisable  == X_False)
000006  68e0              LDR      r0,[r4,#0xc]
000008  b9a0              CBNZ     r0,|L13.52|
;;;149    	{
;;;150    		if(p_ext ->dot_cnt <= 1000)
00000a  f8b40822          LDRH     r0,[r4,#0x822]
00000e  f5b07f7a          CMP      r0,#0x3e8
000012  dc06              BGT      |L13.34|
;;;151    		{
;;;152    			p_ext ->dot_cnt += p_ext ->handle_called_freq_in_ms;
000014  f8b40822          LDRH     r0,[r4,#0x822]
000018  8921              LDRH     r1,[r4,#8]
00001a  4408              ADD      r0,r0,r1
00001c  f8a40822          STRH     r0,[r4,#0x822]
000020  e008              B        |L13.52|
                  |L13.34|
;;;153    		}
;;;154    		else
;;;155    		{
;;;156    			p_ext ->dot_cnt = 0;
000022  2000              MOVS     r0,#0
000024  f8a40822          STRH     r0,[r4,#0x822]
;;;157    			TmLogPrintf(TEST_MODE_BASIC_LOG_DEBUG,(p_ext ->send_buf_method," .\r"));
000028  bf00              NOP      
00002a  a139              ADR      r1,|L13.272|
00002c  6860              LDR      r0,[r4,#4]
00002e  f7fffffe          BL       mTM_SendString
000032  bf00              NOP      
                  |L13.52|
;;;158    		}
;;;159    	}
;;;160    	
;;;161    	if(p_ext ->onWait != X_Null)
000034  f8d407ec          LDR      r0,[r4,#0x7ec]
000038  b1d0              CBZ      r0,|L13.112|
;;;162    	{
;;;163    		if(p_ext ->onWait() == X_True) 
00003a  f8d407ec          LDR      r0,[r4,#0x7ec]
00003e  4780              BLX      r0
000040  2801              CMP      r0,#1
000042  d115              BNE      |L13.112|
;;;164    		{
;;;165    			TmLogPrintf(TEST_MODE_BASIC_LOG_DEBUG,(p_ext ->send_buf_method,"\r\n ---------[ OK ] \r\n"));
000044  bf00              NOP      
000046  a133              ADR      r1,|L13.276|
000048  6860              LDR      r0,[r4,#4]
00004a  f7fffffe          BL       mTM_SendString
00004e  bf00              NOP      
;;;166    			p_ext ->successed_cnt ++;
000050  f89407f5          LDRB     r0,[r4,#0x7f5]
000054  1c40              ADDS     r0,r0,#1
000056  f88407f5          STRB     r0,[r4,#0x7f5]
;;;167    			if(p_ext ->recovery != X_Null) {p_ext ->recovery();p_ext ->recovery = (tm_recovery_method)0;}
00005a  f8d407e8          LDR      r0,[r4,#0x7e8]
00005e  b128              CBZ      r0,|L13.108|
000060  f8d407e8          LDR      r0,[r4,#0x7e8]
000064  4780              BLX      r0
000066  2000              MOVS     r0,#0
000068  f8c407e8          STR      r0,[r4,#0x7e8]
                  |L13.108|
;;;168    			return TM_Finish;
00006c  2004              MOVS     r0,#4
                  |L13.110|
;;;169    		}
;;;170    	}
;;;171    	if(p_ext ->onError != X_Null)
;;;172    	{
;;;173    		if(p_ext ->onError() == X_True)
;;;174    		{
;;;175    			TmLogPrintf(TEST_MODE_BASIC_LOG_DEBUG,(p_ext ->send_buf_method,"\r\n --------- [ PROCESS Failed ]\r\n"));
;;;176    			p_ext ->failed_cnt ++;
;;;177    			if(p_ext ->recovery != X_Null) {p_ext ->recovery();p_ext ->recovery = (tm_recovery_method)0;}
;;;178    			return TM_Finish;
;;;179    		}
;;;180    	}
;;;181    	
;;;182    	if((p_ext ->wait_counter < p_ext ->handle_called_freq_in_ms) )
;;;183    	{
;;;184    		if(p_ext ->onWait != X_Null)
;;;185    		{
;;;186    			TmLogPrintf(TEST_MODE_BASIC_LOG_DEBUG,(p_ext ->send_buf_method,"\r\n --------- [ PROCESS TIME OUT ]\r\n"));
;;;187    			p_ext ->failed_cnt ++;
;;;188    		}
;;;189    		else
;;;190    		{
;;;191    			TmLogPrintf(TEST_MODE_BASIC_LOG_DEBUG,(p_ext ->send_buf_method,"\r\n --------- [ PROCESS NORMAL END ]\r\n"));
;;;192    			p_ext ->successed_cnt ++;
;;;193    		}
;;;194    		if(p_ext ->recovery != X_Null) {p_ext ->recovery();p_ext ->recovery = (tm_recovery_method)0;}
;;;195    		return TM_Finish;
;;;196    	}
;;;197    	p_ext ->wait_counter -= p_ext ->handle_called_freq_in_ms;
;;;198    	return p_this->current_state;
;;;199    }
00006e  bd70              POP      {r4-r6,pc}
                  |L13.112|
000070  f8d407f0          LDR      r0,[r4,#0x7f0]        ;171
000074  b1d0              CBZ      r0,|L13.172|
000076  f8d407f0          LDR      r0,[r4,#0x7f0]        ;173
00007a  4780              BLX      r0                    ;173
00007c  2801              CMP      r0,#1                 ;173
00007e  d115              BNE      |L13.172|
000080  bf00              NOP                            ;175
000082  a12a              ADR      r1,|L13.300|
000084  6860              LDR      r0,[r4,#4]            ;175
000086  f7fffffe          BL       mTM_SendString
00008a  bf00              NOP                            ;175
00008c  f89407f4          LDRB     r0,[r4,#0x7f4]        ;176
000090  1c40              ADDS     r0,r0,#1              ;176
000092  f88407f4          STRB     r0,[r4,#0x7f4]        ;176
000096  f8d407e8          LDR      r0,[r4,#0x7e8]        ;177
00009a  b128              CBZ      r0,|L13.168|
00009c  f8d407e8          LDR      r0,[r4,#0x7e8]        ;177
0000a0  4780              BLX      r0                    ;177
0000a2  2000              MOVS     r0,#0                 ;177
0000a4  f8c407e8          STR      r0,[r4,#0x7e8]        ;177
                  |L13.168|
0000a8  2004              MOVS     r0,#4                 ;178
0000aa  e7e0              B        |L13.110|
                  |L13.172|
0000ac  8921              LDRH     r1,[r4,#8]            ;182
0000ae  f8d407e4          LDR      r0,[r4,#0x7e4]        ;182
0000b2  4288              CMP      r0,r1                 ;182
0000b4  d224              BCS      |L13.256|
0000b6  f8d407ec          LDR      r0,[r4,#0x7ec]        ;184
0000ba  b158              CBZ      r0,|L13.212|
0000bc  bf00              NOP                            ;186
0000be  a124              ADR      r1,|L13.336|
0000c0  6860              LDR      r0,[r4,#4]            ;186
0000c2  f7fffffe          BL       mTM_SendString
0000c6  bf00              NOP                            ;186
0000c8  f89407f4          LDRB     r0,[r4,#0x7f4]        ;187
0000cc  1c40              ADDS     r0,r0,#1              ;187
0000ce  f88407f4          STRB     r0,[r4,#0x7f4]        ;187
0000d2  e00a              B        |L13.234|
                  |L13.212|
0000d4  bf00              NOP                            ;191
0000d6  a127              ADR      r1,|L13.372|
0000d8  6860              LDR      r0,[r4,#4]            ;191
0000da  f7fffffe          BL       mTM_SendString
0000de  bf00              NOP                            ;191
0000e0  f89407f5          LDRB     r0,[r4,#0x7f5]        ;192
0000e4  1c40              ADDS     r0,r0,#1              ;192
0000e6  f88407f5          STRB     r0,[r4,#0x7f5]        ;192
                  |L13.234|
0000ea  f8d407e8          LDR      r0,[r4,#0x7e8]        ;194
0000ee  b128              CBZ      r0,|L13.252|
0000f0  f8d407e8          LDR      r0,[r4,#0x7e8]        ;194
0000f4  4780              BLX      r0                    ;194
0000f6  2000              MOVS     r0,#0                 ;194
0000f8  f8c407e8          STR      r0,[r4,#0x7e8]        ;194
                  |L13.252|
0000fc  2004              MOVS     r0,#4                 ;195
0000fe  e7b6              B        |L13.110|
                  |L13.256|
000100  8921              LDRH     r1,[r4,#8]            ;197
000102  f8d407e4          LDR      r0,[r4,#0x7e4]        ;197
000106  1a40              SUBS     r0,r0,r1              ;197
000108  f8c407e4          STR      r0,[r4,#0x7e4]        ;197
00010c  7828              LDRB     r0,[r5,#0]            ;198
00010e  e7ae              B        |L13.110|
;;;200    /**********************************************************************************************************************************
                          ENDP

                  |L13.272|
000110  202e0d00          DCB      " .\r",0
                  |L13.276|
000114  0d0a202d          DCB      "\r\n ---------[ OK ] \r\n",0
000118  2d2d2d2d
00011c  2d2d2d2d
000120  5b204f4b
000124  205d200d
000128  0a00    
00012a  00                DCB      0
00012b  00                DCB      0
                  |L13.300|
00012c  0d0a202d          DCB      "\r\n --------- [ PROCESS Failed ]\r\n",0
000130  2d2d2d2d
000134  2d2d2d2d
000138  205b2050
00013c  524f4345
000140  53532046
000144  61696c65
000148  64205d0d
00014c  0a00    
00014e  00                DCB      0
00014f  00                DCB      0
                  |L13.336|
000150  0d0a202d          DCB      "\r\n --------- [ PROCESS TIME OUT ]\r\n",0
000154  2d2d2d2d
000158  2d2d2d2d
00015c  205b2050
000160  524f4345
000164  53532054
000168  494d4520
00016c  4f555420
000170  5d0d0a00
                  |L13.372|
000174  0d0a202d          DCB      "\r\n --------- [ PROCESS NORMAL END ]\r\n",0
000178  2d2d2d2d
00017c  2d2d2d2d
000180  205b2050
000184  524f4345
000188  5353204e
00018c  4f524d41
000190  4c20454e
000194  44205d0d
000198  0a00    
00019a  00                DCB      0
00019b  00                DCB      0

                          AREA ||i.TM_find_header||, CODE, READONLY, ALIGN=1

                  TM_find_header PROC
;;;253    }
;;;254    static X_Boolean TM_find_header(sTestModeRecvParam *p_recv,uint8_t current_data)
000000  4602              MOV      r2,r0
;;;255    {
;;;256    	//no need p_recv pointer check ,it is guarantee by the module
;;;257    	if(p_recv ->header_index == 0 && current_data == 'T') {p_recv ->header_index = 1;return X_False;}
000002  f8920024          LDRB     r0,[r2,#0x24]
000006  b930              CBNZ     r0,|L14.22|
000008  2954              CMP      r1,#0x54
00000a  d104              BNE      |L14.22|
00000c  2001              MOVS     r0,#1
00000e  f8820024          STRB     r0,[r2,#0x24]
000012  2000              MOVS     r0,#0
                  |L14.20|
;;;258    	if(p_recv ->header_index == 1)
;;;259    	{
;;;260    		if(current_data == 'M')
;;;261    		{
;;;262    			p_recv ->header_index = 0;
;;;263    			/////INSERT(LogDebug)(TEST_MODE_DATA_REC_DEBUG,(" TM command data get header \r\n"));
;;;264    			return X_True;
;;;265    		}
;;;266    		else if(current_data == 'T')
;;;267    		{
;;;268    			return X_False;
;;;269    		}
;;;270    	}
;;;271    	p_recv ->header_index = 0;
;;;272    	return X_False;
;;;273    }
000014  4770              BX       lr
                  |L14.22|
000016  f8920024          LDRB     r0,[r2,#0x24]         ;258
00001a  2801              CMP      r0,#1                 ;258
00001c  d10a              BNE      |L14.52|
00001e  294d              CMP      r1,#0x4d              ;260
000020  d104              BNE      |L14.44|
000022  2000              MOVS     r0,#0                 ;262
000024  f8820024          STRB     r0,[r2,#0x24]         ;262
000028  2001              MOVS     r0,#1                 ;264
00002a  e7f3              B        |L14.20|
                  |L14.44|
00002c  2954              CMP      r1,#0x54              ;266
00002e  d101              BNE      |L14.52|
000030  2000              MOVS     r0,#0                 ;268
000032  e7ef              B        |L14.20|
                  |L14.52|
000034  2000              MOVS     r0,#0                 ;271
000036  f8820024          STRB     r0,[r2,#0x24]         ;271
00003a  bf00              NOP                            ;272
00003c  e7ea              B        |L14.20|
;;;274    static X_Void TM_find_others(sTestModeRecvParam *p_recv,uint8_t current_data)
                          ENDP


                          AREA ||i.TM_find_others||, CODE, READONLY, ALIGN=2

                  TM_find_others PROC
;;;273    }
;;;274    static X_Void TM_find_others(sTestModeRecvParam *p_recv,uint8_t current_data)
000000  b538              PUSH     {r3-r5,lr}
;;;275    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;276    	uint16_t only_cmd_payload_length ;
;;;277    
;;;278    	p_recv ->data_index ++;
000006  8ce0              LDRH     r0,[r4,#0x26]
000008  1c40              ADDS     r0,r0,#1
00000a  84e0              STRH     r0,[r4,#0x26]
;;;279    	if(p_recv ->data_index >= p_recv ->max_recv_length)
00000c  8ce0              LDRH     r0,[r4,#0x26]
00000e  88e1              LDRH     r1,[r4,#6]
000010  4288              CMP      r0,r1
000012  db0d              BLT      |L15.48|
;;;280    	{
;;;281    		p_recv ->header_index = 0;
000014  2000              MOVS     r0,#0
000016  f8840024          STRB     r0,[r4,#0x24]
;;;282    		p_recv ->data_index   = 0;
00001a  84e0              STRH     r0,[r4,#0x26]
;;;283    		TmLogPrintf(TEST_MODE_BASIC_LOG_DEBUG,(p_recv ->send_buf_method,
00001c  bf00              NOP      
00001e  492d              LDR      r1,|L15.212|
000020  6920              LDR      r0,[r4,#0x10]
000022  f7fffffe          BL       mTM_SendString
000026  bf00              NOP      
;;;284    															" TM command data receive error occur , reset to idle receive state!!!\r\n"));
;;;285    		
;;;286    //////////		INSERT(LogDebug)(TEST_MODE_BASIC_LOG_DEBUG,(" TM command data receive error occur , reset to idle receive state!!!\r\n"));
;;;287    		
;;;288    		p_recv ->temp_rec_buf[0] = (uint8_t)FOP_idle;
000028  2000              MOVS     r0,#0
00002a  f8840028          STRB     r0,[r4,#0x28]
                  |L15.46|
;;;289    		return;
;;;290    	}
;;;291    	if(p_recv ->temp_rec_buf[0] == FOP_idle)
;;;292    	{
;;;293    		//no need rec_buf pointer check ,it is guarantee by the module
;;;294    		p_recv ->temp_rec_buf[TEST_MODE_RECV_EXTERN_LENGTH] = 'T';
;;;295    		p_recv ->temp_rec_buf[TEST_MODE_RECV_EXTERN_LENGTH + 1] = 'M';
;;;296    		p_recv ->data_index   = TEST_MODE_RECV_EXTERN_LENGTH + 2;
;;;297    		p_recv ->temp_rec_buf[p_recv ->data_index] = current_data;
;;;298    		p_recv ->temp_rec_buf[0] = (uint8_t)FOP_inprocess;
;;;299    		return ;
;;;300    	}
;;;301    
;;;302    	if(p_recv ->temp_rec_buf[0] == FOP_inprocess)
;;;303    	{
;;;304    		p_recv ->temp_rec_buf[p_recv ->data_index] = current_data;
;;;305    //////////		INSERT(LogDebug)(TEST_MODE_DATA_REC_DEBUG & ((p_recv ->data_index%10) == 0),(" TM %d\r\n",p_recv ->data_index));
;;;306    		if(p_recv ->data_index >= (TEST_MODE_COMMAND_STRING_EXTERN_LENGTH + TEST_MODE_RECV_EXTERN_LENGTH - 1) 
;;;307    				&& current_data == TM_COMMAND_END_FLAG4 
;;;308    				&& p_recv ->temp_rec_buf[p_recv ->data_index - 1] == TM_COMMAND_END_FLAG3
;;;309    				&& p_recv ->temp_rec_buf[p_recv ->data_index - 2] == TM_COMMAND_END_FLAG2 
;;;310    				&& p_recv ->temp_rec_buf[p_recv ->data_index - 3] == TM_COMMAND_END_FLAG1
;;;311    				&& p_recv ->temp_rec_buf[p_recv ->data_index - 4] == TM_COMMAND_END_FLAG0)
;;;312    		{
;;;313    			//there is no whole length section in data , 
;;;314    			//so I use two byte to store it
;;;315    			only_cmd_payload_length = p_recv ->data_index + 1 - TEST_MODE_RECV_EXTERN_LENGTH - TEST_MODE_COMMAND_STRING_EXTERN_LENGTH;//p_recv ->data_index + 1 - TEST_MODE_RECV_EXTERN_LENGTH - TEST_MODE_COMMAND_STRING_EXTERN_LENGTH
;;;316    			CopyBuffer(&only_cmd_payload_length,&p_recv ->temp_rec_buf[1],2);
;;;317    			
;;;318    			p_recv -> header_index = 0;
;;;319    			p_recv ->temp_rec_buf[0] = (uint8_t)FOP_successed;
;;;320    			
;;;321    //////////////			INSERT(LogDebug)(TEST_MODE_DATA_REC_DEBUG,(" TM command data get tail %d\r\n",only_cmd_payload_length));
;;;322    			
;;;323    			return;
;;;324    		}
;;;325    		p_recv ->temp_rec_buf[0] = (uint8_t)FOP_inprocess;
;;;326    		return;
;;;327    	}
;;;328    	p_recv -> header_index = 0;
;;;329    	p_recv ->temp_rec_buf[0] = (uint8_t)FOP_idle;
;;;330    	return;
;;;331    }
00002e  bd38              POP      {r3-r5,pc}
                  |L15.48|
000030  f8940028          LDRB     r0,[r4,#0x28]         ;291
000034  b978              CBNZ     r0,|L15.86|
000036  2154              MOVS     r1,#0x54              ;294
000038  202b              MOVS     r0,#0x2b              ;294
00003a  5501              STRB     r1,[r0,r4]            ;294
00003c  214d              MOVS     r1,#0x4d              ;295
00003e  202c              MOVS     r0,#0x2c              ;295
000040  5501              STRB     r1,[r0,r4]            ;295
000042  2005              MOVS     r0,#5                 ;296
000044  84e0              STRH     r0,[r4,#0x26]         ;296
000046  8ce1              LDRH     r1,[r4,#0x26]         ;297
000048  f1040028          ADD      r0,r4,#0x28           ;297
00004c  5445              STRB     r5,[r0,r1]            ;297
00004e  2003              MOVS     r0,#3                 ;298
000050  f8840028          STRB     r0,[r4,#0x28]         ;298
000054  e7eb              B        |L15.46|
                  |L15.86|
000056  f8940028          LDRB     r0,[r4,#0x28]         ;302
00005a  2803              CMP      r0,#3                 ;302
00005c  d132              BNE      |L15.196|
00005e  8ce1              LDRH     r1,[r4,#0x26]         ;304
000060  f1040028          ADD      r0,r4,#0x28           ;304
000064  5445              STRB     r5,[r0,r1]            ;304
000066  8ce0              LDRH     r0,[r4,#0x26]         ;306
000068  2809              CMP      r0,#9                 ;306
00006a  db27              BLT      |L15.188|
00006c  2d52              CMP      r5,#0x52              ;307
00006e  d125              BNE      |L15.188|
000070  8ce0              LDRH     r0,[r4,#0x26]         ;308
000072  1e40              SUBS     r0,r0,#1              ;308
000074  f1040128          ADD      r1,r4,#0x28           ;308
000078  5c08              LDRB     r0,[r1,r0]            ;308
00007a  2845              CMP      r0,#0x45              ;308
00007c  d11e              BNE      |L15.188|
00007e  8ce0              LDRH     r0,[r4,#0x26]         ;309
000080  1e80              SUBS     r0,r0,#2              ;309
000082  5c08              LDRB     r0,[r1,r0]            ;309
000084  2856              CMP      r0,#0x56              ;309
000086  d119              BNE      |L15.188|
000088  8ce0              LDRH     r0,[r4,#0x26]         ;310
00008a  1ec0              SUBS     r0,r0,#3              ;310
00008c  5c08              LDRB     r0,[r1,r0]            ;310
00008e  284f              CMP      r0,#0x4f              ;310
000090  d114              BNE      |L15.188|
000092  8ce0              LDRH     r0,[r4,#0x26]         ;311
000094  1f00              SUBS     r0,r0,#4              ;311
000096  5c08              LDRB     r0,[r1,r0]            ;311
000098  2820              CMP      r0,#0x20              ;311
00009a  d10f              BNE      |L15.188|
00009c  8ce0              LDRH     r0,[r4,#0x26]         ;315
00009e  3809              SUBS     r0,r0,#9              ;315
0000a0  b280              UXTH     r0,r0                 ;315
0000a2  9000              STR      r0,[sp,#0]            ;315
0000a4  2202              MOVS     r2,#2                 ;316
0000a6  1c49              ADDS     r1,r1,#1              ;316
0000a8  4668              MOV      r0,sp                 ;316
0000aa  f7fffffe          BL       __CopyBuffer
0000ae  2000              MOVS     r0,#0                 ;318
0000b0  f8840024          STRB     r0,[r4,#0x24]         ;318
0000b4  2001              MOVS     r0,#1                 ;319
0000b6  f8840028          STRB     r0,[r4,#0x28]         ;319
0000ba  e7b8              B        |L15.46|
                  |L15.188|
0000bc  2003              MOVS     r0,#3                 ;325
0000be  f8840028          STRB     r0,[r4,#0x28]         ;325
0000c2  e7b4              B        |L15.46|
                  |L15.196|
0000c4  2000              MOVS     r0,#0                 ;328
0000c6  f8840024          STRB     r0,[r4,#0x24]         ;328
0000ca  f8840028          STRB     r0,[r4,#0x28]         ;329
0000ce  bf00              NOP                            ;330
0000d0  e7ad              B        |L15.46|
;;;332    static X_Boolean tm_ProtocolRecvInit(sTestModeRecvParam *p_manager)
                          ENDP

0000d2  0000              DCW      0x0000
                  |L15.212|
                          DCD      ||.conststring||+0x44

                          AREA ||i.__CopyBuffer||, CODE, READONLY, ALIGN=1

                  __CopyBuffer PROC
;;;12       #ifdef ARM_COMPILER_PRESENT
;;;13         static __inline X_Void __CopyBuffer(X_Void const* src, X_Void* dst, X_UInt length)
000000  b530              PUSH     {r4,r5,lr}
;;;14       #endif
;;;15       #ifdef IAR_COMPILER_PRESENT
;;;16         #pragma inline
;;;17         static X_Void __CopyBuffer(X_Void const* src, X_Void* dst, X_UInt length)
;;;18       #endif
;;;19     {
;;;20         X_UInt8 const* _src;
;;;21         X_UInt8* _dst;
;;;22     
;;;23         _src = (X_UInt8 const*)src;
000002  4603              MOV      r3,r0
;;;24         _dst = (X_UInt8*)dst;
000004  460c              MOV      r4,r1
;;;25     
;;;26         while (length != 0)
000006  e004              B        |L16.18|
                  |L16.8|
;;;27         {
;;;28             *_dst = *_src;
000008  781d              LDRB     r5,[r3,#0]
00000a  7025              STRB     r5,[r4,#0]
;;;29             ++_dst;
00000c  1c64              ADDS     r4,r4,#1
;;;30             ++_src;
00000e  1c5b              ADDS     r3,r3,#1
;;;31             --length;
000010  1e52              SUBS     r2,r2,#1
                  |L16.18|
000012  2a00              CMP      r2,#0                 ;26
000014  d1f8              BNE      |L16.8|
;;;32         }
;;;33     }
000016  bd30              POP      {r4,r5,pc}
;;;34     #define CopyBuffer  __CopyBuffer
                          ENDP


                          AREA ||i.mTM_SendString||, CODE, READONLY, ALIGN=1

                  mTM_SendString PROC
;;;495    
;;;496    X_Void mTM_SendString(tm_send_buf send_method,const char * sFormat, ...)
000000  b40f              PUSH     {r0-r3}
;;;497    {
000002  b570              PUSH     {r4-r6,lr}
000004  b0cc              SUB      sp,sp,#0x130
000006  4605              MOV      r5,r0
;;;498    	uint16_t length,i;
;;;499    
;;;500    		char g_pcOutBuf[MAX_TEST_MODE_OUTPUT_STRING_LENGTH];
;;;501    		if(send_method == X_Null) {return;}
000008  b91d              CBNZ     r5,|L17.18|
                  |L17.10|
;;;502    		for(i=0;i < MAX_TEST_MODE_OUTPUT_STRING_LENGTH;i++)
;;;503    		{
;;;504    			g_pcOutBuf[i] = '\0';
;;;505    		}
;;;506        va_list args;
;;;507    	
;;;508        va_start(args, sFormat);
;;;509    
;;;510    		vsprintf(g_pcOutBuf,sFormat,args);
;;;511        va_end(args);
;;;512    	
;;;513    		length = strlen(g_pcOutBuf);
;;;514    		if(length > MAX_TEST_MODE_OUTPUT_STRING_LENGTH) {length = MAX_TEST_MODE_OUTPUT_STRING_LENGTH;}
;;;515    		send_method((uint8_t *)g_pcOutBuf,length);
;;;516    }
00000a  b04c              ADD      sp,sp,#0x130
00000c  bc70              POP      {r4-r6}
00000e  f85dfb14          LDR      pc,[sp],#0x14
                  |L17.18|
000012  2400              MOVS     r4,#0                 ;502
000014  e004              B        |L17.32|
                  |L17.22|
000016  2000              MOVS     r0,#0                 ;504
000018  a901              ADD      r1,sp,#4              ;504
00001a  5508              STRB     r0,[r1,r4]            ;504
00001c  1c60              ADDS     r0,r4,#1              ;502
00001e  b284              UXTH     r4,r0                 ;502
                  |L17.32|
000020  f5b47f96          CMP      r4,#0x12c             ;502
000024  dbf7              BLT      |L17.22|
000026  a852              ADD      r0,sp,#0x148          ;508
000028  9000              STR      r0,[sp,#0]            ;508
00002a  a801              ADD      r0,sp,#4              ;510
00002c  9a00              LDR      r2,[sp,#0]            ;510
00002e  9951              LDR      r1,[sp,#0x144]        ;510
000030  f7fffffe          BL       vsprintf
000034  2000              MOVS     r0,#0                 ;511
000036  9000              STR      r0,[sp,#0]            ;511
000038  a801              ADD      r0,sp,#4              ;513
00003a  f7fffffe          BL       strlen
00003e  b286              UXTH     r6,r0                 ;513
000040  f5b67f96          CMP      r6,#0x12c             ;514
000044  dd01              BLE      |L17.74|
000046  f44f7696          MOV      r6,#0x12c             ;514
                  |L17.74|
00004a  4631              MOV      r1,r6                 ;515
00004c  a801              ADD      r0,sp,#4              ;515
00004e  47a8              BLX      r5                    ;515
000050  bf00              NOP      
000052  e7da              B        |L17.10|
;;;517    
                          ENDP


                          AREA ||i.mTestModeDoesInSpecialMode||, CODE, READONLY, ALIGN=1

                  mTestModeDoesInSpecialMode PROC
;;;488    }
;;;489    X_Boolean mTestModeDoesInSpecialMode(const sTestModeParam *p_tm)
000000  4601              MOV      r1,r0
;;;490    {
;;;491    	if(p_tm == X_Null) {return X_False;}
000002  b909              CBNZ     r1,|L18.8|
000004  2000              MOVS     r0,#0
                  |L18.6|
;;;492    	sTestModeParamExtern *p_ext = (sTestModeParamExtern*)p_tm ->p_state_param;
;;;493    	return  p_ext->isInSpecialMode;
;;;494    }
000006  4770              BX       lr
                  |L18.8|
000008  690a              LDR      r2,[r1,#0x10]         ;492
00000a  f8d20818          LDR      r0,[r2,#0x818]        ;493
00000e  e7fa              B        |L18.6|
;;;495    
                          ENDP


                          AREA ||i.mTestModeHandle||, CODE, READONLY, ALIGN=2

                  mTestModeHandle PROC
;;;461    }
;;;462    X_Void mTestModeHandle(const sTestModeParam *p_tm)
000000  b570              PUSH     {r4-r6,lr}
;;;463    {
000002  4605              MOV      r5,r0
;;;464    	sTestModeParamExtern *p_ext = (sTestModeParamExtern*)p_tm ->p_state_param;
000004  692c              LDR      r4,[r5,#0x10]
;;;465    	if(p_tm == X_Null) {return;}
000006  b905              CBNZ     r5,|L19.10|
                  |L19.8|
;;;466    	if(*p_tm->p_isInitOK != X_True) {return;}
;;;467    	
;;;468    	 if(p_ext ->isNewCommandCome != X_True)
;;;469    	 {
;;;470    			p_ext ->isNewCommandCome = tm_ProtocolRecvGetCommand(p_tm ->p_recv,p_ext ->temp_command_buf,&p_ext ->temp_command_length);
;;;471    	 }
;;;472    	
;;;473    	mStateMachineRun(p_tm ->p_state_machine,p_tm->p_state_param,StateJumpRecorder);
;;;474    	if(p_ext ->isInSpecialMode == X_True)
;;;475    	{
;;;476    		if(p_ext ->test_mode_hold_time_in_ms == TEST_SPECIAL_HOLD_TIME_INFINITE) {return;}
;;;477    		if(p_ext ->test_mode_hold_cnt >= p_ext ->handle_called_freq_in_ms)
;;;478    		{
;;;479    			p_ext ->test_mode_hold_cnt -= p_ext ->handle_called_freq_in_ms;
;;;480    		}
;;;481    		else
;;;482    		{
;;;483    			TmLogPrintf(TEST_MODE_BASIC_LOG_DEBUG,(p_ext ->send_buf_method,"no command come in more than %d ms \r\n",p_ext ->test_mode_hold_time_in_ms));
;;;484    			TM_EXIT_todo(p_tm ->p_state_param);
;;;485    		}
;;;486    	}
;;;487    	
;;;488    }
000008  bd70              POP      {r4-r6,pc}
                  |L19.10|
00000a  6828              LDR      r0,[r5,#0]            ;466
00000c  6800              LDR      r0,[r0,#0]            ;466
00000e  2801              CMP      r0,#1                 ;466
000010  d000              BEQ      |L19.20|
000012  e7f9              B        |L19.8|
                  |L19.20|
000014  f8d40814          LDR      r0,[r4,#0x814]        ;468
000018  2801              CMP      r0,#1                 ;468
00001a  d008              BEQ      |L19.46|
00001c  f50462fc          ADD      r2,r4,#0x7e0          ;470
000020  f1040110          ADD      r1,r4,#0x10           ;470
000024  69a8              LDR      r0,[r5,#0x18]         ;470
000026  f7fffffe          BL       tm_ProtocolRecvGetCommand
00002a  f8c40814          STR      r0,[r4,#0x814]        ;470
                  |L19.46|
00002e  4a13              LDR      r2,|L19.124|
000030  e9d51004          LDRD     r1,r0,[r5,#0x10]      ;473
000034  f7fffffe          BL       mStateMachineRun
000038  f8d40818          LDR      r0,[r4,#0x818]        ;474
00003c  2801              CMP      r0,#1                 ;474
00003e  d11b              BNE      |L19.120|
000040  f8d40810          LDR      r0,[r4,#0x810]        ;476
000044  1c40              ADDS     r0,r0,#1              ;476
000046  b900              CBNZ     r0,|L19.74|
000048  e7de              B        |L19.8|
                  |L19.74|
00004a  8921              LDRH     r1,[r4,#8]            ;477
00004c  f8d4081c          LDR      r0,[r4,#0x81c]        ;477
000050  4288              CMP      r0,r1                 ;477
000052  d306              BCC      |L19.98|
000054  8921              LDRH     r1,[r4,#8]            ;479
000056  f8d4081c          LDR      r0,[r4,#0x81c]        ;479
00005a  1a40              SUBS     r0,r0,r1              ;479
00005c  f8c4081c          STR      r0,[r4,#0x81c]        ;479
000060  e00a              B        |L19.120|
                  |L19.98|
000062  bf00              NOP                            ;483
000064  a106              ADR      r1,|L19.128|
000066  f8d42810          LDR      r2,[r4,#0x810]        ;483
00006a  6860              LDR      r0,[r4,#4]            ;483
00006c  f7fffffe          BL       mTM_SendString
000070  bf00              NOP                            ;483
000072  6928              LDR      r0,[r5,#0x10]         ;484
000074  f7fffffe          BL       TM_EXIT_todo
                  |L19.120|
000078  bf00              NOP      
00007a  e7c5              B        |L19.8|
;;;489    X_Boolean mTestModeDoesInSpecialMode(const sTestModeParam *p_tm)
                          ENDP

                  |L19.124|
                          DCD      StateJumpRecorder
                  |L19.128|
000080  6e6f2063          DCB      "no command come in more than %d ms \r\n",0
000084  6f6d6d61
000088  6e642063
00008c  6f6d6520
000090  696e206d
000094  6f726520
000098  7468616e
00009c  20256420
0000a0  6d73200d
0000a4  0a00    
0000a6  00                DCB      0
0000a7  00                DCB      0

                          AREA ||i.mTestModeInit||, CODE, READONLY, ALIGN=1

                  mTestModeInit PROC
;;;431    }
;;;432    X_Boolean mTestModeInit(const sTestModeParam *p_tm)
000000  b570              PUSH     {r4-r6,lr}
;;;433    {
000002  4604              MOV      r4,r0
;;;434    	if(p_tm == X_Null) {return X_False;}
000004  b90c              CBNZ     r4,|L20.10|
000006  2000              MOVS     r0,#0
                  |L20.8|
;;;435    	*p_tm ->p_isInitOK = X_False;
;;;436    	if(tm_ProtocolRecvInit(p_tm ->p_recv) != X_True){return X_False;}
;;;437    	
;;;438    	if(p_tm ->handle_called_freq_in_ms == 0){return X_False;}
;;;439    	if(p_tm ->get_byte_method == X_Null ){return X_False;}
;;;440    	
;;;441    	sTestModeParamExtern *p_ext = (sTestModeParamExtern *)p_tm ->p_state_param;
;;;442    	if(p_ext ->handle_called_freq_in_ms == 0) {return X_False;}
;;;443    	if(p_ext ->get_byte_method == X_Null ){return X_False;}
;;;444    	if(p_ext ->p_command_table == X_Null || p_ext ->command_table_size == 0) {return X_False;}
;;;445    	
;;;446    	mStateMachineStateSet(p_tm ->p_state_machine,TM_Idle);
;;;447    	
;;;448    	*p_tm ->p_isInitOK = X_True;
;;;449    	return X_True;
;;;450    }
000008  bd70              POP      {r4-r6,pc}
                  |L20.10|
00000a  2000              MOVS     r0,#0                 ;435
00000c  6821              LDR      r1,[r4,#0]            ;435
00000e  6008              STR      r0,[r1,#0]            ;435
000010  69a0              LDR      r0,[r4,#0x18]         ;436
000012  f7fffffe          BL       tm_ProtocolRecvInit
000016  2801              CMP      r0,#1                 ;436
000018  d001              BEQ      |L20.30|
00001a  2000              MOVS     r0,#0                 ;436
00001c  e7f4              B        |L20.8|
                  |L20.30|
00001e  88a0              LDRH     r0,[r4,#4]            ;438
000020  b908              CBNZ     r0,|L20.38|
000022  2000              MOVS     r0,#0                 ;438
000024  e7f0              B        |L20.8|
                  |L20.38|
000026  68a0              LDR      r0,[r4,#8]            ;439
000028  b908              CBNZ     r0,|L20.46|
00002a  2000              MOVS     r0,#0                 ;439
00002c  e7ec              B        |L20.8|
                  |L20.46|
00002e  6925              LDR      r5,[r4,#0x10]         ;441
000030  8928              LDRH     r0,[r5,#8]            ;442
000032  b908              CBNZ     r0,|L20.56|
000034  2000              MOVS     r0,#0                 ;442
000036  e7e7              B        |L20.8|
                  |L20.56|
000038  f8d50800          LDR      r0,[r5,#0x800]        ;443
00003c  b908              CBNZ     r0,|L20.66|
00003e  2000              MOVS     r0,#0                 ;443
000040  e7e2              B        |L20.8|
                  |L20.66|
000042  f8d507f8          LDR      r0,[r5,#0x7f8]        ;444
000046  b110              CBZ      r0,|L20.78|
000048  f8b507fc          LDRH     r0,[r5,#0x7fc]        ;444
00004c  b908              CBNZ     r0,|L20.82|
                  |L20.78|
00004e  2000              MOVS     r0,#0                 ;444
000050  e7da              B        |L20.8|
                  |L20.82|
000052  2100              MOVS     r1,#0                 ;446
000054  6960              LDR      r0,[r4,#0x14]         ;446
000056  f7fffffe          BL       mStateMachineStateSet
00005a  2001              MOVS     r0,#1                 ;448
00005c  6821              LDR      r1,[r4,#0]            ;448
00005e  6008              STR      r0,[r1,#0]            ;448
000060  bf00              NOP                            ;449
000062  e7d1              B        |L20.8|
;;;451    X_Void mTestModeLoopReceive(const sTestModeParam *p_tm)
                          ENDP


                          AREA ||i.mTestModeLoopReceive||, CODE, READONLY, ALIGN=1

                  mTestModeLoopReceive PROC
;;;450    }
;;;451    X_Void mTestModeLoopReceive(const sTestModeParam *p_tm)
000000  b538              PUSH     {r3-r5,lr}
;;;452    {
000002  4604              MOV      r4,r0
;;;453    	uint8_t cur_data;
;;;454    	if(p_tm == X_Null) {return;}
000004  b904              CBNZ     r4,|L21.8|
                  |L21.6|
;;;455    	if(*p_tm->p_isInitOK != X_True) {return;}
;;;456    	
;;;457    	if(p_tm ->get_byte_method(&cur_data) == X_True)
;;;458    	{
;;;459    		tm_ProtocolRecvProcess(p_tm ->p_recv,cur_data);
;;;460    	}
;;;461    }
000006  bd38              POP      {r3-r5,pc}
                  |L21.8|
000008  6820              LDR      r0,[r4,#0]            ;455
00000a  6800              LDR      r0,[r0,#0]            ;455
00000c  2801              CMP      r0,#1                 ;455
00000e  d000              BEQ      |L21.18|
000010  e7f9              B        |L21.6|
                  |L21.18|
000012  4668              MOV      r0,sp                 ;457
000014  68a1              LDR      r1,[r4,#8]            ;457
000016  4788              BLX      r1                    ;457
000018  2801              CMP      r0,#1                 ;457
00001a  d104              BNE      |L21.38|
00001c  f89d1000          LDRB     r1,[sp,#0]            ;459
000020  69a0              LDR      r0,[r4,#0x18]         ;459
000022  f7fffffe          BL       tm_ProtocolRecvProcess
                  |L21.38|
000026  bf00              NOP      
000028  e7ed              B        |L21.6|
;;;462    X_Void mTestModeHandle(const sTestModeParam *p_tm)
                          ENDP


                          AREA ||i.tm_ProtocolRecvGetCommand||, CODE, READONLY, ALIGN=1

                  tm_ProtocolRecvGetCommand PROC
;;;406    }
;;;407    static X_Boolean tm_ProtocolRecvGetCommand(sTestModeRecvParam *p_manager,uint8_t *p_command,uint16_t *p_length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;408    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;409    	uint16_t index;
;;;410    
;;;411    	if(p_manager == X_Null) {return X_False;}
00000a  b914              CBNZ     r4,|L22.18|
00000c  2000              MOVS     r0,#0
                  |L22.14|
;;;412    	if(p_command == X_Null || p_length == X_Null)  {return X_False;}
;;;413    	
;;;414    	if(DoesLoopQueueEmpty(p_manager ->p_queue) == X_True){return X_False;}
;;;415    	
;;;416    	p_manager ->cur_pop_num = LoopQueueFirstOut(p_manager ->p_queue);
;;;417    	if(p_manager ->cur_pop_num >= p_manager ->max_cache_num) {return X_False;}
;;;418    
;;;419    	index = p_manager ->cur_pop_num*p_manager ->max_command_length;
;;;420    	CopyBuffer(&p_manager ->p_rec_buf[index],p_length,2);
;;;421    	
;;;422    	if(*p_length > p_manager ->max_command_length)
;;;423    	{
;;;424    		RealseLoopQueueBuf(p_manager ->p_queue,p_manager ->cur_pop_num);
;;;425    		return X_False;
;;;426    	}
;;;427    	CopyBuffer(&p_manager ->p_rec_buf[index + 2],p_command,*p_length);
;;;428    	
;;;429    	RealseLoopQueueBuf(p_manager ->p_queue,p_manager ->cur_pop_num);
;;;430    	return X_True;
;;;431    }
00000e  e8bd81f0          POP      {r4-r8,pc}
                  |L22.18|
000012  b107              CBZ      r7,|L22.22|
000014  b90d              CBNZ     r5,|L22.26|
                  |L22.22|
000016  2000              MOVS     r0,#0                 ;412
000018  e7f9              B        |L22.14|
                  |L22.26|
00001a  68e0              LDR      r0,[r4,#0xc]          ;414
00001c  f7fffffe          BL       DoesLoopQueueEmpty
000020  2801              CMP      r0,#1                 ;414
000022  d101              BNE      |L22.40|
000024  2000              MOVS     r0,#0                 ;414
000026  e7f2              B        |L22.14|
                  |L22.40|
000028  68e0              LDR      r0,[r4,#0xc]          ;416
00002a  f7fffffe          BL       LoopQueueFirstOut
00002e  8460              STRH     r0,[r4,#0x22]         ;416
000030  8c60              LDRH     r0,[r4,#0x22]         ;417
000032  88a1              LDRH     r1,[r4,#4]            ;417
000034  4288              CMP      r0,r1                 ;417
000036  db01              BLT      |L22.60|
000038  2000              MOVS     r0,#0                 ;417
00003a  e7e8              B        |L22.14|
                  |L22.60|
00003c  8c60              LDRH     r0,[r4,#0x22]         ;419
00003e  8921              LDRH     r1,[r4,#8]            ;419
000040  4348              MULS     r0,r1,r0              ;419
000042  b286              UXTH     r6,r0                 ;419
000044  6821              LDR      r1,[r4,#0]            ;420
000046  1988              ADDS     r0,r1,r6              ;420
000048  2202              MOVS     r2,#2                 ;420
00004a  4629              MOV      r1,r5                 ;420
00004c  f7fffffe          BL       __CopyBuffer
000050  8828              LDRH     r0,[r5,#0]            ;422
000052  8921              LDRH     r1,[r4,#8]            ;422
000054  4288              CMP      r0,r1                 ;422
000056  dd06              BLE      |L22.102|
000058  f8941022          LDRB     r1,[r4,#0x22]         ;424
00005c  68e0              LDR      r0,[r4,#0xc]          ;424
00005e  f7fffffe          BL       RealseLoopQueueBuf
000062  2000              MOVS     r0,#0                 ;425
000064  e7d3              B        |L22.14|
                  |L22.102|
000066  882a              LDRH     r2,[r5,#0]            ;427
000068  1cb1              ADDS     r1,r6,#2              ;427
00006a  6823              LDR      r3,[r4,#0]            ;427
00006c  1858              ADDS     r0,r3,r1              ;427
00006e  4639              MOV      r1,r7                 ;427
000070  f7fffffe          BL       __CopyBuffer
000074  f8941022          LDRB     r1,[r4,#0x22]         ;429
000078  68e0              LDR      r0,[r4,#0xc]          ;429
00007a  f7fffffe          BL       RealseLoopQueueBuf
00007e  2001              MOVS     r0,#1                 ;430
000080  e7c5              B        |L22.14|
;;;432    X_Boolean mTestModeInit(const sTestModeParam *p_tm)
                          ENDP


                          AREA ||i.tm_ProtocolRecvInit||, CODE, READONLY, ALIGN=1

                  tm_ProtocolRecvInit PROC
;;;331    }
;;;332    static X_Boolean tm_ProtocolRecvInit(sTestModeRecvParam *p_manager)
000000  b510              PUSH     {r4,lr}
;;;333    {
000002  4604              MOV      r4,r0
;;;334    	if(p_manager == X_Null) {return X_False;}
000004  b90c              CBNZ     r4,|L23.10|
000006  2000              MOVS     r0,#0
                  |L23.8|
;;;335    	
;;;336    	if(p_manager ->max_recv_length == 0 || p_manager ->max_recv_length > MAX_FRAME_LENGTH) {return X_False;}
;;;337    	if(p_manager ->max_command_length == 0 || p_manager ->max_command_length > MAX_TEST_MODE_COMMAND_LENGTH) {return X_False;}
;;;338    	if(p_manager ->max_cache_num == 0 || p_manager ->max_cache_num > MAX_FRAME_CHCHE_NUM) {return X_False;}
;;;339    	
;;;340    	p_manager ->data_index   = 0;
;;;341    	p_manager ->header_index = 0;
;;;342    	p_manager ->cur_push_num = 0;
;;;343    	p_manager ->cur_pop_num  = INVALID_LOOP_QUEUE_NODE_NUM;
;;;344    	p_manager ->isHeaderFind = X_False;
;;;345    	p_manager ->temp_rec_buf[0] = (uint8_t)FOP_idle;
;;;346    	LoopQueueInitialize(p_manager ->p_queue);
;;;347    	return X_True;
;;;348    }
000008  bd10              POP      {r4,pc}
                  |L23.10|
00000a  88e0              LDRH     r0,[r4,#6]            ;336
00000c  b120              CBZ      r0,|L23.24|
00000e  88e0              LDRH     r0,[r4,#6]            ;336
000010  f24071da          MOV      r1,#0x7da             ;336
000014  4288              CMP      r0,r1                 ;336
000016  dd01              BLE      |L23.28|
                  |L23.24|
000018  2000              MOVS     r0,#0                 ;336
00001a  e7f5              B        |L23.8|
                  |L23.28|
00001c  8920              LDRH     r0,[r4,#8]            ;337
00001e  b118              CBZ      r0,|L23.40|
000020  8920              LDRH     r0,[r4,#8]            ;337
000022  f5b06ffa          CMP      r0,#0x7d0             ;337
000026  dd01              BLE      |L23.44|
                  |L23.40|
000028  2000              MOVS     r0,#0                 ;337
00002a  e7ed              B        |L23.8|
                  |L23.44|
00002c  88a0              LDRH     r0,[r4,#4]            ;338
00002e  b110              CBZ      r0,|L23.54|
000030  88a0              LDRH     r0,[r4,#4]            ;338
000032  280a              CMP      r0,#0xa               ;338
000034  dd01              BLE      |L23.58|
                  |L23.54|
000036  2000              MOVS     r0,#0                 ;338
000038  e7e6              B        |L23.8|
                  |L23.58|
00003a  2000              MOVS     r0,#0                 ;340
00003c  84e0              STRH     r0,[r4,#0x26]         ;340
00003e  f8840024          STRB     r0,[r4,#0x24]         ;341
000042  8420              STRH     r0,[r4,#0x20]         ;342
000044  f64f70ff          MOV      r0,#0xffff            ;343
000048  8460              STRH     r0,[r4,#0x22]         ;343
00004a  2000              MOVS     r0,#0                 ;344
00004c  61e0              STR      r0,[r4,#0x1c]         ;344
00004e  f8840028          STRB     r0,[r4,#0x28]         ;345
000052  68e0              LDR      r0,[r4,#0xc]          ;346
000054  f7fffffe          BL       LoopQueueInitialize
000058  2001              MOVS     r0,#1                 ;347
00005a  e7d5              B        |L23.8|
;;;349    static X_Void tm_ProtocolRecvProcess(sTestModeRecvParam *p_manager,uint8_t data)
                          ENDP


                          AREA ||i.tm_ProtocolRecvProcess||, CODE, READONLY, ALIGN=2

                  tm_ProtocolRecvProcess PROC
;;;348    }
;;;349    static X_Void tm_ProtocolRecvProcess(sTestModeRecvParam *p_manager,uint8_t data)
000000  b5f8              PUSH     {r3-r7,lr}
;;;350    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;351    	uint16_t index,length;
;;;352    	sTestModeParamExtern *p_ext = (sTestModeParamExtern*)p_manager ->p_state_param;
000006  69a7              LDR      r7,[r4,#0x18]
;;;353    	if(p_manager == X_Null) {return;}
000008  b904              CBNZ     r4,|L24.12|
                  |L24.10|
;;;354    
;;;355    	if(p_manager ->isHeaderFind == X_False)
;;;356    	{
;;;357    		if(TM_find_header(p_manager,data) == X_True)
;;;358    		{
;;;359    			p_manager ->isHeaderFind = X_True;
;;;360    			p_manager ->temp_rec_buf[0] = (uint8_t)FOP_idle;
;;;361    		}
;;;362    	}
;;;363    	else
;;;364    	{	
;;;365    		TM_find_others(p_manager,data);
;;;366    		
;;;367    		if(p_manager ->temp_rec_buf[0] != FOP_inprocess)
;;;368    		{
;;;369    			p_manager ->isHeaderFind = X_False;
;;;370    			if(p_manager ->temp_rec_buf[0] == FOP_successed)
;;;371    			{
;;;372    				if(memcmp(&p_manager ->temp_rec_buf[TEST_MODE_RECV_EXTERN_LENGTH + 2],"STOP",4) == 0)
;;;373    				{
;;;374    					ClearLoopQueue(p_manager ->p_queue);
;;;375    					StopAllProcessInit(p_manager ->p_state_param);
;;;376    					mStateMachineStateSet(p_manager ->p_state_machine,TM_CommandAnalysis);
;;;377    					
;;;378    					TmLogPrintf(TEST_MODE_BASIC_LOG_DEBUG,(p_manager ->send_buf_method,"@ test mode kill all process \r\n"));
;;;379    					return;
;;;380    				}
;;;381    				
;;;382    				index = GetLoopQueueUsedNodeNumber(p_manager ->p_queue);
;;;383    				if(index > 0 || p_ext ->isNewCommandCome == X_True)
;;;384    				{
;;;385    					TmLogPrintf(TEST_MODE_BASIC_LOG_DEBUG,(p_manager ->send_buf_method,
;;;386    					"\r\n ------- the latest command still in process , please wait or use command :TMSTOP to kill it \r\n"));
;;;387    				}
;;;388    				
;;;389    				p_manager ->cur_push_num = LoopQueueFirstIn(p_manager ->p_queue,X_False);
;;;390    				if(p_manager ->cur_push_num < p_manager ->max_cache_num)
;;;391    				{
;;;392    					index = p_manager ->cur_push_num*p_manager ->max_command_length;
;;;393    					CopyBuffer(&p_manager ->temp_rec_buf[1],&length,2);
;;;394    					if(length > p_manager ->max_command_length) 
;;;395    					{
;;;396    						RealseLoopQueueBuf(p_manager ->p_queue,p_manager ->cur_push_num);
;;;397    						return;
;;;398    					}
;;;399    					CopyBuffer(&p_manager ->temp_rec_buf[1],&(p_manager ->p_rec_buf[index]),2);// + 2 for "TM"
;;;400    					CopyBuffer(&p_manager ->temp_rec_buf[TEST_MODE_RECV_EXTERN_LENGTH + 2],&(p_manager ->p_rec_buf[index+2]),length);// + 2 for "TM",+2 for length
;;;401    				}
;;;402    			}
;;;403    		}
;;;404    	}
;;;405    	
;;;406    }
00000a  bdf8              POP      {r3-r7,pc}
                  |L24.12|
00000c  69e0              LDR      r0,[r4,#0x1c]         ;355
00000e  b950              CBNZ     r0,|L24.38|
000010  4631              MOV      r1,r6                 ;357
000012  4620              MOV      r0,r4                 ;357
000014  f7fffffe          BL       TM_find_header
000018  2801              CMP      r0,#1                 ;357
00001a  d168              BNE      |L24.238|
00001c  61e0              STR      r0,[r4,#0x1c]         ;359
00001e  2000              MOVS     r0,#0                 ;360
000020  f8840028          STRB     r0,[r4,#0x28]         ;360
000024  e063              B        |L24.238|
                  |L24.38|
000026  4631              MOV      r1,r6                 ;365
000028  4620              MOV      r0,r4                 ;365
00002a  f7fffffe          BL       TM_find_others
00002e  f8940028          LDRB     r0,[r4,#0x28]         ;367
000032  2803              CMP      r0,#3                 ;367
000034  d05b              BEQ      |L24.238|
000036  2000              MOVS     r0,#0                 ;369
000038  61e0              STR      r0,[r4,#0x1c]         ;369
00003a  f8940028          LDRB     r0,[r4,#0x28]         ;370
00003e  2801              CMP      r0,#1                 ;370
000040  d155              BNE      |L24.238|
000042  2204              MOVS     r2,#4                 ;372
000044  a12b              ADR      r1,|L24.244|
000046  f104002d          ADD      r0,r4,#0x2d           ;372
00004a  f7fffffe          BL       memcmp
00004e  b980              CBNZ     r0,|L24.114|
000050  68e0              LDR      r0,[r4,#0xc]          ;374
000052  f7fffffe          BL       ClearLoopQueue
000056  69a0              LDR      r0,[r4,#0x18]         ;375
000058  f7fffffe          BL       StopAllProcessInit
00005c  2101              MOVS     r1,#1                 ;376
00005e  6960              LDR      r0,[r4,#0x14]         ;376
000060  f7fffffe          BL       mStateMachineStateSet
000064  bf00              NOP                            ;378
000066  a125              ADR      r1,|L24.252|
000068  6920              LDR      r0,[r4,#0x10]         ;378
00006a  f7fffffe          BL       mTM_SendString
00006e  bf00              NOP                            ;378
000070  e7cb              B        |L24.10|
                  |L24.114|
000072  68e0              LDR      r0,[r4,#0xc]          ;382
000074  f7fffffe          BL       GetLoopQueueUsedNodeNumber
000078  4605              MOV      r5,r0                 ;382
00007a  2d00              CMP      r5,#0                 ;383
00007c  dc03              BGT      |L24.134|
00007e  f8d70814          LDR      r0,[r7,#0x814]        ;383
000082  2801              CMP      r0,#1                 ;383
000084  d105              BNE      |L24.146|
                  |L24.134|
000086  bf00              NOP                            ;385
000088  4924              LDR      r1,|L24.284|
00008a  6920              LDR      r0,[r4,#0x10]         ;385
00008c  f7fffffe          BL       mTM_SendString
000090  bf00              NOP                            ;385
                  |L24.146|
000092  2100              MOVS     r1,#0                 ;389
000094  68e0              LDR      r0,[r4,#0xc]          ;389
000096  f7fffffe          BL       LoopQueueFirstIn
00009a  8420              STRH     r0,[r4,#0x20]         ;389
00009c  8c20              LDRH     r0,[r4,#0x20]         ;390
00009e  88a1              LDRH     r1,[r4,#4]            ;390
0000a0  4288              CMP      r0,r1                 ;390
0000a2  da24              BGE      |L24.238|
0000a4  8c20              LDRH     r0,[r4,#0x20]         ;392
0000a6  8921              LDRH     r1,[r4,#8]            ;392
0000a8  4348              MULS     r0,r1,r0              ;392
0000aa  b285              UXTH     r5,r0                 ;392
0000ac  2202              MOVS     r2,#2                 ;393
0000ae  4669              MOV      r1,sp                 ;393
0000b0  f1040029          ADD      r0,r4,#0x29           ;393
0000b4  f7fffffe          BL       __CopyBuffer
0000b8  8920              LDRH     r0,[r4,#8]            ;394
0000ba  f8bd1000          LDRH     r1,[sp,#0]            ;394
0000be  4288              CMP      r0,r1                 ;394
0000c0  da05              BGE      |L24.206|
0000c2  f8941020          LDRB     r1,[r4,#0x20]         ;396
0000c6  68e0              LDR      r0,[r4,#0xc]          ;396
0000c8  f7fffffe          BL       RealseLoopQueueBuf
0000cc  e79d              B        |L24.10|
                  |L24.206|
0000ce  6820              LDR      r0,[r4,#0]            ;399
0000d0  1941              ADDS     r1,r0,r5              ;399
0000d2  2202              MOVS     r2,#2                 ;399
0000d4  f1040029          ADD      r0,r4,#0x29           ;399
0000d8  f7fffffe          BL       __CopyBuffer
0000dc  1ca8              ADDS     r0,r5,#2              ;400
0000de  6822              LDR      r2,[r4,#0]            ;400
0000e0  1811              ADDS     r1,r2,r0              ;400
0000e2  f8bd2000          LDRH     r2,[sp,#0]            ;400
0000e6  f104002d          ADD      r0,r4,#0x2d           ;400
0000ea  f7fffffe          BL       __CopyBuffer
                  |L24.238|
0000ee  bf00              NOP      
0000f0  e78b              B        |L24.10|
;;;407    static X_Boolean tm_ProtocolRecvGetCommand(sTestModeRecvParam *p_manager,uint8_t *p_command,uint16_t *p_length)
                          ENDP

0000f2  0000              DCW      0x0000
                  |L24.244|
0000f4  53544f50          DCB      "STOP",0
0000f8  00      
0000f9  00                DCB      0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L24.252|
0000fc  40207465          DCB      "@ test mode kill all process \r\n",0
000100  7374206d
000104  6f646520
000108  6b696c6c
00010c  20616c6c
000110  2070726f
000114  63657373
000118  200d0a00
                  |L24.284|
                          DCD      ||.conststring||+0x8c

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  0d0a2028          DCB      "\r\n ( Test Rountine Finished ): \r\n[ %d PASSED ] \r\n"
000004  20546573
000008  7420526f
00000c  756e7469
000010  6e652046
000014  696e6973
000018  68656420
00001c  293a200d
000020  0a5b2025
000024  64205041
000028  53534544
00002c  205d200d
000030  0a      
000031  5b202564          DCB      "[ %d FAILED ] \r\n",0
000035  20464149
000039  4c454420
00003d  5d200d0a
000041  00      
000042  00                DCB      0
000043  00                DCB      0
000044  20544d20          DCB      " TM command data receive error occur , reset to idle re"
000048  636f6d6d
00004c  616e6420
000050  64617461
000054  20726563
000058  65697665
00005c  20657272
000060  6f72206f
000064  63637572
000068  202c2072
00006c  65736574
000070  20746f20
000074  69646c65
000078  207265  
00007b  63656976          DCB      "ceive state!!!\r\n",0
00007f  65207374
000083  61746521
000087  21210d0a
00008b  00      
00008c  0d0a202d          DCB      "\r\n ------- the latest command still in process , plea"
000090  2d2d2d2d
000094  2d2d2074
000098  6865206c
00009c  61746573
0000a0  7420636f
0000a4  6d6d616e
0000a8  64207374
0000ac  696c6c20
0000b0  696e2070
0000b4  726f6365
0000b8  7373202c
0000bc  20706c65
0000c0  61      
0000c1  73652077          DCB      "se wait or use command :TMSTOP to kill it \r\n",0
0000c5  61697420
0000c9  6f722075
0000cd  73652063
0000d1  6f6d6d61
0000d5  6e64203a
0000d9  544d5354
0000dd  4f502074
0000e1  6f206b69
0000e5  6c6c2069
0000e9  74200d0a
0000ed  00      
