; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\segger_rtt_printf.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\segger_rtt_printf.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\HARDWARE\LED -I..\HARDWARE\LCD -I..\HARDWARE\KEY -I..\HARDWARE\SRAM -I..\HARDWARE\SDIO -I..\MALLOC -I..\USMART -I..\HARDWARE\SPI -I..\HARDWARE\W25QXX -I..\FATFS\exfuns -I..\FATFS\src -I..\TEXT -I..\FWLIB\inc -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\I2S -I..\HARDWARE\WM8978 -I..\APP -I..\AUDIOCODEC\wav -I..\new_user -I..\new_user\task -I..\new_user\MVC -I..\..\..\module\common -I..\..\..\module\common\InsertLog -I..\..\..\module\common\loopqueue -I..\..\..\module\common\StateMachine -I..\..\..\module\common\priorityqueue -I..\..\..\module\common\Math -I..\..\..\module\component\const_loop_scheduler -I..\..\..\module\component\const_loop_scheduler\TemplateTask -I..\..\..\module\component\const_loop_scheduler\HierarchicalSM -I..\..\..\module\component\BlockableStateMachine -I..\..\..\module\customize\ButtonModule -I..\..\..\module\external\Segger\SEGGER_RTT_V640\Syscalls -I..\..\..\module\external\Segger\SEGGER_RTT_V640\RTT -I.\RTE\_AudioPlayer -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include" -I"D:\Program Files\ARM\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_COMPILER_PRESENT -DX_TASK_LOG_DEBUG_METHOD=SeggerRTT_LogDebug --omf_browse=..\obj\segger_rtt_printf.crf ..\..\..\module\external\Segger\SEGGER_RTT_V640\RTT\SEGGER_RTT_printf.c]
                          THUMB

                          AREA ||i.SEGGER_RTT_printf||, CODE, READONLY, ALIGN=1

                  SEGGER_RTT_printf PROC
;;;504    */
;;;505    int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
000000  b40f              PUSH     {r0-r3}
000002  b538              PUSH     {r3-r5,lr}
000004  4604              MOV      r4,r0
;;;506      int r;
;;;507      va_list ParamList;
;;;508    
;;;509      va_start(ParamList, sFormat);
000006  a806              ADD      r0,sp,#0x18
000008  9000              STR      r0,[sp,#0]
;;;510      r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
00000a  466a              MOV      r2,sp
00000c  4620              MOV      r0,r4
00000e  9905              LDR      r1,[sp,#0x14]
000010  f7fffffe          BL       SEGGER_RTT_vprintf
000014  4605              MOV      r5,r0
;;;511      va_end(ParamList);
000016  2000              MOVS     r0,#0
000018  9000              STR      r0,[sp,#0]
;;;512      return r;
00001a  4628              MOV      r0,r5
;;;513    }
00001c  bc38              POP      {r3-r5}
00001e  f85dfb14          LDR      pc,[sp],#0x14
;;;514    /*************************** End of file ****************************/
                          ENDP


                          AREA ||i.SEGGER_RTT_vprintf||, CODE, READONLY, ALIGN=1

                  SEGGER_RTT_vprintf PROC
;;;330    */
;;;331    int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b099              SUB      sp,sp,#0x64
000006  4682              MOV      r10,r0
000008  460d              MOV      r5,r1
00000a  4614              MOV      r4,r2
;;;332      char c;
;;;333      SEGGER_RTT_PRINTF_DESC BufferDesc;
;;;334      int v;
;;;335      unsigned NumDigits;
;;;336      unsigned FormatFlags;
;;;337      unsigned FieldWidth;
;;;338      char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];
;;;339    
;;;340      BufferDesc.pBuffer        = acBuffer;
00000c  a803              ADD      r0,sp,#0xc
00000e  9014              STR      r0,[sp,#0x50]
;;;341      BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
000010  2040              MOVS     r0,#0x40
000012  9015              STR      r0,[sp,#0x54]
;;;342      BufferDesc.Cnt            = 0u;
000014  2000              MOVS     r0,#0
000016  9016              STR      r0,[sp,#0x58]
;;;343      BufferDesc.RTTBufferIndex = BufferIndex;
000018  f8cda060          STR      r10,[sp,#0x60]
;;;344      BufferDesc.ReturnValue    = 0;
00001c  9017              STR      r0,[sp,#0x5c]
;;;345    
;;;346      do {
00001e  bf00              NOP      
                  |L2.32|
;;;347        c = *sFormat;
000020  782e              LDRB     r6,[r5,#0]
;;;348        sFormat++;
000022  1c6d              ADDS     r5,r5,#1
;;;349        if (c == 0u) {
000024  b906              CBNZ     r6,|L2.40|
;;;350          break;
000026  e0dd              B        |L2.484|
                  |L2.40|
;;;351        }
;;;352        if (c == '%') {
000028  2e25              CMP      r6,#0x25
00002a  d179              BNE      |L2.288|
;;;353          //
;;;354          // Filter out flags
;;;355          //
;;;356          FormatFlags = 0u;
00002c  2700              MOVS     r7,#0
;;;357          v = 1;
00002e  f04f0901          MOV      r9,#1
;;;358          do {
000032  bf00              NOP      
                  |L2.52|
;;;359            c = *sFormat;
000034  782e              LDRB     r6,[r5,#0]
;;;360            switch (c) {
000036  2e23              CMP      r6,#0x23
000038  d012              BEQ      |L2.96|
00003a  2e2b              CMP      r6,#0x2b
00003c  d00c              BEQ      |L2.88|
00003e  2e2d              CMP      r6,#0x2d
000040  d002              BEQ      |L2.72|
000042  2e30              CMP      r6,#0x30
000044  d110              BNE      |L2.104|
000046  e003              B        |L2.80|
                  |L2.72|
;;;361            case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
000048  f0470701          ORR      r7,r7,#1
00004c  1c6d              ADDS     r5,r5,#1
00004e  e00e              B        |L2.110|
                  |L2.80|
;;;362            case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
000050  f0470702          ORR      r7,r7,#2
000054  1c6d              ADDS     r5,r5,#1
000056  e00a              B        |L2.110|
                  |L2.88|
;;;363            case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
000058  f0470704          ORR      r7,r7,#4
00005c  1c6d              ADDS     r5,r5,#1
00005e  e006              B        |L2.110|
                  |L2.96|
;;;364            case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
000060  f0470708          ORR      r7,r7,#8
000064  1c6d              ADDS     r5,r5,#1
000066  e002              B        |L2.110|
                  |L2.104|
;;;365            default:  v = 0; break;
000068  f04f0900          MOV      r9,#0
00006c  bf00              NOP      
                  |L2.110|
00006e  bf00              NOP                            ;361
;;;366            }
;;;367          } while (v);
000070  f1b90f00          CMP      r9,#0
000074  d1de              BNE      |L2.52|
;;;368          //
;;;369          // filter out field with
;;;370          //
;;;371          FieldWidth = 0u;
000076  f04f0800          MOV      r8,#0
;;;372          do {
00007a  bf00              NOP      
                  |L2.124|
;;;373            c = *sFormat;
00007c  782e              LDRB     r6,[r5,#0]
;;;374            if ((c < '0') || (c > '9')) {
00007e  2e30              CMP      r6,#0x30
000080  db01              BLT      |L2.134|
000082  2e39              CMP      r6,#0x39
000084  dd00              BLE      |L2.136|
                  |L2.134|
;;;375              break;
000086  e007              B        |L2.152|
                  |L2.136|
;;;376            }
;;;377            sFormat++;
000088  1c6d              ADDS     r5,r5,#1
;;;378            FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
00008a  f1a60030          SUB      r0,r6,#0x30
00008e  eb080188          ADD      r1,r8,r8,LSL #2
000092  eb000841          ADD      r8,r0,r1,LSL #1
;;;379          } while (1);
000096  e7f1              B        |L2.124|
                  |L2.152|
000098  bf00              NOP                            ;375
;;;380    
;;;381          //
;;;382          // Filter out precision (number of digits to display)
;;;383          //
;;;384          NumDigits = 0u;
00009a  2000              MOVS     r0,#0
00009c  9013              STR      r0,[sp,#0x4c]
;;;385          c = *sFormat;
00009e  782e              LDRB     r6,[r5,#0]
;;;386          if (c == '.') {
0000a0  2e2e              CMP      r6,#0x2e
0000a2  d112              BNE      |L2.202|
;;;387            sFormat++;
0000a4  1c6d              ADDS     r5,r5,#1
;;;388            do {
0000a6  bf00              NOP      
                  |L2.168|
;;;389              c = *sFormat;
0000a8  782e              LDRB     r6,[r5,#0]
;;;390              if ((c < '0') || (c > '9')) {
0000aa  2e30              CMP      r6,#0x30
0000ac  db01              BLT      |L2.178|
0000ae  2e39              CMP      r6,#0x39
0000b0  dd00              BLE      |L2.180|
                  |L2.178|
;;;391                break;
0000b2  e009              B        |L2.200|
                  |L2.180|
;;;392              }
;;;393              sFormat++;
0000b4  1c6d              ADDS     r5,r5,#1
;;;394              NumDigits = NumDigits * 10u + ((unsigned)c - '0');
0000b6  f1a60030          SUB      r0,r6,#0x30
0000ba  9913              LDR      r1,[sp,#0x4c]
0000bc  eb010181          ADD      r1,r1,r1,LSL #2
0000c0  eb000041          ADD      r0,r0,r1,LSL #1
0000c4  9013              STR      r0,[sp,#0x4c]
;;;395            } while (1);
0000c6  e7ef              B        |L2.168|
                  |L2.200|
0000c8  bf00              NOP                            ;391
                  |L2.202|
;;;396          }
;;;397          //
;;;398          // Filter out length modifier
;;;399          //
;;;400          c = *sFormat;
0000ca  782e              LDRB     r6,[r5,#0]
;;;401          do {
0000cc  bf00              NOP      
                  |L2.206|
;;;402            if ((c == 'l') || (c == 'h')) {
0000ce  2e6c              CMP      r6,#0x6c
0000d0  d001              BEQ      |L2.214|
0000d2  2e68              CMP      r6,#0x68
0000d4  d102              BNE      |L2.220|
                  |L2.214|
;;;403              sFormat++;
0000d6  1c6d              ADDS     r5,r5,#1
;;;404              c = *sFormat;
0000d8  782e              LDRB     r6,[r5,#0]
0000da  e000              B        |L2.222|
                  |L2.220|
;;;405            } else {
;;;406              break;
0000dc  e000              B        |L2.224|
                  |L2.222|
;;;407            }
;;;408          } while (1);
0000de  e7f6              B        |L2.206|
                  |L2.224|
0000e0  bf00              NOP                            ;406
;;;409          //
;;;410          // Handle specifiers
;;;411          //
;;;412          switch (c) {
0000e2  2e70              CMP      r6,#0x70
0000e4  d05d              BEQ      |L2.418|
0000e6  dc08              BGT      |L2.250|
0000e8  2e25              CMP      r6,#0x25
0000ea  d06a              BEQ      |L2.450|
0000ec  2e58              CMP      r6,#0x58
0000ee  d035              BEQ      |L2.348|
0000f0  2e63              CMP      r6,#0x63
0000f2  d009              BEQ      |L2.264|
0000f4  2e64              CMP      r6,#0x64
0000f6  d169              BNE      |L2.460|
0000f8  e013              B        |L2.290|
                  |L2.250|
0000fa  2e73              CMP      r6,#0x73
0000fc  d03c              BEQ      |L2.376|
0000fe  2e75              CMP      r6,#0x75
000100  d01d              BEQ      |L2.318|
000102  2e78              CMP      r6,#0x78
000104  d162              BNE      |L2.460|
000106  e028              B        |L2.346|
                  |L2.264|
;;;413          case 'c': {
;;;414            char c0;
;;;415            v = va_arg(*pParamList, int);
000108  6821              LDR      r1,[r4,#0]
00010a  1d08              ADDS     r0,r1,#4
00010c  6020              STR      r0,[r4,#0]
00010e  f8d19000          LDR      r9,[r1,#0]
;;;416            c0 = (char)v;
000112  f0090bff          AND      r11,r9,#0xff
;;;417            _StoreChar(&BufferDesc, c0);
000116  4659              MOV      r1,r11
000118  a814              ADD      r0,sp,#0x50
00011a  f7fffffe          BL       _StoreChar
;;;418            break;
00011e  e056              B        |L2.462|
                  |L2.288|
000120  e058              B        |L2.468|
                  |L2.290|
;;;419          }
;;;420          case 'd':
;;;421            v = va_arg(*pParamList, int);
000122  6821              LDR      r1,[r4,#0]
000124  1d08              ADDS     r0,r1,#4
000126  6020              STR      r0,[r4,#0]
000128  f8d19000          LDR      r9,[r1,#0]
;;;422            _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
00012c  e9cd8700          STRD     r8,r7,[sp,#0]
000130  220a              MOVS     r2,#0xa
000132  4649              MOV      r1,r9
000134  a814              ADD      r0,sp,#0x50
000136  9b13              LDR      r3,[sp,#0x4c]
000138  f7fffffe          BL       _PrintInt
;;;423            break;
00013c  e047              B        |L2.462|
                  |L2.318|
;;;424          case 'u':
;;;425            v = va_arg(*pParamList, int);
00013e  6821              LDR      r1,[r4,#0]
000140  1d08              ADDS     r0,r1,#4
000142  6020              STR      r0,[r4,#0]
000144  f8d19000          LDR      r9,[r1,#0]
;;;426            _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
000148  e9cd8700          STRD     r8,r7,[sp,#0]
00014c  220a              MOVS     r2,#0xa
00014e  4649              MOV      r1,r9
000150  a814              ADD      r0,sp,#0x50
000152  9b13              LDR      r3,[sp,#0x4c]
000154  f7fffffe          BL       _PrintUnsigned
;;;427            break;
000158  e039              B        |L2.462|
                  |L2.346|
;;;428          case 'x':
;;;429          case 'X':
00015a  bf00              NOP      
                  |L2.348|
;;;430            v = va_arg(*pParamList, int);
00015c  6821              LDR      r1,[r4,#0]
00015e  1d08              ADDS     r0,r1,#4
000160  6020              STR      r0,[r4,#0]
000162  f8d19000          LDR      r9,[r1,#0]
;;;431            _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
000166  e9cd8700          STRD     r8,r7,[sp,#0]
00016a  2210              MOVS     r2,#0x10
00016c  4649              MOV      r1,r9
00016e  a814              ADD      r0,sp,#0x50
000170  9b13              LDR      r3,[sp,#0x4c]
000172  f7fffffe          BL       _PrintUnsigned
;;;432            break;
000176  e02a              B        |L2.462|
                  |L2.376|
;;;433          case 's':
;;;434            {
;;;435              const char * s = va_arg(*pParamList, const char *);
000178  6821              LDR      r1,[r4,#0]
00017a  1d08              ADDS     r0,r1,#4
00017c  6020              STR      r0,[r4,#0]
00017e  f8d1b000          LDR      r11,[r1,#0]
;;;436              do {
000182  bf00              NOP      
                  |L2.388|
;;;437                c = *s;
000184  f89b6000          LDRB     r6,[r11,#0]
;;;438                s++;
000188  f10b0b01          ADD      r11,r11,#1
;;;439                if (c == '\0') {
00018c  b906              CBNZ     r6,|L2.400|
;;;440                  break;
00018e  e006              B        |L2.414|
                  |L2.400|
;;;441                }
;;;442               _StoreChar(&BufferDesc, c);
000190  4631              MOV      r1,r6
000192  a814              ADD      r0,sp,#0x50
000194  f7fffffe          BL       _StoreChar
;;;443              } while (BufferDesc.ReturnValue >= 0);
000198  9817              LDR      r0,[sp,#0x5c]
00019a  2800              CMP      r0,#0
00019c  daf2              BGE      |L2.388|
                  |L2.414|
00019e  bf00              NOP                            ;440
;;;444            }
;;;445            break;
0001a0  e015              B        |L2.462|
                  |L2.418|
;;;446          case 'p':
;;;447            v = va_arg(*pParamList, int);
0001a2  6821              LDR      r1,[r4,#0]
0001a4  1d08              ADDS     r0,r1,#4
0001a6  6020              STR      r0,[r4,#0]
0001a8  f8d19000          LDR      r9,[r1,#0]
;;;448            _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
0001ac  2000              MOVS     r0,#0
0001ae  2108              MOVS     r1,#8
0001b0  460b              MOV      r3,r1
0001b2  2210              MOVS     r2,#0x10
0001b4  e9cd1000          STRD     r1,r0,[sp,#0]
0001b8  4649              MOV      r1,r9
0001ba  a814              ADD      r0,sp,#0x50
0001bc  f7fffffe          BL       _PrintUnsigned
;;;449            break;
0001c0  e005              B        |L2.462|
                  |L2.450|
;;;450          case '%':
;;;451            _StoreChar(&BufferDesc, '%');
0001c2  2125              MOVS     r1,#0x25
0001c4  a814              ADD      r0,sp,#0x50
0001c6  f7fffffe          BL       _StoreChar
;;;452            break;
0001ca  e000              B        |L2.462|
                  |L2.460|
;;;453          default:
;;;454            break;
0001cc  bf00              NOP      
                  |L2.462|
0001ce  bf00              NOP                            ;418
;;;455          }
;;;456          sFormat++;
0001d0  1c6d              ADDS     r5,r5,#1
0001d2  e003              B        |L2.476|
                  |L2.468|
;;;457        } else {
;;;458          _StoreChar(&BufferDesc, c);
0001d4  4631              MOV      r1,r6
0001d6  a814              ADD      r0,sp,#0x50
0001d8  f7fffffe          BL       _StoreChar
                  |L2.476|
;;;459        }
;;;460      } while (BufferDesc.ReturnValue >= 0);
0001dc  9817              LDR      r0,[sp,#0x5c]
0001de  2800              CMP      r0,#0
0001e0  f6bfaf1e          BGE      |L2.32|
                  |L2.484|
0001e4  bf00              NOP                            ;350
;;;461    
;;;462      if (BufferDesc.ReturnValue > 0) {
0001e6  9817              LDR      r0,[sp,#0x5c]
0001e8  2800              CMP      r0,#0
0001ea  dd0a              BLE      |L2.514|
;;;463        //
;;;464        // Write remaining data, if any
;;;465        //
;;;466        if (BufferDesc.Cnt != 0u) {
0001ec  9816              LDR      r0,[sp,#0x58]
0001ee  b120              CBZ      r0,|L2.506|
;;;467          SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
0001f0  a903              ADD      r1,sp,#0xc
0001f2  4650              MOV      r0,r10
0001f4  9a16              LDR      r2,[sp,#0x58]
0001f6  f7fffffe          BL       SEGGER_RTT_Write
                  |L2.506|
;;;468        }
;;;469        BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
0001fa  e9dd1016          LDRD     r1,r0,[sp,#0x58]
0001fe  4408              ADD      r0,r0,r1
000200  9017              STR      r0,[sp,#0x5c]
                  |L2.514|
;;;470      }
;;;471      return BufferDesc.ReturnValue;
000202  9817              LDR      r0,[sp,#0x5c]
;;;472    }
000204  b019              ADD      sp,sp,#0x64
000206  e8bd8ff0          POP      {r4-r11,pc}
;;;473    
                          ENDP


                          AREA ||i._PrintInt||, CODE, READONLY, ALIGN=1

                  _PrintInt PROC
;;;235    */
;;;236    static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
000000  e92d5ffc          PUSH     {r2-r12,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4692              MOV      r10,r2
00000a  4698              MOV      r8,r3
00000c  e9dd450c          LDRD     r4,r5,[sp,#0x30]
;;;237      unsigned Width;
;;;238      int Number;
;;;239    
;;;240      Number = (v < 0) ? -v : v;
000010  2f00              CMP      r7,#0
000012  da01              BGE      |L3.24|
000014  4278              RSBS     r0,r7,#0
000016  e000              B        |L3.26|
                  |L3.24|
000018  4638              MOV      r0,r7
                  |L3.26|
00001a  4683              MOV      r11,r0
;;;241    
;;;242      //
;;;243      // Get actual field width
;;;244      //
;;;245      Width = 1u;
00001c  f04f0901          MOV      r9,#1
;;;246      while (Number >= (int)Base) {
000020  e003              B        |L3.42|
                  |L3.34|
;;;247        Number = (Number / (int)Base);
000022  fb9bfbfa          SDIV     r11,r11,r10
;;;248        Width++;
000026  f1090901          ADD      r9,r9,#1
                  |L3.42|
00002a  45d3              CMP      r11,r10               ;246
00002c  daf9              BGE      |L3.34|
;;;249      }
;;;250      if (NumDigits > Width) {
00002e  45c8              CMP      r8,r9
000030  d900              BLS      |L3.52|
;;;251        Width = NumDigits;
000032  46c1              MOV      r9,r8
                  |L3.52|
;;;252      }
;;;253      if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
000034  b134              CBZ      r4,|L3.68|
000036  2f00              CMP      r7,#0
000038  db03              BLT      |L3.66|
00003a  f0050004          AND      r0,r5,#4
00003e  2804              CMP      r0,#4
000040  d100              BNE      |L3.68|
                  |L3.66|
;;;254        FieldWidth--;
000042  1e64              SUBS     r4,r4,#1
                  |L3.68|
;;;255      }
;;;256    
;;;257      //
;;;258      // Print leading spaces if necessary
;;;259      //
;;;260      if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
000044  f0050002          AND      r0,r5,#2
000048  b110              CBZ      r0,|L3.80|
00004a  f1b80f00          CMP      r8,#0
00004e  d011              BEQ      |L3.116|
                  |L3.80|
000050  f0050001          AND      r0,r5,#1
000054  b970              CBNZ     r0,|L3.116|
;;;261        if (FieldWidth != 0u) {
000056  b16c              CBZ      r4,|L3.116|
;;;262          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
000058  e008              B        |L3.108|
                  |L3.90|
;;;263            FieldWidth--;
00005a  1e64              SUBS     r4,r4,#1
;;;264            _StoreChar(pBufferDesc, ' ');
00005c  2120              MOVS     r1,#0x20
00005e  4630              MOV      r0,r6
000060  f7fffffe          BL       _StoreChar
;;;265            if (pBufferDesc->ReturnValue < 0) {
000064  68f0              LDR      r0,[r6,#0xc]
000066  2800              CMP      r0,#0
000068  da00              BGE      |L3.108|
;;;266              break;
00006a  e002              B        |L3.114|
                  |L3.108|
00006c  b10c              CBZ      r4,|L3.114|
00006e  45a1              CMP      r9,r4                 ;262
000070  d3f3              BCC      |L3.90|
                  |L3.114|
000072  bf00              NOP      
                  |L3.116|
;;;267            }
;;;268          }
;;;269        }
;;;270      }
;;;271      //
;;;272      // Print sign if necessary
;;;273      //
;;;274      if (pBufferDesc->ReturnValue >= 0) {
000074  68f0              LDR      r0,[r6,#0xc]
000076  2800              CMP      r0,#0
000078  db36              BLT      |L3.232|
;;;275        if (v < 0) {
00007a  2f00              CMP      r7,#0
00007c  da05              BGE      |L3.138|
;;;276          v = -v;
00007e  427f              RSBS     r7,r7,#0
;;;277          _StoreChar(pBufferDesc, '-');
000080  212d              MOVS     r1,#0x2d
000082  4630              MOV      r0,r6
000084  f7fffffe          BL       _StoreChar
000088  e007              B        |L3.154|
                  |L3.138|
;;;278        } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
00008a  f0050004          AND      r0,r5,#4
00008e  2804              CMP      r0,#4
000090  d103              BNE      |L3.154|
;;;279          _StoreChar(pBufferDesc, '+');
000092  212b              MOVS     r1,#0x2b
000094  4630              MOV      r0,r6
000096  f7fffffe          BL       _StoreChar
                  |L3.154|
;;;280        } else {
;;;281    
;;;282        }
;;;283        if (pBufferDesc->ReturnValue >= 0) {
00009a  68f0              LDR      r0,[r6,#0xc]
00009c  2800              CMP      r0,#0
00009e  db23              BLT      |L3.232|
;;;284          //
;;;285          // Print leading zeros if necessary
;;;286          //
;;;287          if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
0000a0  f0050002          AND      r0,r5,#2
0000a4  2802              CMP      r0,#2
0000a6  d114              BNE      |L3.210|
0000a8  f0050001          AND      r0,r5,#1
0000ac  b988              CBNZ     r0,|L3.210|
0000ae  f1b80f00          CMP      r8,#0
0000b2  d10e              BNE      |L3.210|
;;;288            if (FieldWidth != 0u) {
0000b4  b16c              CBZ      r4,|L3.210|
;;;289              while ((FieldWidth != 0u) && (Width < FieldWidth)) {
0000b6  e008              B        |L3.202|
                  |L3.184|
;;;290                FieldWidth--;
0000b8  1e64              SUBS     r4,r4,#1
;;;291                _StoreChar(pBufferDesc, '0');
0000ba  2130              MOVS     r1,#0x30
0000bc  4630              MOV      r0,r6
0000be  f7fffffe          BL       _StoreChar
;;;292                if (pBufferDesc->ReturnValue < 0) {
0000c2  68f0              LDR      r0,[r6,#0xc]
0000c4  2800              CMP      r0,#0
0000c6  da00              BGE      |L3.202|
;;;293                  break;
0000c8  e002              B        |L3.208|
                  |L3.202|
0000ca  b10c              CBZ      r4,|L3.208|
0000cc  45a1              CMP      r9,r4                 ;289
0000ce  d3f3              BCC      |L3.184|
                  |L3.208|
0000d0  bf00              NOP      
                  |L3.210|
;;;294                }
;;;295              }
;;;296            }
;;;297          }
;;;298          if (pBufferDesc->ReturnValue >= 0) {
0000d2  68f0              LDR      r0,[r6,#0xc]
0000d4  2800              CMP      r0,#0
0000d6  db07              BLT      |L3.232|
;;;299            //
;;;300            // Print number without sign
;;;301            //
;;;302            _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
0000d8  4643              MOV      r3,r8
0000da  4652              MOV      r2,r10
0000dc  4639              MOV      r1,r7
0000de  4630              MOV      r0,r6
0000e0  e9cd4500          STRD     r4,r5,[sp,#0]
0000e4  f7fffffe          BL       _PrintUnsigned
                  |L3.232|
;;;303          }
;;;304        }
;;;305      }
;;;306    }
0000e8  e8bd9ffc          POP      {r2-r12,pc}
;;;307    
                          ENDP


                          AREA ||i._PrintUnsigned||, CODE, READONLY, ALIGN=2

                  _PrintUnsigned PROC
;;;145    */
;;;146    static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
000000  e92d5ffc          PUSH     {r2-r12,lr}
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
00000c  9c0c              LDR      r4,[sp,#0x30]
;;;147      static const char _aV2C[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
;;;148      unsigned Div;
;;;149      unsigned Digit;
;;;150      unsigned Number;
;;;151      unsigned Width;
;;;152      char c;
;;;153    
;;;154      Number = v;
00000e  f8cd9004          STR      r9,[sp,#4]
;;;155      Digit = 1u;
000012  2701              MOVS     r7,#1
;;;156      //
;;;157      // Get actual field width
;;;158      //
;;;159      Width = 1u;
000014  46bb              MOV      r11,r7
;;;160      while (Number >= Base) {
000016  e005              B        |L4.36|
                  |L4.24|
;;;161        Number = (Number / Base);
000018  9801              LDR      r0,[sp,#4]
00001a  fbb0f0f5          UDIV     r0,r0,r5
00001e  9001              STR      r0,[sp,#4]
;;;162        Width++;
000020  f10b0b01          ADD      r11,r11,#1
                  |L4.36|
000024  9801              LDR      r0,[sp,#4]            ;160
000026  42a8              CMP      r0,r5                 ;160
000028  d2f6              BCS      |L4.24|
;;;163      }
;;;164      if (NumDigits > Width) {
00002a  455e              CMP      r6,r11
00002c  d900              BLS      |L4.48|
;;;165        Width = NumDigits;
00002e  46b3              MOV      r11,r6
                  |L4.48|
;;;166      }
;;;167      //
;;;168      // Print leading chars if necessary
;;;169      //
;;;170      if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
000030  980d              LDR      r0,[sp,#0x34]
000032  f0000001          AND      r0,r0,#1
000036  b9d0              CBNZ     r0,|L4.110|
;;;171        if (FieldWidth != 0u) {
000038  b1cc              CBZ      r4,|L4.110|
;;;172          if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
00003a  980d              LDR      r0,[sp,#0x34]
00003c  f0000002          AND      r0,r0,#2
000040  2802              CMP      r0,#2
000042  d103              BNE      |L4.76|
000044  b916              CBNZ     r6,|L4.76|
;;;173            c = '0';
000046  2030              MOVS     r0,#0x30
000048  9000              STR      r0,[sp,#0]
00004a  e001              B        |L4.80|
                  |L4.76|
;;;174          } else {
;;;175            c = ' ';
00004c  2020              MOVS     r0,#0x20
00004e  9000              STR      r0,[sp,#0]
                  |L4.80|
;;;176          }
;;;177          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
000050  e009              B        |L4.102|
                  |L4.82|
;;;178            FieldWidth--;
000052  1e64              SUBS     r4,r4,#1
;;;179            _StoreChar(pBufferDesc, c);
000054  4640              MOV      r0,r8
000056  9900              LDR      r1,[sp,#0]
000058  f7fffffe          BL       _StoreChar
;;;180            if (pBufferDesc->ReturnValue < 0) {
00005c  f8d8000c          LDR      r0,[r8,#0xc]
000060  2800              CMP      r0,#0
000062  da00              BGE      |L4.102|
;;;181              break;
000064  e002              B        |L4.108|
                  |L4.102|
000066  b10c              CBZ      r4,|L4.108|
000068  45a3              CMP      r11,r4                ;177
00006a  d3f2              BCC      |L4.82|
                  |L4.108|
00006c  bf00              NOP      
                  |L4.110|
;;;182            }
;;;183          }
;;;184        }
;;;185      }
;;;186      if (pBufferDesc->ReturnValue >= 0) {
00006e  f8d8000c          LDR      r0,[r8,#0xc]
000072  2800              CMP      r0,#0
000074  db35              BLT      |L4.226|
;;;187        //
;;;188        // Compute Digit.
;;;189        // Loop until Digit has the value of the highest digit required.
;;;190        // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
;;;191        //
;;;192        while (1) {
000076  e009              B        |L4.140|
                  |L4.120|
;;;193          if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
000078  2e01              CMP      r6,#1
00007a  d901              BLS      |L4.128|
;;;194            NumDigits--;
00007c  1e76              SUBS     r6,r6,#1
00007e  e004              B        |L4.138|
                  |L4.128|
;;;195          } else {
;;;196            Div = v / Digit;
000080  fbb9faf7          UDIV     r10,r9,r7
;;;197            if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
000084  45aa              CMP      r10,r5
000086  d200              BCS      |L4.138|
;;;198              break;
000088  e001              B        |L4.142|
                  |L4.138|
;;;199            }
;;;200          }
;;;201          Digit *= Base;
00008a  436f              MULS     r7,r5,r7
                  |L4.140|
00008c  e7f4              B        |L4.120|
                  |L4.142|
00008e  bf00              NOP                            ;198
;;;202        }
;;;203        //
;;;204        // Output digits
;;;205        //
;;;206        do {
000090  bf00              NOP      
                  |L4.146|
;;;207          Div = v / Digit;
000092  fbb9faf7          UDIV     r10,r9,r7
;;;208          v -= Div * Digit;
000096  fb0a9917          MLS      r9,r10,r7,r9
;;;209          _StoreChar(pBufferDesc, _aV2C[Div]);
00009a  4813              LDR      r0,|L4.232|
00009c  f810100a          LDRB     r1,[r0,r10]
0000a0  4640              MOV      r0,r8
0000a2  f7fffffe          BL       _StoreChar
;;;210          if (pBufferDesc->ReturnValue < 0) {
0000a6  f8d8000c          LDR      r0,[r8,#0xc]
0000aa  2800              CMP      r0,#0
0000ac  da00              BGE      |L4.176|
;;;211            break;
0000ae  e003              B        |L4.184|
                  |L4.176|
;;;212          }
;;;213          Digit /= Base;
0000b0  fbb7f7f5          UDIV     r7,r7,r5
;;;214        } while (Digit);
0000b4  2f00              CMP      r7,#0
0000b6  d1ec              BNE      |L4.146|
                  |L4.184|
0000b8  bf00              NOP                            ;211
;;;215        //
;;;216        // Print trailing spaces if necessary
;;;217        //
;;;218        if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
0000ba  980d              LDR      r0,[sp,#0x34]
0000bc  f0000001          AND      r0,r0,#1
0000c0  b178              CBZ      r0,|L4.226|
;;;219          if (FieldWidth != 0u) {
0000c2  b174              CBZ      r4,|L4.226|
;;;220            while ((FieldWidth != 0u) && (Width < FieldWidth)) {
0000c4  e009              B        |L4.218|
                  |L4.198|
;;;221              FieldWidth--;
0000c6  1e64              SUBS     r4,r4,#1
;;;222              _StoreChar(pBufferDesc, ' ');
0000c8  2120              MOVS     r1,#0x20
0000ca  4640              MOV      r0,r8
0000cc  f7fffffe          BL       _StoreChar
;;;223              if (pBufferDesc->ReturnValue < 0) {
0000d0  f8d8000c          LDR      r0,[r8,#0xc]
0000d4  2800              CMP      r0,#0
0000d6  da00              BGE      |L4.218|
;;;224                break;
0000d8  e002              B        |L4.224|
                  |L4.218|
0000da  b10c              CBZ      r4,|L4.224|
0000dc  45a3              CMP      r11,r4                ;220
0000de  d3f2              BCC      |L4.198|
                  |L4.224|
0000e0  bf00              NOP      
                  |L4.226|
;;;225              }
;;;226            }
;;;227          }
;;;228        }
;;;229      }
;;;230    }
0000e2  e8bd9ffc          POP      {r2-r12,pc}
;;;231    
                          ENDP

0000e6  0000              DCW      0x0000
                  |L4.232|
                          DCD      _aV2C

                          AREA ||i._StoreChar||, CODE, READONLY, ALIGN=1

                  _StoreChar PROC
;;;120    */
;;;121    static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;122      unsigned Cnt;
;;;123    
;;;124      Cnt = p->Cnt;
000006  68a5              LDR      r5,[r4,#8]
;;;125      if ((Cnt + 1u) <= p->BufferSize) {
000008  1c68              ADDS     r0,r5,#1
00000a  6861              LDR      r1,[r4,#4]
00000c  4281              CMP      r1,r0
00000e  d306              BCC      |L5.30|
;;;126        *(p->pBuffer + Cnt) = c;
000010  6820              LDR      r0,[r4,#0]
000012  5546              STRB     r6,[r0,r5]
;;;127        p->Cnt = Cnt + 1u;
000014  1c68              ADDS     r0,r5,#1
000016  60a0              STR      r0,[r4,#8]
;;;128        p->ReturnValue++;
000018  68e0              LDR      r0,[r4,#0xc]
00001a  1c40              ADDS     r0,r0,#1
00001c  60e0              STR      r0,[r4,#0xc]
                  |L5.30|
;;;129      }
;;;130      //
;;;131      // Write part of string, when the buffer is full
;;;132      //
;;;133      if (p->Cnt == p->BufferSize) {
00001e  e9d41001          LDRD     r1,r0,[r4,#4]
000022  4288              CMP      r0,r1
000024  d10d              BNE      |L5.66|
;;;134        if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
000026  68a2              LDR      r2,[r4,#8]
000028  6821              LDR      r1,[r4,#0]
00002a  6920              LDR      r0,[r4,#0x10]
00002c  f7fffffe          BL       SEGGER_RTT_Write
000030  68a1              LDR      r1,[r4,#8]
000032  4288              CMP      r0,r1
000034  d003              BEQ      |L5.62|
;;;135          p->ReturnValue = -1;
000036  f04f30ff          MOV      r0,#0xffffffff
00003a  60e0              STR      r0,[r4,#0xc]
00003c  e001              B        |L5.66|
                  |L5.62|
;;;136        } else {
;;;137          p->Cnt = 0u;
00003e  2000              MOVS     r0,#0
000040  60a0              STR      r0,[r4,#8]
                  |L5.66|
;;;138        }
;;;139      }
;;;140    }
000042  bd70              POP      {r4-r6,pc}
;;;141    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  _aV2C
000000  30313233          DCB      0x30,0x31,0x32,0x33
000004  34353637          DCB      0x34,0x35,0x36,0x37
000008  38394142          DCB      0x38,0x39,0x41,0x42
00000c  43444546          DCB      0x43,0x44,0x45,0x46
