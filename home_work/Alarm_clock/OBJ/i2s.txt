; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\i2s.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\i2s.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\HARDWARE\LED -I..\HARDWARE\LCD -I..\HARDWARE\KEY -I..\HARDWARE\SRAM -I..\HARDWARE\SDIO -I..\MALLOC -I..\USMART -I..\HARDWARE\SPI -I..\HARDWARE\W25QXX -I..\FATFS\exfuns -I..\FATFS\src -I..\TEXT -I..\FWLIB\inc -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\I2S -I..\HARDWARE\WM8978 -I..\APP -I..\AUDIOCODEC\wav -I..\new_user -I..\new_user\task -I..\new_user\MVC -I..\..\..\module\common -I..\..\..\module\common\InsertLog -I..\..\..\module\common\loopqueue -I..\..\..\module\common\StateMachine -I..\..\..\module\common\priorityqueue -I..\..\..\module\common\Math -I..\..\..\module\component\const_loop_scheduler -I..\..\..\module\component\const_loop_scheduler\TemplateTask -I..\..\..\module\component\const_loop_scheduler\HierarchicalSM -I..\..\..\module\component\BlockableStateMachine -I..\..\..\module\customize\ButtonModule -I..\..\..\module\external\Segger\SEGGER_RTT_V640\Syscalls -I..\..\..\module\external\Segger\SEGGER_RTT_V640\RTT -I.\RTE\_AudioPlayer -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include" -I"D:\Program Files\ARM\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_COMPILER_PRESENT -DX_TASK_LOG_DEBUG_METHOD=SeggerRTT_LogDebug --omf_browse=..\obj\i2s.crf ..\HARDWARE\I2S\i2s.c]
                          THUMB

                          AREA ||i.DMA1_Stream4_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Stream4_IRQHandler PROC
;;;148    //DMA1_Stream4中断服务函数
;;;149    void DMA1_Stream4_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;150    {      
;;;151    	if(DMA_GetITStatus(DMA1_Stream4,DMA_IT_TCIF4)==SET)////DMA1_Stream4,传输完成标志
000002  4907              LDR      r1,|L1.32|
000004  4807              LDR      r0,|L1.36|
000006  f7fffffe          BL       DMA_GetITStatus
00000a  2801              CMP      r0,#1
00000c  d106              BNE      |L1.28|
;;;152    	{ 
;;;153    		DMA_ClearITPendingBit(DMA1_Stream4,DMA_IT_TCIF4);
00000e  4904              LDR      r1,|L1.32|
000010  4804              LDR      r0,|L1.36|
000012  f7fffffe          BL       DMA_ClearITPendingBit
;;;154          	i2s_tx_callback();	//执行回调函数,读取数据等操作在这里面处理  
000016  4804              LDR      r0,|L1.40|
000018  6800              LDR      r0,[r0,#0]  ; i2s_tx_callback
00001a  4780              BLX      r0
                  |L1.28|
;;;155    	}   											 
;;;156    }  
00001c  bd10              POP      {r4,pc}
;;;157    //I2S开始播放
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
                          DCD      0x20008020
                  |L1.36|
                          DCD      0x40026070
                  |L1.40|
                          DCD      i2s_tx_callback

                          AREA ||i.I2S2_Init||, CODE, READONLY, ALIGN=2

                  I2S2_Init PROC
;;;26     //参数I2S_DataFormat： @ref SPI_I2S_Data_Format :数据长度,I2S_DataFormat_16b,16位标准;I2S_DataFormat_16bextended,16位扩展(frame=32bit);I2S_DataFormat_24b,24位;I2S_DataFormat_32b,32位.
;;;27     void I2S2_Init(u16 I2S_Standard,u16 I2S_Mode,u16 I2S_Clock_Polarity,u16 I2S_DataFormat)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;28     { 
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;29       I2S_InitTypeDef I2S_InitStructure;
;;;30     	
;;;31     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);//使能SPI2时钟
00000c  2101              MOVS     r1,#1
00000e  0388              LSLS     r0,r1,#14
000010  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;32     	
;;;33     	RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2,ENABLE); //复位SPI2
000014  2101              MOVS     r1,#1
000016  0388              LSLS     r0,r1,#14
000018  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;34     	RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2,DISABLE);//结束复位
00001c  2100              MOVS     r1,#0
00001e  f44f4080          MOV      r0,#0x4000
000022  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;35       
;;;36     	I2S_InitStructure.I2S_Mode=I2S_Mode;//IIS模式
000026  f8ad7000          STRH     r7,[sp,#0]
;;;37     	I2S_InitStructure.I2S_Standard=I2S_Standard;//IIS标准
00002a  f8ad4002          STRH     r4,[sp,#2]
;;;38     	I2S_InitStructure.I2S_DataFormat=I2S_DataFormat;//IIS数据长度
00002e  f8ad6004          STRH     r6,[sp,#4]
;;;39     	I2S_InitStructure.I2S_MCLKOutput=I2S_MCLKOutput_Disable;//主时钟输出禁止
000032  2000              MOVS     r0,#0
000034  f8ad0006          STRH     r0,[sp,#6]
;;;40     	I2S_InitStructure.I2S_AudioFreq=I2S_AudioFreq_Default;//IIS频率设置
000038  2002              MOVS     r0,#2
00003a  9002              STR      r0,[sp,#8]
;;;41     	I2S_InitStructure.I2S_CPOL=I2S_Clock_Polarity;//空闲状态时钟电平
00003c  f8ad500c          STRH     r5,[sp,#0xc]
;;;42     	I2S_Init(SPI2,&I2S_InitStructure);//初始化IIS
000040  4669              MOV      r1,sp
000042  4807              LDR      r0,|L2.96|
000044  f7fffffe          BL       I2S_Init
;;;43     
;;;44      
;;;45     	SPI_I2S_DMACmd(SPI2,SPI_I2S_DMAReq_Tx,ENABLE);//SPI2 TX DMA请求使能.
000048  2201              MOVS     r2,#1
00004a  2102              MOVS     r1,#2
00004c  4804              LDR      r0,|L2.96|
00004e  f7fffffe          BL       SPI_I2S_DMACmd
;;;46       I2S_Cmd(SPI2,ENABLE);//SPI2 I2S EN使能.	
000052  2101              MOVS     r1,#1
000054  4802              LDR      r0,|L2.96|
000056  f7fffffe          BL       I2S_Cmd
;;;47     } 
00005a  e8bd81ff          POP      {r0-r8,pc}
;;;48     //采样率计算公式:Fs=I2SxCLK/[256*(2*I2SDIV+ODD)]
                          ENDP

00005e  0000              DCW      0x0000
                  |L2.96|
                          DCD      0x40003800

                          AREA ||i.I2S2_SampleRate_Set||, CODE, READONLY, ALIGN=2

                  I2S2_SampleRate_Set PROC
;;;74     //返回值:0,设置成功;1,无法设置.
;;;75     u8 I2S2_SampleRate_Set(u32 samplerate)
000000  b570              PUSH     {r4-r6,lr}
;;;76     { 
000002  4605              MOV      r5,r0
;;;77     	u8 i=0; 
000004  2400              MOVS     r4,#0
;;;78     	u32 tempreg=0;
000006  2600              MOVS     r6,#0
;;;79     	samplerate/=10;//缩小10倍   
000008  200a              MOVS     r0,#0xa
00000a  fbb5f5f0          UDIV     r5,r5,r0
;;;80     	
;;;81     	for(i=0;i<(sizeof(I2S_PSC_TBL)/10);i++)//看看改采样率是否可以支持
00000e  bf00              NOP      
000010  e009              B        |L3.38|
                  |L3.18|
;;;82     	{
;;;83     		if(samplerate==I2S_PSC_TBL[i][0])break;
000012  eb040084          ADD      r0,r4,r4,LSL #2
000016  491f              LDR      r1,|L3.148|
000018  f8310010          LDRH     r0,[r1,r0,LSL #1]
00001c  42a8              CMP      r0,r5
00001e  d100              BNE      |L3.34|
000020  e003              B        |L3.42|
                  |L3.34|
000022  1c60              ADDS     r0,r4,#1              ;81
000024  b2c4              UXTB     r4,r0                 ;81
                  |L3.38|
000026  2c0b              CMP      r4,#0xb               ;81
000028  d3f3              BCC      |L3.18|
                  |L3.42|
00002a  bf00              NOP      
;;;84     	}
;;;85      
;;;86     	RCC_PLLI2SCmd(DISABLE);//先关闭PLLI2S
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       RCC_PLLI2SCmd
;;;87     	if(i==(sizeof(I2S_PSC_TBL)/10))return 1;//搜遍了也找不到
000032  2c0b              CMP      r4,#0xb
000034  d101              BNE      |L3.58|
000036  2001              MOVS     r0,#1
                  |L3.56|
;;;88     	RCC_PLLI2SConfig((u32)I2S_PSC_TBL[i][1],(u32)I2S_PSC_TBL[i][2]);//设置I2SxCLK的频率(x=2)  设置PLLI2SN PLLI2SR
;;;89      
;;;90     	RCC->CR|=1<<26;					//开启I2S时钟
;;;91     	while((RCC->CR&1<<27)==0);		//等待I2S时钟开启成功. 
;;;92     	tempreg=I2S_PSC_TBL[i][3]<<0;	//设置I2SDIV
;;;93     	tempreg|=I2S_PSC_TBL[i][4]<<8;	//设置ODD位
;;;94     	tempreg|=1<<9;					//使能MCKOE位,输出MCK
;;;95     	SPI2->I2SPR=tempreg;			//设置I2SPR寄存器 
;;;96     	return 0;
;;;97     }  
000038  bd70              POP      {r4-r6,pc}
                  |L3.58|
00003a  eb040284          ADD      r2,r4,r4,LSL #2       ;88
00003e  4b15              LDR      r3,|L3.148|
000040  eb030242          ADD      r2,r3,r2,LSL #1       ;88
000044  8891              LDRH     r1,[r2,#4]            ;88
000046  eb040284          ADD      r2,r4,r4,LSL #2       ;88
00004a  eb030242          ADD      r2,r3,r2,LSL #1       ;88
00004e  8850              LDRH     r0,[r2,#2]            ;88
000050  f7fffffe          BL       RCC_PLLI2SConfig
000054  4810              LDR      r0,|L3.152|
000056  6800              LDR      r0,[r0,#0]            ;90
000058  f0406080          ORR      r0,r0,#0x4000000      ;90
00005c  490e              LDR      r1,|L3.152|
00005e  6008              STR      r0,[r1,#0]            ;90
000060  bf00              NOP                            ;91
                  |L3.98|
000062  480d              LDR      r0,|L3.152|
000064  6800              LDR      r0,[r0,#0]            ;91
000066  f0006000          AND      r0,r0,#0x8000000      ;91
00006a  2800              CMP      r0,#0                 ;91
00006c  d0f9              BEQ      |L3.98|
00006e  eb040084          ADD      r0,r4,r4,LSL #2       ;92
000072  4908              LDR      r1,|L3.148|
000074  eb010040          ADD      r0,r1,r0,LSL #1       ;92
000078  88c6              LDRH     r6,[r0,#6]            ;92
00007a  eb040084          ADD      r0,r4,r4,LSL #2       ;93
00007e  eb010040          ADD      r0,r1,r0,LSL #1       ;93
000082  8900              LDRH     r0,[r0,#8]            ;93
000084  ea462600          ORR      r6,r6,r0,LSL #8       ;93
000088  f4467600          ORR      r6,r6,#0x200          ;94
00008c  4903              LDR      r1,|L3.156|
00008e  800e              STRH     r6,[r1,#0]            ;95
000090  2000              MOVS     r0,#0                 ;96
000092  e7d1              B        |L3.56|
;;;98     //I2S2 TX DMA配置
                          ENDP

                  |L3.148|
                          DCD      I2S_PSC_TBL
                  |L3.152|
                          DCD      0x40023800
                  |L3.156|
                          DCD      0x40003820

                          AREA ||i.I2S2_TX_DMA_Init||, CODE, READONLY, ALIGN=2

                  I2S2_TX_DMA_Init PROC
;;;102    //num:每次传输数据量
;;;103    void I2S2_TX_DMA_Init(u8* buf0,u8 *buf1,u16 num)
000000  b570              PUSH     {r4-r6,lr}
;;;104    {  
000002  b090              SUB      sp,sp,#0x40
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;105    	NVIC_InitTypeDef   NVIC_InitStructure;
;;;106    	DMA_InitTypeDef  DMA_InitStructure;
;;;107    	
;;;108     
;;;109      RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1,ENABLE);//DMA1时钟使能 
00000a  2101              MOVS     r1,#1
00000c  0548              LSLS     r0,r1,#21
00000e  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;110    	
;;;111    	DMA_DeInit(DMA1_Stream4);
000012  4822              LDR      r0,|L4.156|
000014  f7fffffe          BL       DMA_DeInit
;;;112    	while (DMA_GetCmdStatus(DMA1_Stream4) != DISABLE){}//等待DMA1_Stream1可配置 
000018  bf00              NOP      
                  |L4.26|
00001a  4820              LDR      r0,|L4.156|
00001c  f7fffffe          BL       DMA_GetCmdStatus
000020  2800              CMP      r0,#0
000022  d1fa              BNE      |L4.26|
;;;113    		
;;;114      /* 配置 DMA Stream */
;;;115    
;;;116      DMA_InitStructure.DMA_Channel = DMA_Channel_0;  //通道0 SPI2_TX通道 
000024  9000              STR      r0,[sp,#0]
;;;117      DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&SPI2->DR;//外设地址为:(u32)&SPI2->DR
000026  481e              LDR      r0,|L4.160|
000028  9001              STR      r0,[sp,#4]
;;;118      DMA_InitStructure.DMA_Memory0BaseAddr = (u32)buf0;//DMA 存储器0地址
00002a  9402              STR      r4,[sp,#8]
;;;119      DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;//存储器到外设模式
00002c  2040              MOVS     r0,#0x40
00002e  9003              STR      r0,[sp,#0xc]
;;;120      DMA_InitStructure.DMA_BufferSize = num;//数据传输量 
000030  9504              STR      r5,[sp,#0x10]
;;;121      DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;//外设非增量模式
000032  2000              MOVS     r0,#0
000034  9005              STR      r0,[sp,#0x14]
;;;122      DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;//存储器增量模式
000036  f44f6080          MOV      r0,#0x400
00003a  9006              STR      r0,[sp,#0x18]
;;;123      DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;//外设数据长度:16位
00003c  0040              LSLS     r0,r0,#1
00003e  9007              STR      r0,[sp,#0x1c]
;;;124      DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;//存储器数据长度：16位 
000040  0080              LSLS     r0,r0,#2
000042  9008              STR      r0,[sp,#0x20]
;;;125      DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;// 使用循环模式 
000044  1140              ASRS     r0,r0,#5
000046  9009              STR      r0,[sp,#0x24]
;;;126      DMA_InitStructure.DMA_Priority = DMA_Priority_High;//高优先级
000048  0240              LSLS     r0,r0,#9
00004a  900a              STR      r0,[sp,#0x28]
;;;127      DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable; //不使用FIFO模式        
00004c  2000              MOVS     r0,#0
00004e  900b              STR      r0,[sp,#0x2c]
;;;128      DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
000050  900c              STR      r0,[sp,#0x30]
;;;129      DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;//外设突发单次传输
000052  900d              STR      r0,[sp,#0x34]
;;;130      DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;//存储器突发单次传输
000054  900e              STR      r0,[sp,#0x38]
;;;131      DMA_Init(DMA1_Stream4, &DMA_InitStructure);//初始化DMA Stream
000056  4669              MOV      r1,sp
000058  4810              LDR      r0,|L4.156|
00005a  f7fffffe          BL       DMA_Init
;;;132    	
;;;133    	DMA_DoubleBufferModeConfig(DMA1_Stream4,(u32)buf1,DMA_Memory_0);//双缓冲模式配置
00005e  2200              MOVS     r2,#0
000060  4631              MOV      r1,r6
000062  480e              LDR      r0,|L4.156|
000064  f7fffffe          BL       DMA_DoubleBufferModeConfig
;;;134     
;;;135      DMA_DoubleBufferModeCmd(DMA1_Stream4,ENABLE);//双缓冲模式开启
000068  2101              MOVS     r1,#1
00006a  480c              LDR      r0,|L4.156|
00006c  f7fffffe          BL       DMA_DoubleBufferModeCmd
;;;136     
;;;137      DMA_ITConfig(DMA1_Stream4,DMA_IT_TC,ENABLE);//开启传输完成中断
000070  2201              MOVS     r2,#1
000072  2110              MOVS     r1,#0x10
000074  4809              LDR      r0,|L4.156|
000076  f7fffffe          BL       DMA_ITConfig
;;;138    	
;;;139    	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Stream4_IRQn; 
00007a  200f              MOVS     r0,#0xf
00007c  f88d003c          STRB     r0,[sp,#0x3c]
;;;140      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;//抢占优先级0
000080  2000              MOVS     r0,#0
000082  f88d003d          STRB     r0,[sp,#0x3d]
;;;141      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;//子优先级0
000086  f88d003e          STRB     r0,[sp,#0x3e]
;;;142      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;//使能外部中断通道
00008a  2001              MOVS     r0,#1
00008c  f88d003f          STRB     r0,[sp,#0x3f]
;;;143      NVIC_Init(&NVIC_InitStructure);//配置
000090  a80f              ADD      r0,sp,#0x3c
000092  f7fffffe          BL       NVIC_Init
;;;144      
;;;145    }  
000096  b010              ADD      sp,sp,#0x40
000098  bd70              POP      {r4-r6,pc}
;;;146    //I2S DMA回调函数指针
                          ENDP

00009a  0000              DCW      0x0000
                  |L4.156|
                          DCD      0x40026070
                  |L4.160|
                          DCD      0x4000380c

                          AREA ||i.I2S_Play_Start||, CODE, READONLY, ALIGN=2

                  I2S_Play_Start PROC
;;;157    //I2S开始播放
;;;158    void I2S_Play_Start(void)
000000  b510              PUSH     {r4,lr}
;;;159    {   	  
;;;160    	DMA_Cmd(DMA1_Stream4,ENABLE);//开启DMA TX传输,开始播放 		
000002  2101              MOVS     r1,#1
000004  4801              LDR      r0,|L5.12|
000006  f7fffffe          BL       DMA_Cmd
;;;161    }
00000a  bd10              POP      {r4,pc}
;;;162    //关闭I2S播放
                          ENDP

                  |L5.12|
                          DCD      0x40026070

                          AREA ||i.I2S_Play_Stop||, CODE, READONLY, ALIGN=2

                  I2S_Play_Stop PROC
;;;162    //关闭I2S播放
;;;163    void I2S_Play_Stop(void)
000000  b510              PUSH     {r4,lr}
;;;164    {   
;;;165    		DMA_Cmd(DMA1_Stream4,DISABLE);//关闭DMA,结束播放	 
000002  2100              MOVS     r1,#0
000004  4801              LDR      r0,|L6.12|
000006  f7fffffe          BL       DMA_Cmd
;;;166     	 
;;;167    } 
00000a  bd10              POP      {r4,pc}
;;;168    
                          ENDP

                  |L6.12|
                          DCD      0x40026070

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  I2S_PSC_TBL
000000  03200100          DCW      0x0320,0x0100
000004  0005000c          DCW      0x0005,0x000c
000008  0001044e          DCW      0x0001,0x044e
00000c  01ad0004          DCW      0x01ad,0x0004
000010  00130000          DCW      0x0013,0x0000
000014  064000d5          DCW      0x0640,0x00d5
000018  0002000d          DCW      0x0002,0x000d
00001c  0000089d          DCW      0x0000,0x089d
000020  01ad0004          DCW      0x01ad,0x0004
000024  00090001          DCW      0x0009,0x0001
000028  0c8000d5          DCW      0x0c80,0x00d5
00002c  00020006          DCW      0x0002,0x0006
000030  0001113a          DCW      0x0001,0x113a
000034  010f0002          DCW      0x010f,0x0002
000038  00060000          DCW      0x0006,0x0000
00003c  12c00102          DCW      0x12c0,0x0102
000040  00030003          DCW      0x0003,0x0003
000044  00012274          DCW      0x0001,0x2274
000048  013c0002          DCW      0x013c,0x0002
00004c  00030001          DCW      0x0003,0x0001
000050  25800158          DCW      0x2580,0x0158
000054  00020003          DCW      0x0002,0x0003
000058  000144e8          DCW      0x0001,0x44e8
00005c  01690002          DCW      0x0169,0x0002
000060  00020000          DCW      0x0002,0x0000
000064  4b000189          DCW      0x4b00,0x0189
000068  00020002          DCW      0x0002,0x0002
00006c  0000              DCW      0x0000

                          AREA ||.data||, DATA, ALIGN=2

                  i2s_tx_callback
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\HARDWARE\\I2S\\i2s.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_i2s_c_f51e6c32____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___5_i2s_c_f51e6c32____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_i2s_c_f51e6c32____REVSH|
#line 144
|__asm___5_i2s_c_f51e6c32____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
