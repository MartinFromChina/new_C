; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\malloc.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\malloc.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\HARDWARE\LED -I..\HARDWARE\LCD -I..\HARDWARE\KEY -I..\HARDWARE\SRAM -I..\HARDWARE\SDIO -I..\MALLOC -I..\USMART -I..\HARDWARE\SPI -I..\HARDWARE\W25QXX -I..\FATFS\exfuns -I..\FATFS\src -I..\TEXT -I..\FWLIB\inc -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\I2S -I..\HARDWARE\WM8978 -I..\APP -I..\AUDIOCODEC\wav -I..\new_user -I..\new_user\task -I..\new_user\MVC -I..\..\..\module\common -I..\..\..\module\common\InsertLog -I..\..\..\module\common\loopqueue -I..\..\..\module\common\StateMachine -I..\..\..\module\common\priorityqueue -I..\..\..\module\common\Math -I..\..\..\module\component\const_loop_scheduler -I..\..\..\module\component\const_loop_scheduler\TemplateTask -I..\..\..\module\component\const_loop_scheduler\HierarchicalSM -I..\..\..\module\component\BlockableStateMachine -I..\..\..\module\customize\ButtonModule -I..\..\..\module\external\Segger\SEGGER_RTT_V640\Syscalls -I..\..\..\module\external\Segger\SEGGER_RTT_V640\RTT -I.\RTE\_AudioPlayer -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include" -I"D:\Program Files\ARM\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_COMPILER_PRESENT -DX_TASK_LOG_DEBUG_METHOD=SeggerRTT_LogDebug --omf_browse=..\obj\malloc.crf ..\MALLOC\malloc.c]
                          THUMB

                          AREA ||i.my_mem_free||, CODE, READONLY, ALIGN=2

                  my_mem_free PROC
;;;118    //返回值:0,释放成功;1,释放失败;  
;;;119    u8 my_mem_free(u8 memx,u32 offset)  
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;120    {  
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;121        int i;  
;;;122        if(!mallco_dev.memrdy[memx])//未初始化,先执行初始化
000008  4815              LDR      r0,|L1.96|
00000a  5d00              LDRB     r0,[r0,r4]
00000c  b938              CBNZ     r0,|L1.30|
;;;123    	{
;;;124    		mallco_dev.init(memx);    
00000e  4814              LDR      r0,|L1.96|
000010  3820              SUBS     r0,r0,#0x20
000012  6801              LDR      r1,[r0,#0]  ; mallco_dev
000014  4620              MOV      r0,r4
000016  4788              BLX      r1
;;;125            return 1;//未初始化  
000018  2001              MOVS     r0,#1
                  |L1.26|
;;;126        }  
;;;127        if(offset<memsize[memx])//偏移在内存池内. 
;;;128        {  
;;;129            int index=offset/memblksize[memx];			//偏移所在内存块号码  
;;;130            int nmemb=mallco_dev.memmap[memx][index];	//内存块数量
;;;131            for(i=0;i<nmemb;i++)  						//内存块清零
;;;132            {  
;;;133                mallco_dev.memmap[memx][index+i]=0;  
;;;134            }  
;;;135            return 0;  
;;;136        }else return 2;//偏移超区了.  
;;;137    }  
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.30|
00001e  4811              LDR      r0,|L1.100|
000020  f8500024          LDR      r0,[r0,r4,LSL #2]     ;127
000024  42b0              CMP      r0,r6                 ;127
000026  d919              BLS      |L1.92|
000028  480f              LDR      r0,|L1.104|
00002a  f8500024          LDR      r0,[r0,r4,LSL #2]     ;129
00002e  fbb6f1f0          UDIV     r1,r6,r0              ;129
000032  480b              LDR      r0,|L1.96|
000034  380c              SUBS     r0,r0,#0xc            ;130
000036  f8500024          LDR      r0,[r0,r4,LSL #2]     ;130
00003a  f8302011          LDRH     r2,[r0,r1,LSL #1]     ;130
00003e  2500              MOVS     r5,#0                 ;131
000040  e008              B        |L1.84|
                  |L1.66|
000042  2300              MOVS     r3,#0                 ;133
000044  4806              LDR      r0,|L1.96|
000046  380c              SUBS     r0,r0,#0xc            ;133
000048  f8500024          LDR      r0,[r0,r4,LSL #2]     ;133
00004c  194f              ADDS     r7,r1,r5              ;133
00004e  f8203017          STRH     r3,[r0,r7,LSL #1]     ;133
000052  1c6d              ADDS     r5,r5,#1              ;131
                  |L1.84|
000054  4295              CMP      r5,r2                 ;131
000056  dbf4              BLT      |L1.66|
000058  2000              MOVS     r0,#0                 ;135
00005a  e7de              B        |L1.26|
                  |L1.92|
00005c  2002              MOVS     r0,#2                 ;136
00005e  e7dc              B        |L1.26|
;;;138    //释放内存(外部调用) 
                          ENDP

                  |L1.96|
                          DCD      mallco_dev+0x20
                  |L1.100|
                          DCD      memsize
                  |L1.104|
                          DCD      memblksize

                          AREA ||i.my_mem_init||, CODE, READONLY, ALIGN=2

                  my_mem_init PROC
;;;66     //memx:所属内存块
;;;67     void my_mem_init(u8 memx)  
000000  b510              PUSH     {r4,lr}
;;;68     {  
000002  4604              MOV      r4,r0
;;;69         mymemset(mallco_dev.memmap[memx], 0,memtblsize[memx]*2);//内存状态表数据清零  
000004  490c              LDR      r1,|L2.56|
000006  f8511024          LDR      r1,[r1,r4,LSL #2]
00000a  004a              LSLS     r2,r1,#1
00000c  490b              LDR      r1,|L2.60|
00000e  f8510024          LDR      r0,[r1,r4,LSL #2]
000012  2100              MOVS     r1,#0
000014  f7fffffe          BL       mymemset
;;;70     	mymemset(mallco_dev.membase[memx], 0,memsize[memx]);	//内存池所有数据清零  
000018  4909              LDR      r1,|L2.64|
00001a  f8512024          LDR      r2,[r1,r4,LSL #2]
00001e  4907              LDR      r1,|L2.60|
000020  390c              SUBS     r1,r1,#0xc
000022  f8510024          LDR      r0,[r1,r4,LSL #2]
000026  2100              MOVS     r1,#0
000028  f7fffffe          BL       mymemset
;;;71     	mallco_dev.memrdy[memx]=1;								//内存管理初始化OK  
00002c  2101              MOVS     r1,#1
00002e  4803              LDR      r0,|L2.60|
000030  300c              ADDS     r0,r0,#0xc
000032  5501              STRB     r1,[r0,r4]
;;;72     }  
000034  bd10              POP      {r4,pc}
;;;73     //获取内存使用率
                          ENDP

000036  0000              DCW      0x0000
                  |L2.56|
                          DCD      memtblsize
                  |L2.60|
                          DCD      mallco_dev+0x14
                  |L2.64|
                          DCD      memsize

                          AREA ||i.my_mem_malloc||, CODE, READONLY, ALIGN=2

                  my_mem_malloc PROC
;;;89     //返回值:0XFFFFFFFF,代表错误;其他,内存偏移地址 
;;;90     u32 my_mem_malloc(u8 memx,u32 size)  
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;91     {  
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;92         signed long offset=0;  
000008  2500              MOVS     r5,#0
;;;93         u32 nmemb;	//需要的内存块数  
;;;94     	u32 cmemb=0;//连续空内存块数
00000a  46a9              MOV      r9,r5
;;;95         u32 i;  
;;;96         if(!mallco_dev.memrdy[memx])mallco_dev.init(memx);//未初始化,先执行初始化 
00000c  4823              LDR      r0,|L3.156|
00000e  5d00              LDRB     r0,[r0,r4]
000010  b920              CBNZ     r0,|L3.28|
000012  4822              LDR      r0,|L3.156|
000014  3820              SUBS     r0,r0,#0x20
000016  6801              LDR      r1,[r0,#0]  ; mallco_dev
000018  4620              MOV      r0,r4
00001a  4788              BLX      r1
                  |L3.28|
;;;97         if(size==0)return 0XFFFFFFFF;//不需要分配
00001c  b91f              CBNZ     r7,|L3.38|
00001e  f04f30ff          MOV      r0,#0xffffffff
                  |L3.34|
;;;98         nmemb=size/memblksize[memx];  	//获取需要分配的连续内存块数
;;;99         if(size%memblksize[memx])nmemb++;  
;;;100        for(offset=memtblsize[memx]-1;offset>=0;offset--)//搜索整个内存控制区  
;;;101        {     
;;;102    		if(!mallco_dev.memmap[memx][offset])cmemb++;//连续空内存块数增加
;;;103    		else cmemb=0;								//连续内存块清零
;;;104    		if(cmemb==nmemb)							//找到了连续nmemb个空内存块
;;;105    		{
;;;106                for(i=0;i<nmemb;i++)  					//标注内存块非空 
;;;107                {  
;;;108                    mallco_dev.memmap[memx][offset+i]=nmemb;  
;;;109                }  
;;;110                return (offset*memblksize[memx]);//返回偏移地址  
;;;111    		}
;;;112        }  
;;;113        return 0XFFFFFFFF;//未找到符合分配条件的内存块  
;;;114    }  
000022  e8bd87f0          POP      {r4-r10,pc}
                  |L3.38|
000026  481e              LDR      r0,|L3.160|
000028  f8500024          LDR      r0,[r0,r4,LSL #2]     ;98
00002c  fbb7f6f0          UDIV     r6,r7,r0              ;98
000030  481b              LDR      r0,|L3.160|
000032  f8500024          LDR      r0,[r0,r4,LSL #2]     ;99
000036  fbb7f1f0          UDIV     r1,r7,r0              ;99
00003a  fb007011          MLS      r0,r0,r1,r7           ;99
00003e  b100              CBZ      r0,|L3.66|
000040  1c76              ADDS     r6,r6,#1              ;99
                  |L3.66|
000042  4818              LDR      r0,|L3.164|
000044  f8500024          LDR      r0,[r0,r4,LSL #2]     ;100
000048  1e45              SUBS     r5,r0,#1              ;100
00004a  e022              B        |L3.146|
                  |L3.76|
00004c  4813              LDR      r0,|L3.156|
00004e  380c              SUBS     r0,r0,#0xc            ;102
000050  f8500024          LDR      r0,[r0,r4,LSL #2]     ;102
000054  f8300015          LDRH     r0,[r0,r5,LSL #1]     ;102
000058  b910              CBNZ     r0,|L3.96|
00005a  f1090901          ADD      r9,r9,#1              ;102
00005e  e001              B        |L3.100|
                  |L3.96|
000060  f04f0900          MOV      r9,#0                 ;103
                  |L3.100|
000064  45b1              CMP      r9,r6                 ;104
000066  d113              BNE      |L3.144|
000068  f04f0800          MOV      r8,#0                 ;106
00006c  e009              B        |L3.130|
                  |L3.110|
00006e  480b              LDR      r0,|L3.156|
000070  380c              SUBS     r0,r0,#0xc            ;108
000072  f8500024          LDR      r0,[r0,r4,LSL #2]     ;108
000076  eb050208          ADD      r2,r5,r8              ;108
00007a  f8206012          STRH     r6,[r0,r2,LSL #1]     ;108
00007e  f1080801          ADD      r8,r8,#1              ;106
                  |L3.130|
000082  45b0              CMP      r8,r6                 ;106
000084  d3f3              BCC      |L3.110|
000086  4806              LDR      r0,|L3.160|
000088  f8500024          LDR      r0,[r0,r4,LSL #2]     ;110
00008c  4368              MULS     r0,r5,r0              ;110
00008e  e7c8              B        |L3.34|
                  |L3.144|
000090  1e6d              SUBS     r5,r5,#1              ;100
                  |L3.146|
000092  2d00              CMP      r5,#0                 ;100
000094  dada              BGE      |L3.76|
000096  f04f30ff          MOV      r0,#0xffffffff        ;113
00009a  e7c2              B        |L3.34|
;;;115    //释放内存(内部调用) 
                          ENDP

                  |L3.156|
                          DCD      mallco_dev+0x20
                  |L3.160|
                          DCD      memblksize
                  |L3.164|
                          DCD      memtblsize

                          AREA ||i.my_mem_perused||, CODE, READONLY, ALIGN=2

                  my_mem_perused PROC
;;;75     //返回值:使用率(0~100)
;;;76     u8 my_mem_perused(u8 memx)  
000000  b510              PUSH     {r4,lr}
;;;77     {  
000002  4601              MOV      r1,r0
;;;78         u32 used=0;  
000004  2300              MOVS     r3,#0
;;;79         u32 i;  
;;;80         for(i=0;i<memtblsize[memx];i++)  
000006  2200              MOVS     r2,#0
000008  e007              B        |L4.26|
                  |L4.10|
;;;81         {  
;;;82             if(mallco_dev.memmap[memx][i])used++; 
00000a  480b              LDR      r0,|L4.56|
00000c  f8500021          LDR      r0,[r0,r1,LSL #2]
000010  f8300012          LDRH     r0,[r0,r2,LSL #1]
000014  b100              CBZ      r0,|L4.24|
000016  1c5b              ADDS     r3,r3,#1
                  |L4.24|
000018  1c52              ADDS     r2,r2,#1              ;80
                  |L4.26|
00001a  4808              LDR      r0,|L4.60|
00001c  f8500021          LDR      r0,[r0,r1,LSL #2]     ;80
000020  4290              CMP      r0,r2                 ;80
000022  d8f2              BHI      |L4.10|
;;;83         } 
;;;84         return (used*100)/(memtblsize[memx]);  
000024  2064              MOVS     r0,#0x64
000026  4358              MULS     r0,r3,r0
000028  4c04              LDR      r4,|L4.60|
00002a  f8544021          LDR      r4,[r4,r1,LSL #2]
00002e  fbb0f0f4          UDIV     r0,r0,r4
000032  b2c0              UXTB     r0,r0
;;;85     }  
000034  bd10              POP      {r4,pc}
;;;86     //内存分配(内部调用)
                          ENDP

000036  0000              DCW      0x0000
                  |L4.56|
                          DCD      mallco_dev+0x14
                  |L4.60|
                          DCD      memtblsize

                          AREA ||i.myfree||, CODE, READONLY, ALIGN=2

                  myfree PROC
;;;140    //ptr:内存首地址 
;;;141    void myfree(u8 memx,void *ptr)  
000000  b570              PUSH     {r4-r6,lr}
;;;142    {  
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;143    	u32 offset;   
;;;144    	if(ptr==NULL)return;//地址为0.  
000006  b904              CBNZ     r4,|L5.10|
                  |L5.8|
;;;145     	offset=(u32)ptr-(u32)mallco_dev.membase[memx];     
;;;146        my_mem_free(memx,offset);	//释放内存      
;;;147    }  
000008  bd70              POP      {r4-r6,pc}
                  |L5.10|
00000a  4805              LDR      r0,|L5.32|
00000c  f8500025          LDR      r0,[r0,r5,LSL #2]     ;145
000010  1a26              SUBS     r6,r4,r0              ;145
000012  4631              MOV      r1,r6                 ;146
000014  4628              MOV      r0,r5                 ;146
000016  f7fffffe          BL       my_mem_free
00001a  bf00              NOP      
00001c  e7f4              B        |L5.8|
;;;148    //分配内存(外部调用)
                          ENDP

00001e  0000              DCW      0x0000
                  |L5.32|
                          DCD      mallco_dev+0x8

                          AREA ||i.mymalloc||, CODE, READONLY, ALIGN=2

                  mymalloc PROC
;;;151    //返回值:分配到的内存首地址.
;;;152    void *mymalloc(u8 memx,u32 size)  
000000  b570              PUSH     {r4-r6,lr}
;;;153    {  
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;154        u32 offset;   
;;;155    	offset=my_mem_malloc(memx,size);  	   	 	   
000006  4631              MOV      r1,r6
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       my_mem_malloc
00000e  4605              MOV      r5,r0
;;;156        if(offset==0XFFFFFFFF)return NULL;  
000010  1c68              ADDS     r0,r5,#1
000012  b908              CBNZ     r0,|L6.24|
000014  2000              MOVS     r0,#0
                  |L6.22|
;;;157        else return (void*)((u32)mallco_dev.membase[memx]+offset);  
;;;158    }  
000016  bd70              POP      {r4-r6,pc}
                  |L6.24|
000018  4802              LDR      r0,|L6.36|
00001a  f8500024          LDR      r0,[r0,r4,LSL #2]     ;157
00001e  4428              ADD      r0,r0,r5              ;157
000020  e7f9              B        |L6.22|
;;;159    //重新分配内存(外部调用)
                          ENDP

000022  0000              DCW      0x0000
                  |L6.36|
                          DCD      mallco_dev+0x8

                          AREA ||i.mymemcpy||, CODE, READONLY, ALIGN=1

                  mymemcpy PROC
;;;49     //n:需要复制的内存长度(字节为单位)
;;;50     void mymemcpy(void *des,void *src,u32 n)  
000000  b570              PUSH     {r4-r6,lr}
;;;51     {  
;;;52         u8 *xdes=des;
000002  4603              MOV      r3,r0
;;;53     	u8 *xsrc=src; 
000004  460c              MOV      r4,r1
;;;54         while(n--)*xdes++=*xsrc++;  
000006  e003              B        |L7.16|
                  |L7.8|
000008  f8145b01          LDRB     r5,[r4],#1
00000c  f8035b01          STRB     r5,[r3],#1
                  |L7.16|
000010  1e15              SUBS     r5,r2,#0
000012  f1a20201          SUB      r2,r2,#1
000016  d1f7              BNE      |L7.8|
;;;55     }  
000018  bd70              POP      {r4-r6,pc}
;;;56     //设置内存
                          ENDP


                          AREA ||i.mymemset||, CODE, READONLY, ALIGN=1

                  mymemset PROC
;;;59     //count:需要设置的内存大小(字节为单位)
;;;60     void mymemset(void *s,u8 c,u32 count)  
000000  b530              PUSH     {r4,r5,lr}
;;;61     {  
;;;62         u8 *xs = s;  
000002  4603              MOV      r3,r0
;;;63         while(count--)*xs++=c;  
000004  e001              B        |L8.10|
                  |L8.6|
000006  f8031b01          STRB     r1,[r3],#1
                  |L8.10|
00000a  1e14              SUBS     r4,r2,#0
00000c  f1a20201          SUB      r2,r2,#1
000010  d1f9              BNE      |L8.6|
;;;64     }	   
000012  bd30              POP      {r4,r5,pc}
;;;65     //内存管理初始化  
                          ENDP


                          AREA ||i.myrealloc||, CODE, READONLY, ALIGN=2

                  myrealloc PROC
;;;163    //返回值:新分配到的内存首地址.
;;;164    void *myrealloc(u8 memx,void *ptr,u32 size)  
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;165    {  
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
;;;166        u32 offset;    
;;;167        offset=my_mem_malloc(memx,size);   	
00000a  4631              MOV      r1,r6
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       my_mem_malloc
000012  4605              MOV      r5,r0
;;;168        if(offset==0XFFFFFFFF)return NULL;     
000014  1c68              ADDS     r0,r5,#1
000016  b910              CBNZ     r0,|L9.30|
000018  2000              MOVS     r0,#0
                  |L9.26|
;;;169        else  
;;;170        {  									   
;;;171    	    mymemcpy((void*)((u32)mallco_dev.membase[memx]+offset),ptr,size);	//拷贝旧内存内容到新内存   
;;;172            myfree(memx,ptr);  											  		//释放旧内存
;;;173            return (void*)((u32)mallco_dev.membase[memx]+offset);  				//返回新内存首地址
;;;174        }  
;;;175    }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L9.30|
00001e  4908              LDR      r1,|L9.64|
000020  f8511024          LDR      r1,[r1,r4,LSL #2]     ;171
000024  1948              ADDS     r0,r1,r5              ;171
000026  4632              MOV      r2,r6                 ;171
000028  4639              MOV      r1,r7                 ;171
00002a  f7fffffe          BL       mymemcpy
00002e  4639              MOV      r1,r7                 ;172
000030  4620              MOV      r0,r4                 ;172
000032  f7fffffe          BL       myfree
000036  4802              LDR      r0,|L9.64|
000038  f8500024          LDR      r0,[r0,r4,LSL #2]     ;173
00003c  4428              ADD      r0,r0,r5              ;173
00003e  e7ec              B        |L9.26|
;;;176    
                          ENDP

                  |L9.64|
                          DCD      mallco_dev+0x8

                          AREA ||.ARM.__AT_0x10000000||, DATA, NOINIT, ALIGN=5

                  mem3base
                          %        61440

                          AREA ||.ARM.__AT_0x1000F000||, DATA, NOINIT, ALIGN=1

                  mem3mapbase
                          %        3840

                          AREA ||.ARM.__AT_0x68000000||, DATA, NOINIT, ALIGN=5

                  mem2base
                          %        983040

                          AREA ||.ARM.__AT_0x680F0000||, DATA, NOINIT, ALIGN=1

                  mem2mapbase
                          %        61440

                          AREA ||.bss||, DATA, NOINIT, ALIGN=5

                  mem1base
                          %        102400
                  mem1mapbase
                          %        6400

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  memtblsize
                          DCD      0x00000c80
                          DCD      0x00007800
                          DCD      0x00000780
                  memblksize
                          DCD      0x00000020
                          DCD      0x00000020
                          DCD      0x00000020
                  memsize
                          DCD      0x00019000
                          DCD      0x000f0000
                          DCD      0x0000f000

                          AREA ||.data||, DATA, ALIGN=2

                  mallco_dev
                          DCD      my_mem_init
                          DCD      my_mem_perused
                          DCD      mem1base
                          DCD      mem2base
                          DCD      mem3base
                          DCD      mem1mapbase
                          DCD      mem2mapbase
                          DCD      mem3mapbase
000020  00000000          DCB      0x00,0x00,0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\MALLOC\\malloc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_malloc_c_4dd4ad64____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___8_malloc_c_4dd4ad64____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_malloc_c_4dd4ad64____REVSH|
#line 144
|__asm___8_malloc_c_4dd4ad64____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
