; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\text.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\text.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\HARDWARE\LED -I..\HARDWARE\LCD -I..\HARDWARE\KEY -I..\HARDWARE\SRAM -I..\HARDWARE\SDIO -I..\MALLOC -I..\USMART -I..\HARDWARE\SPI -I..\HARDWARE\W25QXX -I..\FATFS\exfuns -I..\FATFS\src -I..\TEXT -I..\FWLIB\inc -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\I2S -I..\HARDWARE\WM8978 -I..\APP -I..\AUDIOCODEC\wav -I..\new_user -I..\new_user\task -I..\new_user\MVC -I..\..\..\module\common -I..\..\..\module\common\InsertLog -I..\..\..\module\common\loopqueue -I..\..\..\module\common\StateMachine -I..\..\..\module\common\priorityqueue -I..\..\..\module\common\Math -I..\..\..\module\component\const_loop_scheduler -I..\..\..\module\component\const_loop_scheduler\TemplateTask -I..\..\..\module\component\const_loop_scheduler\HierarchicalSM -I..\..\..\module\component\BlockableStateMachine -I..\..\..\module\customize\ButtonModule -I..\..\..\module\external\Segger\SEGGER_RTT_V640\Syscalls -I..\..\..\module\external\Segger\SEGGER_RTT_V640\RTT -I.\RTE\_AudioPlayer -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include" -I"D:\Program Files\ARM\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_COMPILER_PRESENT -DX_TASK_LOG_DEBUG_METHOD=SeggerRTT_LogDebug --omf_browse=..\obj\text.crf ..\TEXT\text.c]
                          THUMB

                          AREA ||i.Get_HzMat||, CODE, READONLY, ALIGN=2

                  Get_HzMat PROC
;;;25     //size:字体大小
;;;26     void Get_HzMat(unsigned char *code,unsigned char *mat,u8 size)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;27     {		    
000004  4682              MOV      r10,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;28     	unsigned char qh,ql;
;;;29     	unsigned char i;					  
;;;30     	unsigned long foffset; 
;;;31     	u8 csize=(size/8+((size%8)?1:0))*(size);//得到字体一个字符对应点阵集所占的字节数	 
00000a  4620              MOV      r0,r4
00000c  17e2              ASRS     r2,r4,#31
00000e  eb047252          ADD      r2,r4,r2,LSR #29
000012  10d2              ASRS     r2,r2,#3
000014  4621              MOV      r1,r4
000016  17e3              ASRS     r3,r4,#31
000018  eb047353          ADD      r3,r4,r3,LSR #29
00001c  10db              ASRS     r3,r3,#3
00001e  eba403c3          SUB      r3,r4,r3,LSL #3
000022  b10b              CBZ      r3,|L1.40|
000024  2301              MOVS     r3,#1
000026  e000              B        |L1.42|
                  |L1.40|
000028  2300              MOVS     r3,#0
                  |L1.42|
00002a  441a              ADD      r2,r2,r3
00002c  4362              MULS     r2,r4,r2
00002e  f00209ff          AND      r9,r2,#0xff
;;;32     	qh=*code;
000032  f89a6000          LDRB     r6,[r10,#0]
;;;33     	ql=*(++code);
000036  f10a0001          ADD      r0,r10,#1
00003a  4682              MOV      r10,r0
00003c  7805              LDRB     r5,[r0,#0]
;;;34     	if(qh<0x81||ql<0x40||ql==0xff||qh==0xff)//非 常用汉字
00003e  2e81              CMP      r6,#0x81
000040  db05              BLT      |L1.78|
000042  2d40              CMP      r5,#0x40
000044  db03              BLT      |L1.78|
000046  2dff              CMP      r5,#0xff
000048  d001              BEQ      |L1.78|
00004a  2eff              CMP      r6,#0xff
00004c  d10d              BNE      |L1.106|
                  |L1.78|
;;;35     	{   		    
;;;36     	    for(i=0;i<csize;i++)*mat++=0x00;//填充满格
00004e  f04f0b00          MOV      r11,#0
000052  e006              B        |L1.98|
                  |L1.84|
000054  2000              MOVS     r0,#0
000056  f8070b01          STRB     r0,[r7],#1
00005a  f10b0001          ADD      r0,r11,#1
00005e  f0000bff          AND      r11,r0,#0xff
                  |L1.98|
000062  45cb              CMP      r11,r9
000064  dbf6              BLT      |L1.84|
                  |L1.102|
;;;37     	    return; //结束访问
;;;38     	}          
;;;39     	if(ql<0x7f)ql-=0x40;//注意!
;;;40     	else ql-=0x41;
;;;41     	qh-=0x81;   
;;;42     	foffset=((unsigned long)190*qh+ql)*csize;	//得到字库中的字节偏移量  		  
;;;43     	switch(size)
;;;44     	{
;;;45     		case 12:
;;;46     			W25QXX_Read(mat,foffset+ftinfo.f12addr,csize);
;;;47     			break;
;;;48     		case 16:
;;;49     			W25QXX_Read(mat,foffset+ftinfo.f16addr,csize);
;;;50     			break;
;;;51     		case 24:
;;;52     			W25QXX_Read(mat,foffset+ftinfo.f24addr,csize);
;;;53     			break;
;;;54     			
;;;55     	}     												    
;;;56     }  
000066  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.106|
00006a  2d7f              CMP      r5,#0x7f              ;39
00006c  da03              BGE      |L1.118|
00006e  f1a50040          SUB      r0,r5,#0x40           ;39
000072  b2c5              UXTB     r5,r0                 ;39
000074  e002              B        |L1.124|
                  |L1.118|
000076  f1a50041          SUB      r0,r5,#0x41           ;40
00007a  b2c5              UXTB     r5,r0                 ;40
                  |L1.124|
00007c  f1a60081          SUB      r0,r6,#0x81           ;41
000080  b2c6              UXTB     r6,r0                 ;41
000082  20be              MOVS     r0,#0xbe              ;42
000084  fb105006          SMLABB   r0,r0,r6,r5           ;42
000088  fb00f809          MUL      r8,r0,r9              ;42
00008c  2c0c              CMP      r4,#0xc               ;43
00008e  d004              BEQ      |L1.154|
000090  2c10              CMP      r4,#0x10              ;43
000092  d00c              BEQ      |L1.174|
000094  2c18              CMP      r4,#0x18              ;43
000096  d11e              BNE      |L1.214|
000098  e013              B        |L1.194|
                  |L1.154|
00009a  4810              LDR      r0,|L1.220|
00009c  f8d00009          LDR      r0,[r0,#9]            ;46  ; ftinfo
0000a0  eb000108          ADD      r1,r0,r8              ;46
0000a4  464a              MOV      r2,r9                 ;46
0000a6  4638              MOV      r0,r7                 ;46
0000a8  f7fffffe          BL       W25QXX_Read
0000ac  e013              B        |L1.214|
                  |L1.174|
0000ae  480b              LDR      r0,|L1.220|
0000b0  f8d00011          LDR      r0,[r0,#0x11]         ;49  ; ftinfo
0000b4  eb000108          ADD      r1,r0,r8              ;49
0000b8  464a              MOV      r2,r9                 ;49
0000ba  4638              MOV      r0,r7                 ;49
0000bc  f7fffffe          BL       W25QXX_Read
0000c0  e009              B        |L1.214|
                  |L1.194|
0000c2  4806              LDR      r0,|L1.220|
0000c4  f8d00019          LDR      r0,[r0,#0x19]         ;52  ; ftinfo
0000c8  eb000108          ADD      r1,r0,r8              ;52
0000cc  464a              MOV      r2,r9                 ;52
0000ce  4638              MOV      r0,r7                 ;52
0000d0  f7fffffe          BL       W25QXX_Read
0000d4  bf00              NOP                            ;53
                  |L1.214|
0000d6  bf00              NOP                            ;47
0000d8  bf00              NOP      
0000da  e7c4              B        |L1.102|
;;;57     //显示一个指定大小的汉字
                          ENDP

                  |L1.220|
                          DCD      ftinfo

                          AREA ||i.Show_Font||, CODE, READONLY, ALIGN=2

                  Show_Font PROC
;;;61     //mode:0,正常显示,1,叠加显示	   
;;;62     void Show_Font(u16 x,u16 y,u8 *font,u8 size,u8 mode)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;63     {
000004  b093              SUB      sp,sp,#0x4c
000006  4607              MOV      r7,r0
000008  460d              MOV      r5,r1
00000a  461c              MOV      r4,r3
;;;64     	u8 temp,t,t1;
;;;65     	u16 y0=y;
00000c  46aa              MOV      r10,r5
;;;66     	u8 dzk[72];   
;;;67     	u8 csize=(size/8+((size%8)?1:0))*(size);//得到字体一个字符对应点阵集所占的字节数	 
00000e  4620              MOV      r0,r4
000010  17e2              ASRS     r2,r4,#31
000012  eb047252          ADD      r2,r4,r2,LSR #29
000016  10d2              ASRS     r2,r2,#3
000018  4621              MOV      r1,r4
00001a  17e3              ASRS     r3,r4,#31
00001c  eb047353          ADD      r3,r4,r3,LSR #29
000020  10db              ASRS     r3,r3,#3
000022  eba403c3          SUB      r3,r4,r3,LSL #3
000026  b10b              CBZ      r3,|L2.44|
000028  2301              MOVS     r3,#1
00002a  e000              B        |L2.46|
                  |L2.44|
00002c  2300              MOVS     r3,#0
                  |L2.46|
00002e  441a              ADD      r2,r2,r3
000030  4362              MULS     r2,r4,r2
000032  f0020bff          AND      r11,r2,#0xff
;;;68     	if(size!=12&&size!=16&&size!=24)return;	//不支持的size
000036  2c0c              CMP      r4,#0xc
000038  d006              BEQ      |L2.72|
00003a  2c10              CMP      r4,#0x10
00003c  d004              BEQ      |L2.72|
00003e  2c18              CMP      r4,#0x18
000040  d002              BEQ      |L2.72|
                  |L2.66|
;;;69     	Get_HzMat(font,dzk,size);	//得到相应大小的点阵数据 
;;;70     	for(t=0;t<csize;t++)
;;;71     	{   												   
;;;72     		temp=dzk[t];			//得到点阵数据                          
;;;73     		for(t1=0;t1<8;t1++)
;;;74     		{
;;;75     			if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
;;;76     			else if(mode==0)LCD_Fast_DrawPoint(x,y,BACK_COLOR); 
;;;77     			temp<<=1;
;;;78     			y++;
;;;79     			if((y-y0)==size)
;;;80     			{
;;;81     				y=y0;
;;;82     				x++;
;;;83     				break;
;;;84     			}
;;;85     		}  	 
;;;86     	}  
;;;87     }
000042  b017              ADD      sp,sp,#0x5c
000044  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.72|
000048  4622              MOV      r2,r4                 ;69
00004a  a901              ADD      r1,sp,#4              ;69
00004c  9815              LDR      r0,[sp,#0x54]         ;69
00004e  f7fffffe          BL       Get_HzMat
000052  2600              MOVS     r6,#0                 ;70
000054  e02f              B        |L2.182|
                  |L2.86|
000056  a801              ADD      r0,sp,#4              ;72
000058  f8108006          LDRB     r8,[r0,r6]            ;72
00005c  f04f0900          MOV      r9,#0                 ;73
000060  e023              B        |L2.170|
                  |L2.98|
000062  f0080080          AND      r0,r8,#0x80           ;75
000066  b130              CBZ      r0,|L2.118|
000068  4815              LDR      r0,|L2.192|
00006a  8802              LDRH     r2,[r0,#0]            ;75  ; POINT_COLOR
00006c  4629              MOV      r1,r5                 ;75
00006e  4638              MOV      r0,r7                 ;75
000070  f7fffffe          BL       LCD_Fast_DrawPoint
000074  e007              B        |L2.134|
                  |L2.118|
000076  9820              LDR      r0,[sp,#0x80]         ;76
000078  b928              CBNZ     r0,|L2.134|
00007a  4812              LDR      r0,|L2.196|
00007c  8802              LDRH     r2,[r0,#0]            ;76  ; BACK_COLOR
00007e  4629              MOV      r1,r5                 ;76
000080  4638              MOV      r0,r7                 ;76
000082  f7fffffe          BL       LCD_Fast_DrawPoint
                  |L2.134|
000086  ea4f6048          LSL      r0,r8,#25             ;77
00008a  ea4f6810          LSR      r8,r0,#24             ;77
00008e  1c68              ADDS     r0,r5,#1              ;78
000090  b285              UXTH     r5,r0                 ;78
000092  eba5000a          SUB      r0,r5,r10             ;79
000096  42a0              CMP      r0,r4                 ;79
000098  d103              BNE      |L2.162|
00009a  4655              MOV      r5,r10                ;81
00009c  1c78              ADDS     r0,r7,#1              ;82
00009e  b287              UXTH     r7,r0                 ;82
0000a0  e006              B        |L2.176|
                  |L2.162|
0000a2  f1090001          ADD      r0,r9,#1              ;73
0000a6  f00009ff          AND      r9,r0,#0xff           ;73
                  |L2.170|
0000aa  f1b90f08          CMP      r9,#8                 ;73
0000ae  dbd8              BLT      |L2.98|
                  |L2.176|
0000b0  bf00              NOP                            ;83
0000b2  1c70              ADDS     r0,r6,#1              ;70
0000b4  b2c6              UXTB     r6,r0                 ;70
                  |L2.182|
0000b6  455e              CMP      r6,r11                ;70
0000b8  dbcd              BLT      |L2.86|
0000ba  bf00              NOP      
0000bc  e7c1              B        |L2.66|
;;;88     //在指定位置开始显示一个字符串	    
                          ENDP

0000be  0000              DCW      0x0000
                  |L2.192|
                          DCD      POINT_COLOR
                  |L2.196|
                          DCD      BACK_COLOR

                          AREA ||i.Show_Str||, CODE, READONLY, ALIGN=1

                  Show_Str PROC
;;;94     //mode:0,非叠加方式;1,叠加方式    	   		   
;;;95     void Show_Str(u16 x,u16 y,u16 width,u16 height,u8*str,u8 size,u8 mode)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;96     {					
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
00000c  e9dd4b0d          LDRD     r4,r11,[sp,#0x34]
000010  9d0c              LDR      r5,[sp,#0x30]
;;;97     	u16 x0=x;
000012  46b8              MOV      r8,r7
;;;98     	u16 y0=y;							  	  
000014  9602              STR      r6,[sp,#8]
;;;99         u8 bHz=0;     //字符或者中文  	    				    				  	  
000016  2000              MOVS     r0,#0
000018  9001              STR      r0,[sp,#4]
;;;100        while(*str!=0)//数据未结束
00001a  e04c              B        |L3.182|
                  |L3.28|
;;;101        { 
;;;102            if(!bHz)
00001c  9801              LDR      r0,[sp,#4]
00001e  bb70              CBNZ     r0,|L3.126|
;;;103            {
;;;104    	        if(*str>0x80)bHz=1;//中文 
000020  7828              LDRB     r0,[r5,#0]
000022  2880              CMP      r0,#0x80
000024  dd02              BLE      |L3.44|
000026  2001              MOVS     r0,#1
000028  9001              STR      r0,[sp,#4]
00002a  e044              B        |L3.182|
                  |L3.44|
;;;105    	        else              //字符
;;;106    	        {      
;;;107                    if(x>(x0+width-size/2))//换行
00002c  eb0471d4          ADD      r1,r4,r4,LSR #31
000030  eb080209          ADD      r2,r8,r9
000034  eba20161          SUB      r1,r2,r1,ASR #1
000038  42b9              CMP      r1,r7
00003a  da02              BGE      |L3.66|
;;;108    				{				   
;;;109    					y+=size;
00003c  1930              ADDS     r0,r6,r4
00003e  b286              UXTH     r6,r0
;;;110    					x=x0;	   
000040  4647              MOV      r7,r8
                  |L3.66|
;;;111    				}							    
;;;112    		        if(y>(y0+height-size))break;//越界返回      
000042  9802              LDR      r0,[sp,#8]
000044  4450              ADD      r0,r0,r10
000046  1b00              SUBS     r0,r0,r4
000048  42b0              CMP      r0,r6
00004a  da00              BGE      |L3.78|
00004c  e036              B        |L3.188|
                  |L3.78|
;;;113    		        if(*str==13)//换行符号
00004e  7828              LDRB     r0,[r5,#0]
000050  280d              CMP      r0,#0xd
000052  d104              BNE      |L3.94|
;;;114    		        {         
;;;115    		            y+=size;
000054  1930              ADDS     r0,r6,r4
000056  b286              UXTH     r6,r0
;;;116    					x=x0;
000058  4647              MOV      r7,r8
;;;117    		            str++; 
00005a  1c6d              ADDS     r5,r5,#1
00005c  e007              B        |L3.110|
                  |L3.94|
;;;118    		        }  
;;;119    		        else LCD_ShowChar(x,y,*str,size,mode);//有效部分写入 
00005e  f8cdb000          STR      r11,[sp,#0]
000062  782a              LDRB     r2,[r5,#0]
000064  4623              MOV      r3,r4
000066  4631              MOV      r1,r6
000068  4638              MOV      r0,r7
00006a  f7fffffe          BL       LCD_ShowChar
                  |L3.110|
;;;120    				str++; 
00006e  1c6d              ADDS     r5,r5,#1
;;;121    		        x+=size/2; //字符,为全字的一半 
000070  4620              MOV      r0,r4
000072  eb0471d0          ADD      r1,r4,r0,LSR #31
000076  eb070161          ADD      r1,r7,r1,ASR #1
00007a  b28f              UXTH     r7,r1
00007c  e01b              B        |L3.182|
                  |L3.126|
00007e  e7ff              B        |L3.128|
                  |L3.128|
;;;122    	        }
;;;123            }else//中文 
;;;124            {     
;;;125                bHz=0;//有汉字库    
000080  2000              MOVS     r0,#0
000082  9001              STR      r0,[sp,#4]
;;;126                if(x>(x0+width-size))//换行
000084  eb080009          ADD      r0,r8,r9
000088  1b00              SUBS     r0,r0,r4
00008a  42b8              CMP      r0,r7
00008c  da02              BGE      |L3.148|
;;;127    			{	    
;;;128    				y+=size;
00008e  1930              ADDS     r0,r6,r4
000090  b286              UXTH     r6,r0
;;;129    				x=x0;		  
000092  4647              MOV      r7,r8
                  |L3.148|
;;;130    			}
;;;131    	        if(y>(y0+height-size))break;//越界返回  						     
000094  9802              LDR      r0,[sp,#8]
000096  4450              ADD      r0,r0,r10
000098  1b00              SUBS     r0,r0,r4
00009a  42b0              CMP      r0,r6
00009c  da00              BGE      |L3.160|
00009e  e00d              B        |L3.188|
                  |L3.160|
;;;132    	        Show_Font(x,y,str,size,mode); //显示这个汉字,空心显示 
0000a0  4623              MOV      r3,r4
0000a2  462a              MOV      r2,r5
0000a4  4631              MOV      r1,r6
0000a6  4638              MOV      r0,r7
0000a8  f8cdb000          STR      r11,[sp,#0]
0000ac  f7fffffe          BL       Show_Font
;;;133    	        str+=2; 
0000b0  1cad              ADDS     r5,r5,#2
;;;134    	        x+=size;//下一个汉字偏移	    
0000b2  1938              ADDS     r0,r7,r4
0000b4  b287              UXTH     r7,r0
                  |L3.182|
0000b6  7828              LDRB     r0,[r5,#0]            ;100
0000b8  2800              CMP      r0,#0                 ;100
0000ba  d1af              BNE      |L3.28|
                  |L3.188|
0000bc  bf00              NOP                            ;112
;;;135            }						 
;;;136        }   
;;;137    }  			 		 
0000be  e8bd8ffe          POP      {r1-r11,pc}
;;;138    //在指定宽度的中间显示字符串
                          ENDP


                          AREA ||i.Show_Str_Mid||, CODE, READONLY, ALIGN=2

                  Show_Str_Mid PROC
;;;140    //len:指定要显示的宽度			  
;;;141    void Show_Str_Mid(u16 x,u16 y,u8*str,u8 size,u8 len)
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;142    {
000004  4607              MOV      r7,r0
000006  4689              MOV      r9,r1
000008  4615              MOV      r5,r2
00000a  461c              MOV      r4,r3
00000c  f8dd8028          LDR      r8,[sp,#0x28]
;;;143    	u16 strlenth=0;
000010  2600              MOVS     r6,#0
;;;144       	strlenth=strlen((const char*)str);
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       strlen
000018  b286              UXTH     r6,r0
;;;145    	strlenth*=size/2;
00001a  4620              MOV      r0,r4
00001c  eb0471d0          ADD      r1,r4,r0,LSR #31
000020  1049              ASRS     r1,r1,#1
000022  4371              MULS     r1,r6,r1
000024  b28e              UXTH     r6,r1
;;;146    	if(strlenth>len)Show_Str(x,y,lcddev.width,lcddev.height,str,size,1);
000026  4546              CMP      r6,r8
000028  dd0b              BLE      |L4.66|
00002a  2001              MOVS     r0,#1
00002c  e9cd5400          STRD     r5,r4,[sp,#0]
000030  9002              STR      r0,[sp,#8]
000032  480e              LDR      r0,|L4.108|
000034  8843              LDRH     r3,[r0,#2]  ; lcddev
000036  8802              LDRH     r2,[r0,#0]  ; lcddev
000038  4649              MOV      r1,r9
00003a  4638              MOV      r0,r7
00003c  f7fffffe          BL       Show_Str
000040  e011              B        |L4.102|
                  |L4.66|
;;;147    	else
;;;148    	{
;;;149    		strlenth=(len-strlenth)/2;
000042  eba80006          SUB      r0,r8,r6
000046  eb0071d0          ADD      r1,r0,r0,LSR #31
00004a  f3c1064f          UBFX     r6,r1,#1,#16
;;;150    	    Show_Str(strlenth+x,y,lcddev.width,lcddev.height,str,size,1);
00004e  2001              MOVS     r0,#1
000050  4906              LDR      r1,|L4.108|
000052  e9cd5400          STRD     r5,r4,[sp,#0]
000056  9002              STR      r0,[sp,#8]
000058  884b              LDRH     r3,[r1,#2]  ; lcddev
00005a  880a              LDRH     r2,[r1,#0]  ; lcddev
00005c  19f1              ADDS     r1,r6,r7
00005e  b288              UXTH     r0,r1
000060  4649              MOV      r1,r9
000062  f7fffffe          BL       Show_Str
                  |L4.102|
;;;151    	}
;;;152    }   
000066  e8bd83fe          POP      {r1-r9,pc}
;;;153    
                          ENDP

00006a  0000              DCW      0x0000
                  |L4.108|
                          DCD      lcddev

;*** Start embedded assembler ***

#line 1 "..\\TEXT\\text.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_text_c_1ec33885____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___6_text_c_1ec33885____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_text_c_1ec33885____REVSH|
#line 144
|__asm___6_text_c_1ec33885____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
