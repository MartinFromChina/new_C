; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\key.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\key.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\HARDWARE\LED -I..\HARDWARE\LCD -I..\HARDWARE\KEY -I..\HARDWARE\SRAM -I..\HARDWARE\SDIO -I..\MALLOC -I..\USMART -I..\HARDWARE\SPI -I..\HARDWARE\W25QXX -I..\FATFS\exfuns -I..\FATFS\src -I..\TEXT -I..\FWLIB\inc -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\I2S -I..\HARDWARE\WM8978 -I..\APP -I..\AUDIOCODEC\wav -I..\new_user -I..\new_user\task -I..\new_user\MVC -I..\..\..\module\common -I..\..\..\module\common\InsertLog -I..\..\..\module\common\loopqueue -I..\..\..\module\common\StateMachine -I..\..\..\module\common\priorityqueue -I..\..\..\module\common\Math -I..\..\..\module\component\const_loop_scheduler -I..\..\..\module\component\const_loop_scheduler\TemplateTask -I..\..\..\module\component\const_loop_scheduler\HierarchicalSM -I..\..\..\module\component\BlockableStateMachine -I..\..\..\module\customize\ButtonModule -I..\..\..\module\external\Segger\SEGGER_RTT_V640\Syscalls -I..\..\..\module\external\Segger\SEGGER_RTT_V640\RTT -I.\RTE\_AudioPlayer -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include" -I"D:\Program Files\ARM\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_COMPILER_PRESENT -DX_TASK_LOG_DEBUG_METHOD=SeggerRTT_LogDebug --omf_browse=..\obj\key.crf ..\HARDWARE\KEY\key.c]
                          THUMB

                          AREA ||i.KEY_Init||, CODE, READONLY, ALIGN=2

                  KEY_Init PROC
;;;16     //按键初始化函数
;;;17     void KEY_Init(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;18     {
;;;19     	
;;;20     	GPIO_InitTypeDef  GPIO_InitStructure;
;;;21     
;;;22       RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA|RCC_AHB1Periph_GPIOE, ENABLE);//使能GPIOA,GPIOE时钟
000002  2101              MOVS     r1,#1
000004  2011              MOVS     r0,#0x11
000006  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;23      
;;;24       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4; //KEY0 KEY1 KEY2对应引脚
00000a  201c              MOVS     r0,#0x1c
00000c  9000              STR      r0,[sp,#0]
;;;25       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;//普通输入模式
00000e  2000              MOVS     r0,#0
000010  f88d0004          STRB     r0,[sp,#4]
;;;26       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100M
000014  2003              MOVS     r0,#3
000016  f88d0005          STRB     r0,[sp,#5]
;;;27       GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//上拉
00001a  2001              MOVS     r0,#1
00001c  f88d0007          STRB     r0,[sp,#7]
;;;28       GPIO_Init(GPIOE, &GPIO_InitStructure);//初始化GPIOE2,3,4
000020  4669              MOV      r1,sp
000022  4806              LDR      r0,|L1.60|
000024  f7fffffe          BL       GPIO_Init
;;;29     	
;;;30     	 
;;;31       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;//WK_UP对应引脚PA0
000028  2001              MOVS     r0,#1
00002a  9000              STR      r0,[sp,#0]
;;;32       GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN ;//下拉
00002c  2002              MOVS     r0,#2
00002e  f88d0007          STRB     r0,[sp,#7]
;;;33       GPIO_Init(GPIOA, &GPIO_InitStructure);//初始化GPIOA0
000032  4669              MOV      r1,sp
000034  4802              LDR      r0,|L1.64|
000036  f7fffffe          BL       GPIO_Init
;;;34      
;;;35     } 
00003a  bd1c              POP      {r2-r4,pc}
;;;36     //按键处理函数
                          ENDP

                  |L1.60|
                          DCD      0x40021000
                  |L1.64|
                          DCD      0x40020000

                          AREA ||i.KEY_Scan||, CODE, READONLY, ALIGN=2

                  KEY_Scan PROC
;;;44     //注意此函数有响应优先级,KEY0>KEY1>KEY2>WK_UP!!
;;;45     u8 KEY_Scan(u8 mode)
000000  b510              PUSH     {r4,lr}
;;;46     {	 
000002  4604              MOV      r4,r0
;;;47     	static u8 key_up=1;//按键按松开标志
;;;48     	if(mode)key_up=1;  //支持连按		  
000004  b114              CBZ      r4,|L2.12|
000006  2001              MOVS     r0,#1
000008  492c              LDR      r1,|L2.188|
00000a  7008              STRB     r0,[r1,#0]
                  |L2.12|
;;;49     	if(key_up&&(KEY0==0||KEY1==0||KEY2==0||WK_UP==1))
00000c  482b              LDR      r0,|L2.188|
00000e  7800              LDRB     r0,[r0,#0]  ; key_up
000010  2800              CMP      r0,#0
000012  d037              BEQ      |L2.132|
000014  2110              MOVS     r1,#0x10
000016  482a              LDR      r0,|L2.192|
000018  f7fffffe          BL       GPIO_ReadInputDataBit
00001c  b178              CBZ      r0,|L2.62|
00001e  2108              MOVS     r1,#8
000020  4827              LDR      r0,|L2.192|
000022  f7fffffe          BL       GPIO_ReadInputDataBit
000026  b150              CBZ      r0,|L2.62|
000028  2104              MOVS     r1,#4
00002a  4825              LDR      r0,|L2.192|
00002c  f7fffffe          BL       GPIO_ReadInputDataBit
000030  b128              CBZ      r0,|L2.62|
000032  2101              MOVS     r1,#1
000034  4823              LDR      r0,|L2.196|
000036  f7fffffe          BL       GPIO_ReadInputDataBit
00003a  2801              CMP      r0,#1
00003c  d122              BNE      |L2.132|
                  |L2.62|
;;;50     	{
;;;51     		delay_ms(10);//去抖动 
00003e  200a              MOVS     r0,#0xa
000040  f7fffffe          BL       delay_ms
;;;52     		key_up=0;
000044  2000              MOVS     r0,#0
000046  491d              LDR      r1,|L2.188|
000048  7008              STRB     r0,[r1,#0]
;;;53     		if(KEY0==0)return 1;
00004a  2110              MOVS     r1,#0x10
00004c  481c              LDR      r0,|L2.192|
00004e  f7fffffe          BL       GPIO_ReadInputDataBit
000052  b908              CBNZ     r0,|L2.88|
000054  2001              MOVS     r0,#1
                  |L2.86|
;;;54     		else if(KEY1==0)return 2;
;;;55     		else if(KEY2==0)return 3;
;;;56     		else if(WK_UP==1)return 4;
;;;57     	}else if(KEY0==1&&KEY1==1&&KEY2==1&&WK_UP==0)key_up=1; 	    
;;;58      	return 0;// 无按键按下
;;;59     }
000056  bd10              POP      {r4,pc}
                  |L2.88|
000058  2108              MOVS     r1,#8                 ;54
00005a  4819              LDR      r0,|L2.192|
00005c  f7fffffe          BL       GPIO_ReadInputDataBit
000060  b908              CBNZ     r0,|L2.102|
000062  2002              MOVS     r0,#2                 ;54
000064  e7f7              B        |L2.86|
                  |L2.102|
000066  2104              MOVS     r1,#4                 ;55
000068  4815              LDR      r0,|L2.192|
00006a  f7fffffe          BL       GPIO_ReadInputDataBit
00006e  b908              CBNZ     r0,|L2.116|
000070  2003              MOVS     r0,#3                 ;55
000072  e7f0              B        |L2.86|
                  |L2.116|
000074  2101              MOVS     r1,#1                 ;56
000076  4813              LDR      r0,|L2.196|
000078  f7fffffe          BL       GPIO_ReadInputDataBit
00007c  2801              CMP      r0,#1                 ;56
00007e  d11b              BNE      |L2.184|
000080  2004              MOVS     r0,#4                 ;56
000082  e7e8              B        |L2.86|
                  |L2.132|
000084  2110              MOVS     r1,#0x10              ;57
000086  480e              LDR      r0,|L2.192|
000088  f7fffffe          BL       GPIO_ReadInputDataBit
00008c  2801              CMP      r0,#1                 ;57
00008e  d113              BNE      |L2.184|
000090  2108              MOVS     r1,#8                 ;57
000092  480b              LDR      r0,|L2.192|
000094  f7fffffe          BL       GPIO_ReadInputDataBit
000098  2801              CMP      r0,#1                 ;57
00009a  d10d              BNE      |L2.184|
00009c  2104              MOVS     r1,#4                 ;57
00009e  4808              LDR      r0,|L2.192|
0000a0  f7fffffe          BL       GPIO_ReadInputDataBit
0000a4  2801              CMP      r0,#1                 ;57
0000a6  d107              BNE      |L2.184|
0000a8  2101              MOVS     r1,#1                 ;57
0000aa  4806              LDR      r0,|L2.196|
0000ac  f7fffffe          BL       GPIO_ReadInputDataBit
0000b0  b910              CBNZ     r0,|L2.184|
0000b2  2001              MOVS     r0,#1                 ;57
0000b4  4901              LDR      r1,|L2.188|
0000b6  7008              STRB     r0,[r1,#0]            ;57
                  |L2.184|
0000b8  2000              MOVS     r0,#0                 ;58
0000ba  e7cc              B        |L2.86|
;;;60     
                          ENDP

                  |L2.188|
                          DCD      key_up
                  |L2.192|
                          DCD      0x40021000
                  |L2.196|
                          DCD      0x40020000

                          AREA ||.data||, DATA, ALIGN=0

                  key_up
000000  01                DCB      0x01

;*** Start embedded assembler ***

#line 1 "..\\HARDWARE\\KEY\\key.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_key_c_KEY_Init____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___5_key_c_KEY_Init____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_key_c_KEY_Init____REVSH|
#line 144
|__asm___5_key_c_KEY_Init____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
