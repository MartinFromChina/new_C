; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\sdio_sdcard.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\sdio_sdcard.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\HARDWARE\LED -I..\HARDWARE\LCD -I..\HARDWARE\KEY -I..\HARDWARE\SRAM -I..\HARDWARE\SDIO -I..\MALLOC -I..\USMART -I..\HARDWARE\SPI -I..\HARDWARE\W25QXX -I..\FATFS\exfuns -I..\FATFS\src -I..\TEXT -I..\FWLIB\inc -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\I2S -I..\HARDWARE\WM8978 -I..\APP -I..\AUDIOCODEC\wav -I..\new_user -I..\new_user\task -I..\new_user\MVC -I..\..\..\module\common -I..\..\..\module\common\InsertLog -I..\..\..\module\common\loopqueue -I..\..\..\module\common\StateMachine -I..\..\..\module\common\priorityqueue -I..\..\..\module\common\Math -I..\..\..\module\component\const_loop_scheduler -I..\..\..\module\component\const_loop_scheduler\TemplateTask -I..\..\..\module\component\const_loop_scheduler\HierarchicalSM -I..\..\..\module\component\BlockableStateMachine -I..\..\..\module\customize\ButtonModule -I..\..\..\module\external\Segger\SEGGER_RTT_V640\Syscalls -I..\..\..\module\external\Segger\SEGGER_RTT_V640\RTT -I.\RTE\_AudioPlayer -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include" -I"D:\Program Files\ARM\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_COMPILER_PRESENT -DX_TASK_LOG_DEBUG_METHOD=SeggerRTT_LogDebug --omf_browse=..\obj\sdio_sdcard.crf ..\HARDWARE\SDIO\sdio_sdcard.c]
                          THUMB

                          AREA ||i.CmdError||, CODE, READONLY, ALIGN=1

                  CmdError PROC
;;;1264   //返回值:sd卡错误码
;;;1265   SD_Error CmdError(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1266   {
;;;1267   	SD_Error errorstatus = SD_OK;
000002  2500              MOVS     r5,#0
;;;1268   	u32 timeout=SDIO_CMD0TIMEOUT;	   
000004  f44f3480          MOV      r4,#0x10000
;;;1269   	while(timeout--)
000008  e004              B        |L1.20|
                  |L1.10|
;;;1270   	{
;;;1271   		if(SDIO_GetFlagStatus(SDIO_FLAG_CMDSENT) != RESET)break;	//命令已发送(无需响应)	 
00000a  2080              MOVS     r0,#0x80
00000c  f7fffffe          BL       SDIO_GetFlagStatus
000010  b100              CBZ      r0,|L1.20|
000012  e003              B        |L1.28|
                  |L1.20|
000014  1e20              SUBS     r0,r4,#0              ;1269
000016  f1a40401          SUB      r4,r4,#1              ;1269
00001a  d1f6              BNE      |L1.10|
                  |L1.28|
00001c  bf00              NOP      
;;;1272   	}	    
;;;1273   	if(timeout==0)return SD_CMD_RSP_TIMEOUT;  
00001e  b90c              CBNZ     r4,|L1.36|
000020  2003              MOVS     r0,#3
                  |L1.34|
;;;1274   	SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;1275   	return errorstatus;
;;;1276   }	 
000022  bd70              POP      {r4-r6,pc}
                  |L1.36|
000024  f24050ff          MOV      r0,#0x5ff             ;1274
000028  f7fffffe          BL       SDIO_ClearFlag
00002c  4628              MOV      r0,r5                 ;1275
00002e  e7f8              B        |L1.34|
;;;1277   //检查R7响应的错误状态
                          ENDP


                          AREA ||i.CmdResp1Error||, CODE, READONLY, ALIGN=2

                  CmdResp1Error PROC
;;;1304   //返回值:sd卡错误码
;;;1305   SD_Error CmdResp1Error(u8 cmd)
000000  b570              PUSH     {r4-r6,lr}
;;;1306   {	  
000002  4604              MOV      r4,r0
;;;1307      	u32 status; 
;;;1308   	while(1)
000004  e005              B        |L2.18|
                  |L2.6|
;;;1309   	{
;;;1310   		status=SDIO->STA;
000006  4816              LDR      r0,|L2.96|
000008  6805              LDR      r5,[r0,#0]
;;;1311   		if(status&((1<<0)|(1<<2)|(1<<6)))break;//CRC错误/命令响应超时/已经收到响应(CRC校验成功)
00000a  f0050045          AND      r0,r5,#0x45
00000e  b100              CBZ      r0,|L2.18|
000010  e000              B        |L2.20|
                  |L2.18|
000012  e7f8              B        |L2.6|
                  |L2.20|
000014  bf00              NOP      
;;;1312   	} 
;;;1313   	if(SDIO_GetFlagStatus(SDIO_FLAG_CTIMEOUT) != RESET)					//响应超时
000016  2004              MOVS     r0,#4
000018  f7fffffe          BL       SDIO_GetFlagStatus
00001c  b120              CBZ      r0,|L2.40|
;;;1314   	{																				    
;;;1315    		SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT); 				//清除命令响应超时标志
00001e  2004              MOVS     r0,#4
000020  f7fffffe          BL       SDIO_ClearFlag
;;;1316   		return SD_CMD_RSP_TIMEOUT;
000024  2003              MOVS     r0,#3
                  |L2.38|
;;;1317   	}	
;;;1318    	if(SDIO_GetFlagStatus(SDIO_FLAG_CCRCFAIL) != RESET)					//CRC错误
;;;1319   	{																				    
;;;1320    		SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL); 				//清除标志
;;;1321   		return SD_CMD_CRC_FAIL;
;;;1322   	}		
;;;1323   	if(SDIO->RESPCMD!=cmd)return SD_ILLEGAL_CMD;//命令不匹配 
;;;1324     SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;1325   	return (SD_Error)(SDIO->RESP1&SD_OCR_ERRORBITS);//返回卡响应
;;;1326   }
000026  bd70              POP      {r4-r6,pc}
                  |L2.40|
000028  2001              MOVS     r0,#1                 ;1318
00002a  f7fffffe          BL       SDIO_GetFlagStatus
00002e  b120              CBZ      r0,|L2.58|
000030  2001              MOVS     r0,#1                 ;1320
000032  f7fffffe          BL       SDIO_ClearFlag
000036  2001              MOVS     r0,#1                 ;1321
000038  e7f5              B        |L2.38|
                  |L2.58|
00003a  4809              LDR      r0,|L2.96|
00003c  3824              SUBS     r0,r0,#0x24           ;1323
00003e  6800              LDR      r0,[r0,#0]            ;1323
000040  42a0              CMP      r0,r4                 ;1323
000042  d001              BEQ      |L2.72|
000044  2010              MOVS     r0,#0x10              ;1323
000046  e7ee              B        |L2.38|
                  |L2.72|
000048  f24050ff          MOV      r0,#0x5ff             ;1324
00004c  f7fffffe          BL       SDIO_ClearFlag
000050  4803              LDR      r0,|L2.96|
000052  3820              SUBS     r0,r0,#0x20           ;1325
000054  6800              LDR      r0,[r0,#0]            ;1325
000056  2108              MOVS     r1,#8                 ;1325
000058  4008              ANDS     r0,r0,r1              ;1325
00005a  b2c0              UXTB     r0,r0                 ;1325
00005c  e7e3              B        |L2.38|
;;;1327   //检查R3响应的错误状态
                          ENDP

00005e  0000              DCW      0x0000
                  |L2.96|
                          DCD      0x40012c34

                          AREA ||i.CmdResp2Error||, CODE, READONLY, ALIGN=2

                  CmdResp2Error PROC
;;;1346   //返回值:错误状态
;;;1347   SD_Error CmdResp2Error(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1348   {
;;;1349   	SD_Error errorstatus=SD_OK;
000002  2600              MOVS     r6,#0
;;;1350   	u32 status;
;;;1351   	u32 timeout=SDIO_CMD0TIMEOUT;
000004  f44f3580          MOV      r5,#0x10000
;;;1352    	while(timeout--)
000008  e005              B        |L3.22|
                  |L3.10|
;;;1353   	{
;;;1354   		status=SDIO->STA;
00000a  4811              LDR      r0,|L3.80|
00000c  6804              LDR      r4,[r0,#0]
;;;1355   		if(status&((1<<0)|(1<<2)|(1<<6)))break;//CRC错误/命令响应超时/已经收到响应(CRC校验成功)	
00000e  f0040045          AND      r0,r4,#0x45
000012  b100              CBZ      r0,|L3.22|
000014  e003              B        |L3.30|
                  |L3.22|
000016  1e28              SUBS     r0,r5,#0              ;1352
000018  f1a50501          SUB      r5,r5,#1              ;1352
00001c  d1f5              BNE      |L3.10|
                  |L3.30|
00001e  bf00              NOP      
;;;1356   	}
;;;1357     	if((timeout==0)||(status&(1<<2)))	//响应超时
000020  b115              CBZ      r5,|L3.40|
000022  f0040004          AND      r0,r4,#4
000026  b128              CBZ      r0,|L3.52|
                  |L3.40|
;;;1358   	{																				    
;;;1359   		errorstatus=SD_CMD_RSP_TIMEOUT; 
000028  2603              MOVS     r6,#3
;;;1360   		SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT); 		//清除命令响应超时标志
00002a  2004              MOVS     r0,#4
00002c  f7fffffe          BL       SDIO_ClearFlag
;;;1361   		return errorstatus;
000030  4630              MOV      r0,r6
                  |L3.50|
;;;1362   	}	 
;;;1363   	if(SDIO_GetFlagStatus(SDIO_FLAG_CCRCFAIL) != RESET)						//CRC错误
;;;1364   	{								   
;;;1365   		errorstatus=SD_CMD_CRC_FAIL;
;;;1366   		SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);		//清除响应标志
;;;1367    	}
;;;1368   	SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;1369    	return errorstatus;								    		 
;;;1370   } 
000032  bd70              POP      {r4-r6,pc}
                  |L3.52|
000034  2001              MOVS     r0,#1                 ;1363
000036  f7fffffe          BL       SDIO_GetFlagStatus
00003a  b118              CBZ      r0,|L3.68|
00003c  2601              MOVS     r6,#1                 ;1365
00003e  2001              MOVS     r0,#1                 ;1366
000040  f7fffffe          BL       SDIO_ClearFlag
                  |L3.68|
000044  f24050ff          MOV      r0,#0x5ff             ;1368
000048  f7fffffe          BL       SDIO_ClearFlag
00004c  4630              MOV      r0,r6                 ;1369
00004e  e7f0              B        |L3.50|
;;;1371   //检查R6响应的错误状态
                          ENDP

                  |L3.80|
                          DCD      0x40012c34

                          AREA ||i.CmdResp3Error||, CODE, READONLY, ALIGN=2

                  CmdResp3Error PROC
;;;1328   //返回值:错误状态
;;;1329   SD_Error CmdResp3Error(void)
000000  b510              PUSH     {r4,lr}
;;;1330   {
;;;1331   	u32 status;						 
;;;1332    	while(1)
000002  e005              B        |L4.16|
                  |L4.4|
;;;1333   	{
;;;1334   		status=SDIO->STA;
000004  480b              LDR      r0,|L4.52|
000006  6804              LDR      r4,[r0,#0]
;;;1335   		if(status&((1<<0)|(1<<2)|(1<<6)))break;//CRC错误/命令响应超时/已经收到响应(CRC校验成功)	
000008  f0040045          AND      r0,r4,#0x45
00000c  b100              CBZ      r0,|L4.16|
00000e  e000              B        |L4.18|
                  |L4.16|
000010  e7f8              B        |L4.4|
                  |L4.18|
000012  bf00              NOP      
;;;1336   	}
;;;1337    	if(SDIO_GetFlagStatus(SDIO_FLAG_CTIMEOUT) != RESET)					//响应超时
000014  2004              MOVS     r0,#4
000016  f7fffffe          BL       SDIO_GetFlagStatus
00001a  b120              CBZ      r0,|L4.38|
;;;1338   	{											 
;;;1339   		SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);			//清除命令响应超时标志
00001c  2004              MOVS     r0,#4
00001e  f7fffffe          BL       SDIO_ClearFlag
;;;1340   		return SD_CMD_RSP_TIMEOUT;
000022  2003              MOVS     r0,#3
                  |L4.36|
;;;1341   	}	 
;;;1342      SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;1343    	return SD_OK;								  
;;;1344   }
000024  bd10              POP      {r4,pc}
                  |L4.38|
000026  f24050ff          MOV      r0,#0x5ff             ;1342
00002a  f7fffffe          BL       SDIO_ClearFlag
00002e  2000              MOVS     r0,#0                 ;1343
000030  e7f8              B        |L4.36|
;;;1345   //检查R2响应的错误状态
                          ENDP

000032  0000              DCW      0x0000
                  |L4.52|
                          DCD      0x40012c34

                          AREA ||i.CmdResp6Error||, CODE, READONLY, ALIGN=2

                  CmdResp6Error PROC
;;;1374   //返回值:错误状态
;;;1375   SD_Error CmdResp6Error(u8 cmd,u16*prca)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1376   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;1377   	SD_Error errorstatus=SD_OK;
000008  f04f0800          MOV      r8,#0
;;;1378   	u32 status;					    
;;;1379   	u32 rspr1;
;;;1380    	while(1)
00000c  e005              B        |L5.26|
                  |L5.14|
;;;1381   	{
;;;1382   		status=SDIO->STA;
00000e  4820              LDR      r0,|L5.144|
000010  6807              LDR      r7,[r0,#0]
;;;1383   		if(status&((1<<0)|(1<<2)|(1<<6)))break;//CRC错误/命令响应超时/已经收到响应(CRC校验成功)	
000012  f0070045          AND      r0,r7,#0x45
000016  b100              CBZ      r0,|L5.26|
000018  e000              B        |L5.28|
                  |L5.26|
00001a  e7f8              B        |L5.14|
                  |L5.28|
00001c  bf00              NOP      
;;;1384   	}
;;;1385   	if(SDIO_GetFlagStatus(SDIO_FLAG_CTIMEOUT) != RESET)					//响应超时
00001e  2004              MOVS     r0,#4
000020  f7fffffe          BL       SDIO_GetFlagStatus
000024  b128              CBZ      r0,|L5.50|
;;;1386   	{																				    
;;;1387    		SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);			//清除命令响应超时标志
000026  2004              MOVS     r0,#4
000028  f7fffffe          BL       SDIO_ClearFlag
;;;1388   		return SD_CMD_RSP_TIMEOUT;
00002c  2003              MOVS     r0,#3
                  |L5.46|
;;;1389   	}	 	 
;;;1390   	if(SDIO_GetFlagStatus(SDIO_FLAG_CCRCFAIL) != RESET)						//CRC错误
;;;1391   	{								   
;;;1392   		SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);					//清除响应标志
;;;1393    		return SD_CMD_CRC_FAIL;
;;;1394   	}
;;;1395   	if(SDIO->RESPCMD!=cmd)				//判断是否响应cmd命令
;;;1396   	{
;;;1397    		return SD_ILLEGAL_CMD; 		
;;;1398   	}	    
;;;1399   	SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;1400   	rspr1=SDIO->RESP1;					//得到响应 	 
;;;1401   	if(SD_ALLZERO==(rspr1&(SD_R6_GENERAL_UNKNOWN_ERROR|SD_R6_ILLEGAL_CMD|SD_R6_COM_CRC_FAILED)))
;;;1402   	{
;;;1403   		*prca=(u16)(rspr1>>16);			//右移16位得到,rca
;;;1404   		return errorstatus;
;;;1405   	}
;;;1406      	if(rspr1&SD_R6_GENERAL_UNKNOWN_ERROR)return SD_GENERAL_UNKNOWN_ERROR;
;;;1407      	if(rspr1&SD_R6_ILLEGAL_CMD)return SD_ILLEGAL_CMD;
;;;1408      	if(rspr1&SD_R6_COM_CRC_FAILED)return SD_COM_CRC_FAILED;
;;;1409   	return errorstatus;
;;;1410   }
00002e  e8bd81f0          POP      {r4-r8,pc}
                  |L5.50|
000032  2001              MOVS     r0,#1                 ;1390
000034  f7fffffe          BL       SDIO_GetFlagStatus
000038  b120              CBZ      r0,|L5.68|
00003a  2001              MOVS     r0,#1                 ;1392
00003c  f7fffffe          BL       SDIO_ClearFlag
000040  2001              MOVS     r0,#1                 ;1393
000042  e7f4              B        |L5.46|
                  |L5.68|
000044  4812              LDR      r0,|L5.144|
000046  3824              SUBS     r0,r0,#0x24           ;1395
000048  6800              LDR      r0,[r0,#0]            ;1395
00004a  42a8              CMP      r0,r5                 ;1395
00004c  d001              BEQ      |L5.82|
00004e  2010              MOVS     r0,#0x10              ;1397
000050  e7ed              B        |L5.46|
                  |L5.82|
000052  f24050ff          MOV      r0,#0x5ff             ;1399
000056  f7fffffe          BL       SDIO_ClearFlag
00005a  480d              LDR      r0,|L5.144|
00005c  3820              SUBS     r0,r0,#0x20           ;1400
00005e  6804              LDR      r4,[r0,#0]            ;1400
000060  f4044060          AND      r0,r4,#0xe000         ;1401
000064  b918              CBNZ     r0,|L5.110|
000066  0c20              LSRS     r0,r4,#16             ;1403
000068  8030              STRH     r0,[r6,#0]            ;1403
00006a  4640              MOV      r0,r8                 ;1404
00006c  e7df              B        |L5.46|
                  |L5.110|
00006e  f4045000          AND      r0,r4,#0x2000         ;1406
000072  b108              CBZ      r0,|L5.120|
000074  2013              MOVS     r0,#0x13              ;1406
000076  e7da              B        |L5.46|
                  |L5.120|
000078  f4044080          AND      r0,r4,#0x4000         ;1407
00007c  b108              CBZ      r0,|L5.130|
00007e  2010              MOVS     r0,#0x10              ;1407
000080  e7d5              B        |L5.46|
                  |L5.130|
000082  f4044000          AND      r0,r4,#0x8000         ;1408
000086  b108              CBZ      r0,|L5.140|
000088  200f              MOVS     r0,#0xf               ;1408
00008a  e7d0              B        |L5.46|
                  |L5.140|
00008c  4640              MOV      r0,r8                 ;1409
00008e  e7ce              B        |L5.46|
;;;1411   
                          ENDP

                  |L5.144|
                          DCD      0x40012c34

                          AREA ||i.CmdResp7Error||, CODE, READONLY, ALIGN=2

                  CmdResp7Error PROC
;;;1278   //返回值:sd卡错误码
;;;1279   SD_Error CmdResp7Error(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1280   {
;;;1281   	SD_Error errorstatus=SD_OK;
000002  2600              MOVS     r6,#0
;;;1282   	u32 status;
;;;1283   	u32 timeout=SDIO_CMD0TIMEOUT;
000004  f44f3580          MOV      r5,#0x10000
;;;1284    	while(timeout--)
000008  e005              B        |L6.22|
                  |L6.10|
;;;1285   	{
;;;1286   		status=SDIO->STA;
00000a  480f              LDR      r0,|L6.72|
00000c  6804              LDR      r4,[r0,#0]
;;;1287   		if(status&((1<<0)|(1<<2)|(1<<6)))break;//CRC错误/命令响应超时/已经收到响应(CRC校验成功)	
00000e  f0040045          AND      r0,r4,#0x45
000012  b100              CBZ      r0,|L6.22|
000014  e003              B        |L6.30|
                  |L6.22|
000016  1e28              SUBS     r0,r5,#0              ;1284
000018  f1a50501          SUB      r5,r5,#1              ;1284
00001c  d1f5              BNE      |L6.10|
                  |L6.30|
00001e  bf00              NOP      
;;;1288   	}
;;;1289    	if((timeout==0)||(status&(1<<2)))	//响应超时
000020  b115              CBZ      r5,|L6.40|
000022  f0040004          AND      r0,r4,#4
000026  b128              CBZ      r0,|L6.52|
                  |L6.40|
;;;1290   	{																				    
;;;1291   		errorstatus=SD_CMD_RSP_TIMEOUT;	//当前卡不是2.0兼容卡,或者不支持设定的电压范围
000028  2603              MOVS     r6,#3
;;;1292   		SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT); 			//清除命令响应超时标志
00002a  2004              MOVS     r0,#4
00002c  f7fffffe          BL       SDIO_ClearFlag
;;;1293   		return errorstatus;
000030  4630              MOV      r0,r6
                  |L6.50|
;;;1294   	}	 
;;;1295   	if(status&1<<6)						//成功接收到响应
;;;1296   	{								   
;;;1297   		errorstatus=SD_OK;
;;;1298   		SDIO_ClearFlag(SDIO_FLAG_CMDREND); 				//清除响应标志
;;;1299    	}
;;;1300   	return errorstatus;
;;;1301   }	   
000032  bd70              POP      {r4-r6,pc}
                  |L6.52|
000034  f0040040          AND      r0,r4,#0x40           ;1295
000038  b118              CBZ      r0,|L6.66|
00003a  2600              MOVS     r6,#0                 ;1297
00003c  2040              MOVS     r0,#0x40              ;1298
00003e  f7fffffe          BL       SDIO_ClearFlag
                  |L6.66|
000042  4630              MOV      r0,r6                 ;1300
000044  e7f5              B        |L6.50|
;;;1302   //检查R1响应的错误状态
                          ENDP

000046  0000              DCW      0x0000
                  |L6.72|
                          DCD      0x40012c34

                          AREA ||i.FindSCR||, CODE, READONLY, ALIGN=2

                  FindSCR PROC
;;;1518   //返回值:错误状态		   
;;;1519   SD_Error FindSCR(u16 rca,u32 *pscr)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;1520   { 
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
;;;1521   	u32 index = 0; 
000008  2600              MOVS     r6,#0
;;;1522   	SD_Error errorstatus = SD_OK;
00000a  2400              MOVS     r4,#0
;;;1523   	u32 tempscr[2]={0,0};  
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
000010  9001              STR      r0,[sp,#4]
;;;1524   	
;;;1525   	SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;	 //发送CMD16,短响应,设置Block Size为8字节	
000012  2008              MOVS     r0,#8
000014  495b              LDR      r1,|L7.388|
000016  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;1526     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN; //	 cmd16
000018  2010              MOVS     r0,#0x10
00001a  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1527     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;  //r1
00001c  2040              MOVS     r0,#0x40
00001e  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1528     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000020  2000              MOVS     r0,#0
000022  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1529     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000024  f44f6080          MOV      r0,#0x400
000028  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1530     SDIO_SendCommand(&SDIO_CmdInitStructure);
00002a  4608              MOV      r0,r1
00002c  f7fffffe          BL       SDIO_SendCommand
;;;1531   	
;;;1532    	errorstatus=CmdResp1Error(SD_CMD_SET_BLOCKLEN);
000030  2010              MOVS     r0,#0x10
000032  f7fffffe          BL       CmdResp1Error
000036  4604              MOV      r4,r0
;;;1533   	
;;;1534    	if(errorstatus!=SD_OK)return errorstatus;	 
000038  b114              CBZ      r4,|L7.64|
00003a  4620              MOV      r0,r4
                  |L7.60|
;;;1535   	
;;;1536     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16; 
;;;1537     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;//发送CMD55,短响应 	
;;;1538     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1539     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1540     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1541     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1542   	
;;;1543    	errorstatus=CmdResp1Error(SD_CMD_APP_CMD);
;;;1544    	if(errorstatus!=SD_OK)return errorstatus;
;;;1545   	
;;;1546     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1547     SDIO_DataInitStructure.SDIO_DataLength = 8;  //8个字节长度,block为8字节,SD卡到SDIO.
;;;1548     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b  ;  //块大小8byte 
;;;1549     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;1550     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1551     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1552     SDIO_DataConfig(&SDIO_DataInitStructure);		
;;;1553   
;;;1554     SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;1555     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_SEND_SCR;	//发送ACMD51,短响应,参数为0	
;;;1556     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;  //r1
;;;1557     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1558     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1559     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1560   	
;;;1561    	errorstatus=CmdResp1Error(SD_CMD_SD_APP_SEND_SCR);
;;;1562    	if(errorstatus!=SD_OK)return errorstatus;							   
;;;1563    	while(!(SDIO->STA&(SDIO_FLAG_RXOVERR|SDIO_FLAG_DCRCFAIL|SDIO_FLAG_DTIMEOUT|SDIO_FLAG_DBCKEND|SDIO_FLAG_STBITERR)))
;;;1564   	{ 
;;;1565   		if(SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)//接收FIFO数据可用
;;;1566   		{
;;;1567   			*(tempscr+index)=SDIO->FIFO;	//读取FIFO内容
;;;1568   			index++;
;;;1569   			if(index>=2)break;
;;;1570   		}
;;;1571   	}
;;;1572   		if(SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)		//数据超时错误
;;;1573   		{										   
;;;1574   	 		SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT); 	//清错误标志
;;;1575   			return SD_DATA_TIMEOUT;
;;;1576   	 	}else if(SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)	//数据块CRC错误
;;;1577   		{
;;;1578   	 		SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);  		//清错误标志
;;;1579   			return SD_DATA_CRC_FAIL;		   
;;;1580   		}else if(SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET) 	//接收fifo上溢错误
;;;1581   		{
;;;1582   	 		SDIO_ClearFlag(SDIO_FLAG_RXOVERR);		//清错误标志
;;;1583   			return SD_RX_OVERRUN;		 
;;;1584   		}else if(SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET) 	//接收起始位错误
;;;1585   		{
;;;1586   	 		SDIO_ClearFlag(SDIO_FLAG_STBITERR);//清错误标志
;;;1587   			return SD_START_BIT_ERR;		 
;;;1588   		}  
;;;1589      SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;1590   	//把数据顺序按8位为单位倒过来.   	
;;;1591   	*(pscr+1)=((tempscr[0]&SD_0TO7BITS)<<24)|((tempscr[0]&SD_8TO15BITS)<<8)|((tempscr[0]&SD_16TO23BITS)>>8)|((tempscr[0]&SD_24TO31BITS)>>24);
;;;1592   	*(pscr)=((tempscr[1]&SD_0TO7BITS)<<24)|((tempscr[1]&SD_8TO15BITS)<<8)|((tempscr[1]&SD_16TO23BITS)>>8)|((tempscr[1]&SD_24TO31BITS)>>24);
;;;1593    	return errorstatus;
;;;1594   }
00003c  e8bd81fc          POP      {r2-r8,pc}
                  |L7.64|
000040  4851              LDR      r0,|L7.392|
000042  8800              LDRH     r0,[r0,#0]            ;1536  ; RCA
000044  0400              LSLS     r0,r0,#16             ;1536
000046  494f              LDR      r1,|L7.388|
000048  6008              STR      r0,[r1,#0]            ;1536  ; SDIO_CmdInitStructure
00004a  2037              MOVS     r0,#0x37              ;1537
00004c  6048              STR      r0,[r1,#4]            ;1537  ; SDIO_CmdInitStructure
00004e  2040              MOVS     r0,#0x40              ;1538
000050  6088              STR      r0,[r1,#8]            ;1538  ; SDIO_CmdInitStructure
000052  2000              MOVS     r0,#0                 ;1539
000054  60c8              STR      r0,[r1,#0xc]          ;1539  ; SDIO_CmdInitStructure
000056  f44f6080          MOV      r0,#0x400             ;1540
00005a  6108              STR      r0,[r1,#0x10]         ;1540  ; SDIO_CmdInitStructure
00005c  4608              MOV      r0,r1                 ;1541
00005e  f7fffffe          BL       SDIO_SendCommand
000062  2037              MOVS     r0,#0x37              ;1543
000064  f7fffffe          BL       CmdResp1Error
000068  4604              MOV      r4,r0                 ;1543
00006a  b10c              CBZ      r4,|L7.112|
00006c  4620              MOV      r0,r4                 ;1544
00006e  e7e5              B        |L7.60|
                  |L7.112|
000070  f04f30ff          MOV      r0,#0xffffffff        ;1546
000074  4945              LDR      r1,|L7.396|
000076  6008              STR      r0,[r1,#0]            ;1546  ; SDIO_DataInitStructure
000078  2008              MOVS     r0,#8                 ;1547
00007a  6048              STR      r0,[r1,#4]            ;1547  ; SDIO_DataInitStructure
00007c  2030              MOVS     r0,#0x30              ;1548
00007e  6088              STR      r0,[r1,#8]            ;1548  ; SDIO_DataInitStructure
000080  2002              MOVS     r0,#2                 ;1549
000082  60c8              STR      r0,[r1,#0xc]          ;1549  ; SDIO_DataInitStructure
000084  2000              MOVS     r0,#0                 ;1550
000086  6108              STR      r0,[r1,#0x10]         ;1550  ; SDIO_DataInitStructure
000088  2001              MOVS     r0,#1                 ;1551
00008a  6148              STR      r0,[r1,#0x14]         ;1551  ; SDIO_DataInitStructure
00008c  4608              MOV      r0,r1                 ;1552
00008e  f7fffffe          BL       SDIO_DataConfig
000092  2000              MOVS     r0,#0                 ;1554
000094  493b              LDR      r1,|L7.388|
000096  6008              STR      r0,[r1,#0]            ;1554  ; SDIO_CmdInitStructure
000098  2033              MOVS     r0,#0x33              ;1555
00009a  6048              STR      r0,[r1,#4]            ;1555  ; SDIO_CmdInitStructure
00009c  2040              MOVS     r0,#0x40              ;1556
00009e  6088              STR      r0,[r1,#8]            ;1556  ; SDIO_CmdInitStructure
0000a0  2000              MOVS     r0,#0                 ;1557
0000a2  60c8              STR      r0,[r1,#0xc]          ;1557  ; SDIO_CmdInitStructure
0000a4  f44f6080          MOV      r0,#0x400             ;1558
0000a8  6108              STR      r0,[r1,#0x10]         ;1558  ; SDIO_CmdInitStructure
0000aa  4608              MOV      r0,r1                 ;1559
0000ac  f7fffffe          BL       SDIO_SendCommand
0000b0  2033              MOVS     r0,#0x33              ;1561
0000b2  f7fffffe          BL       CmdResp1Error
0000b6  4604              MOV      r4,r0                 ;1561
0000b8  b10c              CBZ      r4,|L7.190|
0000ba  4620              MOV      r0,r4                 ;1562
0000bc  e7be              B        |L7.60|
                  |L7.190|
0000be  e00c              B        |L7.218|
                  |L7.192|
0000c0  f44f1000          MOV      r0,#0x200000          ;1565
0000c4  f7fffffe          BL       SDIO_GetFlagStatus
0000c8  b138              CBZ      r0,|L7.218|
0000ca  4831              LDR      r0,|L7.400|
0000cc  6800              LDR      r0,[r0,#0]            ;1567
0000ce  f84d0026          STR      r0,[sp,r6,LSL #2]     ;1567
0000d2  1c76              ADDS     r6,r6,#1              ;1568
0000d4  2e02              CMP      r6,#2                 ;1569
0000d6  d300              BCC      |L7.218|
0000d8  e007              B        |L7.234|
                  |L7.218|
0000da  482d              LDR      r0,|L7.400|
0000dc  384c              SUBS     r0,r0,#0x4c           ;1563
0000de  6800              LDR      r0,[r0,#0]            ;1563
0000e0  f240612a          MOV      r1,#0x62a             ;1563
0000e4  4008              ANDS     r0,r0,r1              ;1563
0000e6  2800              CMP      r0,#0                 ;1563
0000e8  d0ea              BEQ      |L7.192|
                  |L7.234|
0000ea  bf00              NOP                            ;1569
0000ec  2008              MOVS     r0,#8                 ;1572
0000ee  f7fffffe          BL       SDIO_GetFlagStatus
0000f2  b120              CBZ      r0,|L7.254|
0000f4  2008              MOVS     r0,#8                 ;1574
0000f6  f7fffffe          BL       SDIO_ClearFlag
0000fa  2004              MOVS     r0,#4                 ;1575
0000fc  e79e              B        |L7.60|
                  |L7.254|
0000fe  2002              MOVS     r0,#2                 ;1576
000100  f7fffffe          BL       SDIO_GetFlagStatus
000104  b120              CBZ      r0,|L7.272|
000106  2002              MOVS     r0,#2                 ;1578
000108  f7fffffe          BL       SDIO_ClearFlag
00010c  2002              MOVS     r0,#2                 ;1579
00010e  e795              B        |L7.60|
                  |L7.272|
000110  2020              MOVS     r0,#0x20              ;1580
000112  f7fffffe          BL       SDIO_GetFlagStatus
000116  b120              CBZ      r0,|L7.290|
000118  2020              MOVS     r0,#0x20              ;1582
00011a  f7fffffe          BL       SDIO_ClearFlag
00011e  2006              MOVS     r0,#6                 ;1583
000120  e78c              B        |L7.60|
                  |L7.290|
000122  f44f7000          MOV      r0,#0x200             ;1584
000126  f7fffffe          BL       SDIO_GetFlagStatus
00012a  b128              CBZ      r0,|L7.312|
00012c  f44f7000          MOV      r0,#0x200             ;1586
000130  f7fffffe          BL       SDIO_ClearFlag
000134  2007              MOVS     r0,#7                 ;1587
000136  e781              B        |L7.60|
                  |L7.312|
000138  f24050ff          MOV      r0,#0x5ff             ;1589
00013c  f7fffffe          BL       SDIO_ClearFlag
000140  9800              LDR      r0,[sp,#0]            ;1591
000142  0600              LSLS     r0,r0,#24             ;1591
000144  9900              LDR      r1,[sp,#0]            ;1591
000146  f401417f          AND      r1,r1,#0xff00         ;1591
00014a  ea402001          ORR      r0,r0,r1,LSL #8       ;1591
00014e  9900              LDR      r1,[sp,#0]            ;1591
000150  f401017f          AND      r1,r1,#0xff0000       ;1591
000154  ea402011          ORR      r0,r0,r1,LSR #8       ;1591
000158  9900              LDR      r1,[sp,#0]            ;1591
00015a  ea406011          ORR      r0,r0,r1,LSR #24      ;1591
00015e  6068              STR      r0,[r5,#4]            ;1591
000160  9801              LDR      r0,[sp,#4]            ;1592
000162  0600              LSLS     r0,r0,#24             ;1592
000164  9901              LDR      r1,[sp,#4]            ;1592
000166  f401417f          AND      r1,r1,#0xff00         ;1592
00016a  ea402001          ORR      r0,r0,r1,LSL #8       ;1592
00016e  9901              LDR      r1,[sp,#4]            ;1592
000170  f401017f          AND      r1,r1,#0xff0000       ;1592
000174  ea402011          ORR      r0,r0,r1,LSR #8       ;1592
000178  9901              LDR      r1,[sp,#4]            ;1592
00017a  ea406011          ORR      r0,r0,r1,LSR #24      ;1592
00017e  6028              STR      r0,[r5,#0]            ;1592
000180  4620              MOV      r0,r4                 ;1593
000182  e75b              B        |L7.60|
;;;1595   //得到NumberOfBytes以2为底的指数.
                          ENDP

                  |L7.388|
                          DCD      SDIO_CmdInitStructure
                  |L7.392|
                          DCD      ||RCA||
                  |L7.396|
                          DCD      SDIO_DataInitStructure
                  |L7.400|
                          DCD      0x40012c80

                          AREA ||i.IsCardProgramming||, CODE, READONLY, ALIGN=2

                  IsCardProgramming PROC
;;;1452   //返回值:错误代码
;;;1453   SD_Error IsCardProgramming(u8 *pstatus)
000000  b51c              PUSH     {r2-r4,lr}
;;;1454   {
000002  4604              MOV      r4,r0
;;;1455    	vu32 respR1 = 0, status = 0;  
000004  2000              MOVS     r0,#0
000006  9001              STR      r0,[sp,#4]
000008  9000              STR      r0,[sp,#0]
;;;1456     
;;;1457     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16; //卡相对地址参数
00000a  4822              LDR      r0,|L8.148|
00000c  8800              LDRH     r0,[r0,#0]  ; RCA
00000e  0400              LSLS     r0,r0,#16
000010  4921              LDR      r1,|L8.152|
000012  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;1458     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;//发送CMD13 	
000014  200d              MOVS     r0,#0xd
000016  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1459     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
000018  2040              MOVS     r0,#0x40
00001a  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1460     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
00001c  2000              MOVS     r0,#0
00001e  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1461     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000020  f44f6080          MOV      r0,#0x400
000024  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1462     SDIO_SendCommand(&SDIO_CmdInitStructure);	
000026  4608              MOV      r0,r1
000028  f7fffffe          BL       SDIO_SendCommand
;;;1463    	
;;;1464   	status=SDIO->STA;
00002c  481b              LDR      r0,|L8.156|
00002e  6800              LDR      r0,[r0,#0]
000030  9000              STR      r0,[sp,#0]
;;;1465   	
;;;1466   	while(!(status&((1<<0)|(1<<6)|(1<<2))))status=SDIO->STA;//等待操作完成
000032  e002              B        |L8.58|
                  |L8.52|
000034  4819              LDR      r0,|L8.156|
000036  6800              LDR      r0,[r0,#0]
000038  9000              STR      r0,[sp,#0]
                  |L8.58|
00003a  9800              LDR      r0,[sp,#0]
00003c  f0000045          AND      r0,r0,#0x45
000040  2800              CMP      r0,#0
000042  d0f7              BEQ      |L8.52|
;;;1467      	if(SDIO_GetFlagStatus(SDIO_FLAG_CCRCFAIL) != RESET)			//CRC检测失败
000044  2001              MOVS     r0,#1
000046  f7fffffe          BL       SDIO_GetFlagStatus
00004a  b120              CBZ      r0,|L8.86|
;;;1468   	{  
;;;1469   	  SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);	//清除错误标记
00004c  2001              MOVS     r0,#1
00004e  f7fffffe          BL       SDIO_ClearFlag
;;;1470   		return SD_CMD_CRC_FAIL;
000052  2001              MOVS     r0,#1
                  |L8.84|
;;;1471   	}
;;;1472      	if(SDIO_GetFlagStatus(SDIO_FLAG_CTIMEOUT) != RESET)			//命令超时 
;;;1473   	{
;;;1474   		SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);			//清除错误标记
;;;1475   		return SD_CMD_RSP_TIMEOUT;
;;;1476   	}
;;;1477    	if(SDIO->RESPCMD!=SD_CMD_SEND_STATUS)return SD_ILLEGAL_CMD;
;;;1478   	SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;1479   	respR1=SDIO->RESP1;
;;;1480   	*pstatus=(u8)((respR1>>9)&0x0000000F);
;;;1481   	return SD_OK;
;;;1482   }
000054  bd1c              POP      {r2-r4,pc}
                  |L8.86|
000056  2004              MOVS     r0,#4                 ;1472
000058  f7fffffe          BL       SDIO_GetFlagStatus
00005c  b120              CBZ      r0,|L8.104|
00005e  2004              MOVS     r0,#4                 ;1474
000060  f7fffffe          BL       SDIO_ClearFlag
000064  2003              MOVS     r0,#3                 ;1475
000066  e7f5              B        |L8.84|
                  |L8.104|
000068  480c              LDR      r0,|L8.156|
00006a  3824              SUBS     r0,r0,#0x24           ;1477
00006c  6800              LDR      r0,[r0,#0]            ;1477
00006e  280d              CMP      r0,#0xd               ;1477
000070  d001              BEQ      |L8.118|
000072  2010              MOVS     r0,#0x10              ;1477
000074  e7ee              B        |L8.84|
                  |L8.118|
000076  f24050ff          MOV      r0,#0x5ff             ;1478
00007a  f7fffffe          BL       SDIO_ClearFlag
00007e  4807              LDR      r0,|L8.156|
000080  3820              SUBS     r0,r0,#0x20           ;1479
000082  6800              LDR      r0,[r0,#0]            ;1479
000084  9001              STR      r0,[sp,#4]            ;1479
000086  9801              LDR      r0,[sp,#4]            ;1480
000088  f3c02043          UBFX     r0,r0,#9,#4           ;1480
00008c  7020              STRB     r0,[r4,#0]            ;1480
00008e  2000              MOVS     r0,#0                 ;1481
000090  e7e0              B        |L8.84|
;;;1483   //读取当前卡状态
                          ENDP

000092  0000              DCW      0x0000
                  |L8.148|
                          DCD      ||RCA||
                  |L8.152|
                          DCD      SDIO_CmdInitStructure
                  |L8.156|
                          DCD      0x40012c34

                          AREA ||i.SDEnWideBus||, CODE, READONLY, ALIGN=2

                  SDEnWideBus PROC
;;;1414   //返回值:错误状态
;;;1415   SD_Error SDEnWideBus(u8 enx)
000000  b57c              PUSH     {r2-r6,lr}
;;;1416   {
000002  4605              MOV      r5,r0
;;;1417   	SD_Error errorstatus = SD_OK;
000004  2400              MOVS     r4,#0
;;;1418    	u32 scr[2]={0,0};
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
00000a  9001              STR      r0,[sp,#4]
;;;1419   	u8 arg=0X00;
00000c  2600              MOVS     r6,#0
;;;1420   	if(enx)arg=0X02;
00000e  b10d              CBZ      r5,|L9.20|
000010  2602              MOVS     r6,#2
000012  e000              B        |L9.22|
                  |L9.20|
;;;1421   	else arg=0X00;
000014  2600              MOVS     r6,#0
                  |L9.22|
;;;1422    	if(SDIO->RESP1&SD_CARD_LOCKED)return SD_LOCK_UNLOCK_FAILED;//SD卡处于LOCKED状态		    
000016  4822              LDR      r0,|L9.160|
000018  6800              LDR      r0,[r0,#0]
00001a  f0007000          AND      r0,r0,#0x2000000
00001e  b108              CBZ      r0,|L9.36|
000020  200e              MOVS     r0,#0xe
                  |L9.34|
;;;1423    	errorstatus=FindSCR(RCA,scr);						//得到SCR寄存器数据
;;;1424    	if(errorstatus!=SD_OK)return errorstatus;
;;;1425   	if((scr[1]&SD_WIDE_BUS_SUPPORT)!=SD_ALLZERO)		//支持宽总线
;;;1426   	{
;;;1427   		  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;//发送CMD55+RCA,短响应	
;;;1428         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;1429         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1430         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1431         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1432         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1433   		
;;;1434   	 	errorstatus=CmdResp1Error(SD_CMD_APP_CMD);
;;;1435   		
;;;1436   	 	if(errorstatus!=SD_OK)return errorstatus; 
;;;1437   		
;;;1438   		  SDIO_CmdInitStructure.SDIO_Argument = arg;//发送ACMD6,短响应,参数:10,4位;00,1位.	
;;;1439         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;
;;;1440         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1441         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1442         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1443         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1444   			
;;;1445        errorstatus=CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
;;;1446   		
;;;1447   		return errorstatus;
;;;1448   	}else return SD_REQUEST_NOT_APPLICABLE;				//不支持宽总线设置 	 
;;;1449   }												   
000022  bd7c              POP      {r2-r6,pc}
                  |L9.36|
000024  491f              LDR      r1,|L9.164|
000026  8809              LDRH     r1,[r1,#0]            ;1423  ; RCA
000028  b288              UXTH     r0,r1                 ;1423
00002a  4669              MOV      r1,sp                 ;1423
00002c  f7fffffe          BL       FindSCR
000030  4604              MOV      r4,r0                 ;1423
000032  b10c              CBZ      r4,|L9.56|
000034  4620              MOV      r0,r4                 ;1424
000036  e7f4              B        |L9.34|
                  |L9.56|
000038  9801              LDR      r0,[sp,#4]            ;1425
00003a  f4002080          AND      r0,r0,#0x40000        ;1425
00003e  b360              CBZ      r0,|L9.154|
000040  4818              LDR      r0,|L9.164|
000042  8800              LDRH     r0,[r0,#0]            ;1427  ; RCA
000044  0400              LSLS     r0,r0,#16             ;1427
000046  4918              LDR      r1,|L9.168|
000048  6008              STR      r0,[r1,#0]            ;1427  ; SDIO_CmdInitStructure
00004a  2037              MOVS     r0,#0x37              ;1428
00004c  6048              STR      r0,[r1,#4]            ;1428  ; SDIO_CmdInitStructure
00004e  2040              MOVS     r0,#0x40              ;1429
000050  6088              STR      r0,[r1,#8]            ;1429  ; SDIO_CmdInitStructure
000052  2000              MOVS     r0,#0                 ;1430
000054  60c8              STR      r0,[r1,#0xc]          ;1430  ; SDIO_CmdInitStructure
000056  f44f6080          MOV      r0,#0x400             ;1431
00005a  6108              STR      r0,[r1,#0x10]         ;1431  ; SDIO_CmdInitStructure
00005c  4608              MOV      r0,r1                 ;1432
00005e  f7fffffe          BL       SDIO_SendCommand
000062  2037              MOVS     r0,#0x37              ;1434
000064  f7fffffe          BL       CmdResp1Error
000068  4604              MOV      r4,r0                 ;1434
00006a  b10c              CBZ      r4,|L9.112|
00006c  4620              MOV      r0,r4                 ;1436
00006e  e7d8              B        |L9.34|
                  |L9.112|
000070  480d              LDR      r0,|L9.168|
000072  6006              STR      r6,[r0,#0]            ;1438  ; SDIO_CmdInitStructure
000074  2006              MOVS     r0,#6                 ;1439
000076  490c              LDR      r1,|L9.168|
000078  6048              STR      r0,[r1,#4]            ;1439  ; SDIO_CmdInitStructure
00007a  2040              MOVS     r0,#0x40              ;1440
00007c  6088              STR      r0,[r1,#8]            ;1440  ; SDIO_CmdInitStructure
00007e  2000              MOVS     r0,#0                 ;1441
000080  60c8              STR      r0,[r1,#0xc]          ;1441  ; SDIO_CmdInitStructure
000082  f44f6080          MOV      r0,#0x400             ;1442
000086  6108              STR      r0,[r1,#0x10]         ;1442  ; SDIO_CmdInitStructure
000088  4608              MOV      r0,r1                 ;1443
00008a  f7fffffe          BL       SDIO_SendCommand
00008e  2006              MOVS     r0,#6                 ;1445
000090  f7fffffe          BL       CmdResp1Error
000094  4604              MOV      r4,r0                 ;1445
000096  4620              MOV      r0,r4                 ;1447
000098  e7c3              B        |L9.34|
                  |L9.154|
00009a  2025              MOVS     r0,#0x25              ;1448
00009c  e7c1              B        |L9.34|
;;;1450   //检查卡是否正在执行写操作
                          ENDP

00009e  0000              DCW      0x0000
                  |L9.160|
                          DCD      0x40012c14
                  |L9.164|
                          DCD      ||RCA||
                  |L9.168|
                          DCD      SDIO_CmdInitStructure

                          AREA ||i.SDIO_Clock_Set||, CODE, READONLY, ALIGN=2

                  SDIO_Clock_Set PROC
;;;133    //CK时钟=SDIOCLK/[clkdiv+2];(SDIOCLK时钟固定为48Mhz)
;;;134    void SDIO_Clock_Set(u8 clkdiv)
000000  4601              MOV      r1,r0
;;;135    {
;;;136    	u32 tmpreg=SDIO->CLKCR; 
000002  4a03              LDR      r2,|L10.16|
000004  6810              LDR      r0,[r2,#0]
;;;137      	tmpreg&=0XFFFFFF00; 
000006  f02000ff          BIC      r0,r0,#0xff
;;;138     	tmpreg|=clkdiv;   
00000a  4308              ORRS     r0,r0,r1
;;;139    	SDIO->CLKCR=tmpreg;
00000c  6010              STR      r0,[r2,#0]
;;;140    } 
00000e  4770              BX       lr
;;;141    
                          ENDP

                  |L10.16|
                          DCD      0x40012c04

                          AREA ||i.SDIO_IRQHandler||, CODE, READONLY, ALIGN=1

                  SDIO_IRQHandler PROC
;;;1197   //SDIO中断服务函数		  
;;;1198   void SDIO_IRQHandler(void) 
000000  b510              PUSH     {r4,lr}
;;;1199   {											
;;;1200    	SD_ProcessIRQSrc();//处理所有SDIO相关中断
000002  f7fffffe          BL       SD_ProcessIRQSrc
;;;1201   }	 																    
000006  bd10              POP      {r4,pc}
;;;1202   //SDIO中断处理函数
                          ENDP


                          AREA ||i.SDIO_Register_Deinit||, CODE, READONLY, ALIGN=2

                  SDIO_Register_Deinit PROC
;;;53      
;;;54     void SDIO_Register_Deinit()
000000  2000              MOVS     r0,#0
;;;55     {
;;;56     	SDIO->POWER=0x00000000;
000002  490b              LDR      r1,|L12.48|
000004  6008              STR      r0,[r1,#0]
;;;57     	SDIO->CLKCR=0x00000000;
000006  1d09              ADDS     r1,r1,#4
000008  6008              STR      r0,[r1,#0]
;;;58     	SDIO->ARG=0x00000000;
00000a  1d09              ADDS     r1,r1,#4
00000c  6008              STR      r0,[r1,#0]
;;;59     	SDIO->CMD=0x00000000;
00000e  1d09              ADDS     r1,r1,#4
000010  6008              STR      r0,[r1,#0]
;;;60     	SDIO->DTIMER=0x00000000;
000012  4907              LDR      r1,|L12.48|
000014  3124              ADDS     r1,r1,#0x24
000016  6008              STR      r0,[r1,#0]
;;;61     	SDIO->DLEN=0x00000000;
000018  1d09              ADDS     r1,r1,#4
00001a  6008              STR      r0,[r1,#0]
;;;62     	SDIO->DCTRL=0x00000000;
00001c  1d09              ADDS     r1,r1,#4
00001e  6008              STR      r0,[r1,#0]
;;;63     	SDIO->ICR=0x00C007FF;
000020  4804              LDR      r0,|L12.52|
000022  4903              LDR      r1,|L12.48|
000024  3138              ADDS     r1,r1,#0x38
000026  6008              STR      r0,[r1,#0]
;;;64     	SDIO->MASK=0x00000000;	 
000028  2000              MOVS     r0,#0
00002a  1d09              ADDS     r1,r1,#4
00002c  6008              STR      r0,[r1,#0]
;;;65     }
00002e  4770              BX       lr
;;;66     
                          ENDP

                  |L12.48|
                          DCD      0x40012c00
                  |L12.52|
                          DCD      0x00c007ff

                          AREA ||i.SD_DMA_Config||, CODE, READONLY, ALIGN=2

                  SD_DMA_Config PROC
;;;1612   //dir:方向;DMA_DIR_MemoryToPeripheral  存储器-->SDIO(写数据);DMA_DIR_PeripheralToMemory SDIO-->存储器(读数据);
;;;1613   void SD_DMA_Config(u32*mbuf,u32 bufsize,u32 dir)
000000  b570              PUSH     {r4-r6,lr}
;;;1614   {		 
000002  b090              SUB      sp,sp,#0x40
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;1615   
;;;1616     DMA_InitTypeDef  DMA_InitStructure;
;;;1617   	
;;;1618   	while (DMA_GetCmdStatus(DMA2_Stream3) != DISABLE){}//等待DMA可配置 
00000a  bf00              NOP      
                  |L13.12|
00000c  481a              LDR      r0,|L13.120|
00000e  f7fffffe          BL       DMA_GetCmdStatus
000012  2800              CMP      r0,#0
000014  d1fa              BNE      |L13.12|
;;;1619   		
;;;1620     DMA_DeInit(DMA2_Stream3);//清空之前该stream3上的所有中断标志
000016  4818              LDR      r0,|L13.120|
000018  f7fffffe          BL       DMA_DeInit
;;;1621   	
;;;1622    
;;;1623     DMA_InitStructure.DMA_Channel = DMA_Channel_4;  //通道选择
00001c  f04f6000          MOV      r0,#0x8000000
000020  9001              STR      r0,[sp,#4]
;;;1624     DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&SDIO->FIFO;//DMA外设地址
000022  4816              LDR      r0,|L13.124|
000024  9002              STR      r0,[sp,#8]
;;;1625     DMA_InitStructure.DMA_Memory0BaseAddr = (u32)mbuf;//DMA 存储器0地址
000026  9403              STR      r4,[sp,#0xc]
;;;1626     DMA_InitStructure.DMA_DIR = dir;//存储器到外设模式
000028  9504              STR      r5,[sp,#0x10]
;;;1627     DMA_InitStructure.DMA_BufferSize = 0;//数据传输量 
00002a  2000              MOVS     r0,#0
00002c  9005              STR      r0,[sp,#0x14]
;;;1628     DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;//外设非增量模式
00002e  9006              STR      r0,[sp,#0x18]
;;;1629     DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;//存储器增量模式
000030  f44f6080          MOV      r0,#0x400
000034  9007              STR      r0,[sp,#0x1c]
;;;1630     DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;//外设数据长度:32位
000036  0080              LSLS     r0,r0,#2
000038  9008              STR      r0,[sp,#0x20]
;;;1631     DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;//存储器数据长度:32位
00003a  0080              LSLS     r0,r0,#2
00003c  9009              STR      r0,[sp,#0x24]
;;;1632     DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;// 使用普通模式 
00003e  2000              MOVS     r0,#0
000040  900a              STR      r0,[sp,#0x28]
;;;1633     DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;//最高优先级
000042  f44f3040          MOV      r0,#0x30000
000046  900b              STR      r0,[sp,#0x2c]
;;;1634     DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;   //FIFO使能      
000048  2004              MOVS     r0,#4
00004a  900c              STR      r0,[sp,#0x30]
;;;1635     DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;//全FIFO
00004c  2003              MOVS     r0,#3
00004e  900d              STR      r0,[sp,#0x34]
;;;1636     DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;//外设突发4次传输
000050  f44f0000          MOV      r0,#0x800000
000054  900e              STR      r0,[sp,#0x38]
;;;1637     DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;//存储器突发4次传输
000056  1080              ASRS     r0,r0,#2
000058  900f              STR      r0,[sp,#0x3c]
;;;1638     DMA_Init(DMA2_Stream3, &DMA_InitStructure);//初始化DMA Stream
00005a  a901              ADD      r1,sp,#4
00005c  4806              LDR      r0,|L13.120|
00005e  f7fffffe          BL       DMA_Init
;;;1639   
;;;1640   	DMA_FlowControllerConfig(DMA2_Stream3,DMA_FlowCtrl_Peripheral);//外设流控制 
000062  2120              MOVS     r1,#0x20
000064  4804              LDR      r0,|L13.120|
000066  f7fffffe          BL       DMA_FlowControllerConfig
;;;1641   	 
;;;1642     DMA_Cmd(DMA2_Stream3 ,ENABLE);//开启DMA传输	 
00006a  2101              MOVS     r1,#1
00006c  4802              LDR      r0,|L13.120|
00006e  f7fffffe          BL       DMA_Cmd
;;;1643   
;;;1644   }   
000072  b010              ADD      sp,sp,#0x40
000074  bd70              POP      {r4-r6,pc}
;;;1645   
                          ENDP

000076  0000              DCW      0x0000
                  |L13.120|
                          DCD      0x40026458
                  |L13.124|
                          DCD      0x40012c80

                          AREA ||i.SD_EnableWideBusOperation||, CODE, READONLY, ALIGN=2

                  SD_EnableWideBusOperation PROC
;;;493    
;;;494    SD_Error SD_EnableWideBusOperation(u32 WideMode)
000000  b570              PUSH     {r4-r6,lr}
;;;495    {
000002  4604              MOV      r4,r0
;;;496      	SD_Error errorstatus=SD_OK;
000004  2500              MOVS     r5,#0
;;;497      if (SDIO_MULTIMEDIA_CARD == CardType)
000006  4816              LDR      r0,|L14.96|
000008  7800              LDRB     r0,[r0,#0]  ; CardType
00000a  2803              CMP      r0,#3
00000c  d102              BNE      |L14.20|
;;;498      {
;;;499        errorstatus = SD_UNSUPPORTED_FEATURE;
00000e  2527              MOVS     r5,#0x27
;;;500        return(errorstatus);
000010  4628              MOV      r0,r5
                  |L14.18|
;;;501      }
;;;502    	
;;;503     	else if((SDIO_STD_CAPACITY_SD_CARD_V1_1==CardType)||(SDIO_STD_CAPACITY_SD_CARD_V2_0==CardType)||(SDIO_HIGH_CAPACITY_SD_CARD==CardType))
;;;504    	{
;;;505    		 if (SDIO_BusWide_8b == WideMode)   //2.0 sd不支持8bits
;;;506        {
;;;507          errorstatus = SD_UNSUPPORTED_FEATURE;
;;;508          return(errorstatus);
;;;509        }
;;;510     		else   
;;;511    		{
;;;512    			errorstatus=SDEnWideBus(WideMode);
;;;513     			if(SD_OK==errorstatus)
;;;514    			{
;;;515    				SDIO->CLKCR&=~(3<<11);		//清除之前的位宽设置    
;;;516    				SDIO->CLKCR|=WideMode;//1位/4位总线宽度 
;;;517    				SDIO->CLKCR|=0<<14;			//不开启硬件流控制
;;;518    			}
;;;519    		}  
;;;520    	}
;;;521    	return errorstatus; 
;;;522    }
000012  bd70              POP      {r4-r6,pc}
                  |L14.20|
000014  4812              LDR      r0,|L14.96|
000016  7800              LDRB     r0,[r0,#0]            ;503  ; CardType
000018  b138              CBZ      r0,|L14.42|
00001a  4811              LDR      r0,|L14.96|
00001c  7800              LDRB     r0,[r0,#0]            ;503  ; CardType
00001e  2801              CMP      r0,#1                 ;503
000020  d003              BEQ      |L14.42|
000022  480f              LDR      r0,|L14.96|
000024  7800              LDRB     r0,[r0,#0]            ;503  ; CardType
000026  2802              CMP      r0,#2                 ;503
000028  d117              BNE      |L14.90|
                  |L14.42|
00002a  f5b45f80          CMP      r4,#0x1000            ;505
00002e  d102              BNE      |L14.54|
000030  2527              MOVS     r5,#0x27              ;507
000032  4628              MOV      r0,r5                 ;508
000034  e7ed              B        |L14.18|
                  |L14.54|
000036  b2e0              UXTB     r0,r4                 ;512
000038  f7fffffe          BL       SDEnWideBus
00003c  4605              MOV      r5,r0                 ;512
00003e  b965              CBNZ     r5,|L14.90|
000040  4808              LDR      r0,|L14.100|
000042  6800              LDR      r0,[r0,#0]            ;515
000044  f42050c0          BIC      r0,r0,#0x1800         ;515
000048  4906              LDR      r1,|L14.100|
00004a  6008              STR      r0,[r1,#0]            ;515
00004c  4608              MOV      r0,r1                 ;516
00004e  6800              LDR      r0,[r0,#0]            ;516
000050  4320              ORRS     r0,r0,r4              ;516
000052  6008              STR      r0,[r1,#0]            ;516
000054  4608              MOV      r0,r1                 ;517
000056  6800              LDR      r0,[r0,#0]            ;517
000058  6008              STR      r0,[r1,#0]            ;517
                  |L14.90|
00005a  4628              MOV      r0,r5                 ;521
00005c  e7d9              B        |L14.18|
;;;523    //设置SD卡工作模式
                          ENDP

00005e  0000              DCW      0x0000
                  |L14.96|
                          DCD      CardType
                  |L14.100|
                          DCD      0x40012c04

                          AREA ||i.SD_GetCardInfo||, CODE, READONLY, ALIGN=2

                  SD_GetCardInfo PROC
;;;363    //返回值:错误状态
;;;364    SD_Error SD_GetCardInfo(SD_CardInfo *cardinfo)
000000  b5f0              PUSH     {r4-r7,lr}
;;;365    {
000002  4601              MOV      r1,r0
;;;366     	SD_Error errorstatus=SD_OK;
000004  2000              MOVS     r0,#0
;;;367    	u8 tmp=0;	   
000006  2200              MOVS     r2,#0
;;;368    	cardinfo->CardType=(u8)CardType; 				//卡类型
000008  4bbe              LDR      r3,|L15.772|
00000a  781b              LDRB     r3,[r3,#0]  ; CardType
00000c  f8813056          STRB     r3,[r1,#0x56]
;;;369    	cardinfo->RCA=(u16)RCA;							//卡RCA值
000010  4bbd              LDR      r3,|L15.776|
000012  881b              LDRH     r3,[r3,#0]  ; RCA
000014  f8a13054          STRH     r3,[r1,#0x54]
;;;370    	tmp=(u8)((CSD_Tab[0]&0xFF000000)>>24);
000018  4bbc              LDR      r3,|L15.780|
00001a  681b              LDR      r3,[r3,#0]  ; CSD_Tab
00001c  0e1a              LSRS     r2,r3,#24
;;;371    	cardinfo->SD_csd.CSDStruct=(tmp&0xC0)>>6;		//CSD结构
00001e  0993              LSRS     r3,r2,#6
000020  700b              STRB     r3,[r1,#0]
;;;372    	cardinfo->SD_csd.SysSpecVersion=(tmp&0x3C)>>2;	//2.0协议还没定义这部分(为保留),应该是后续协议定义的
000022  f3c20383          UBFX     r3,r2,#2,#4
000026  704b              STRB     r3,[r1,#1]
;;;373    	cardinfo->SD_csd.Reserved1=tmp&0x03;			//2个保留位  
000028  f0020303          AND      r3,r2,#3
00002c  708b              STRB     r3,[r1,#2]
;;;374    	tmp=(u8)((CSD_Tab[0]&0x00FF0000)>>16);			//第1个字节
00002e  4bb7              LDR      r3,|L15.780|
000030  681b              LDR      r3,[r3,#0]  ; CSD_Tab
000032  f3c34207          UBFX     r2,r3,#16,#8
;;;375    	cardinfo->SD_csd.TAAC=tmp;				   		//数据读时间1
000036  70ca              STRB     r2,[r1,#3]
;;;376    	tmp=(u8)((CSD_Tab[0]&0x0000FF00)>>8);	  		//第2个字节
000038  4bb4              LDR      r3,|L15.780|
00003a  881b              LDRH     r3,[r3,#0]  ; CSD_Tab
00003c  f3c32207          UBFX     r2,r3,#8,#8
;;;377    	cardinfo->SD_csd.NSAC=tmp;		  				//数据读时间2
000040  710a              STRB     r2,[r1,#4]
;;;378    	tmp=(u8)(CSD_Tab[0]&0x000000FF);				//第3个字节
000042  4bb2              LDR      r3,|L15.780|
000044  781a              LDRB     r2,[r3,#0]  ; CSD_Tab
;;;379    	cardinfo->SD_csd.MaxBusClkFrec=tmp;		  		//传输速度	   
000046  714a              STRB     r2,[r1,#5]
;;;380    	tmp=(u8)((CSD_Tab[1]&0xFF000000)>>24);			//第4个字节
000048  685b              LDR      r3,[r3,#4]  ; CSD_Tab
00004a  0e1a              LSRS     r2,r3,#24
;;;381    	cardinfo->SD_csd.CardComdClasses=tmp<<4;    	//卡指令类高四位
00004c  0113              LSLS     r3,r2,#4
00004e  80cb              STRH     r3,[r1,#6]
;;;382    	tmp=(u8)((CSD_Tab[1]&0x00FF0000)>>16);	 		//第5个字节
000050  4bae              LDR      r3,|L15.780|
000052  685b              LDR      r3,[r3,#4]  ; CSD_Tab
000054  f3c34207          UBFX     r2,r3,#16,#8
;;;383    	cardinfo->SD_csd.CardComdClasses|=(tmp&0xF0)>>4;//卡指令类低四位
000058  88cb              LDRH     r3,[r1,#6]
00005a  ea431312          ORR      r3,r3,r2,LSR #4
00005e  80cb              STRH     r3,[r1,#6]
;;;384    	cardinfo->SD_csd.RdBlockLen=tmp&0x0F;	    	//最大读取数据长度
000060  f002030f          AND      r3,r2,#0xf
000064  720b              STRB     r3,[r1,#8]
;;;385    	tmp=(u8)((CSD_Tab[1]&0x0000FF00)>>8);			//第6个字节
000066  4ba9              LDR      r3,|L15.780|
000068  889b              LDRH     r3,[r3,#4]  ; CSD_Tab
00006a  f3c32207          UBFX     r2,r3,#8,#8
;;;386    	cardinfo->SD_csd.PartBlockRead=(tmp&0x80)>>7;	//允许分块读
00006e  09d3              LSRS     r3,r2,#7
000070  724b              STRB     r3,[r1,#9]
;;;387    	cardinfo->SD_csd.WrBlockMisalign=(tmp&0x40)>>6;	//写块错位
000072  f3c21380          UBFX     r3,r2,#6,#1
000076  728b              STRB     r3,[r1,#0xa]
;;;388    	cardinfo->SD_csd.RdBlockMisalign=(tmp&0x20)>>5;	//读块错位
000078  f3c21340          UBFX     r3,r2,#5,#1
00007c  72cb              STRB     r3,[r1,#0xb]
;;;389    	cardinfo->SD_csd.DSRImpl=(tmp&0x10)>>4;
00007e  f3c21300          UBFX     r3,r2,#4,#1
000082  730b              STRB     r3,[r1,#0xc]
;;;390    	cardinfo->SD_csd.Reserved2=0; 					//保留
000084  2300              MOVS     r3,#0
000086  734b              STRB     r3,[r1,#0xd]
;;;391     	if((CardType==SDIO_STD_CAPACITY_SD_CARD_V1_1)||(CardType==SDIO_STD_CAPACITY_SD_CARD_V2_0)||(SDIO_MULTIMEDIA_CARD==CardType))//标准1.1/2.0卡/MMC卡
000088  4b9e              LDR      r3,|L15.772|
00008a  781b              LDRB     r3,[r3,#0]  ; CardType
00008c  b13b              CBZ      r3,|L15.158|
00008e  4b9d              LDR      r3,|L15.772|
000090  781b              LDRB     r3,[r3,#0]  ; CardType
000092  2b01              CMP      r3,#1
000094  d003              BEQ      |L15.158|
000096  4b9b              LDR      r3,|L15.772|
000098  781b              LDRB     r3,[r3,#0]  ; CardType
00009a  2b03              CMP      r3,#3
00009c  d14f              BNE      |L15.318|
                  |L15.158|
;;;392    	{
;;;393    		cardinfo->SD_csd.DeviceSize=(tmp&0x03)<<10;	//C_SIZE(12位)
00009e  0793              LSLS     r3,r2,#30
0000a0  0d1b              LSRS     r3,r3,#20
0000a2  610b              STR      r3,[r1,#0x10]
;;;394    	 	tmp=(u8)(CSD_Tab[1]&0x000000FF); 			//第7个字节	
0000a4  4b99              LDR      r3,|L15.780|
0000a6  791a              LDRB     r2,[r3,#4]  ; CSD_Tab
;;;395    		cardinfo->SD_csd.DeviceSize|=(tmp)<<2;
0000a8  690b              LDR      r3,[r1,#0x10]
0000aa  ea430382          ORR      r3,r3,r2,LSL #2
0000ae  610b              STR      r3,[r1,#0x10]
;;;396     		tmp=(u8)((CSD_Tab[2]&0xFF000000)>>24);		//第8个字节	
0000b0  4b96              LDR      r3,|L15.780|
0000b2  689b              LDR      r3,[r3,#8]  ; CSD_Tab
0000b4  0e1a              LSRS     r2,r3,#24
;;;397    		cardinfo->SD_csd.DeviceSize|=(tmp&0xC0)>>6;
0000b6  690b              LDR      r3,[r1,#0x10]
0000b8  ea431392          ORR      r3,r3,r2,LSR #6
0000bc  610b              STR      r3,[r1,#0x10]
;;;398     		cardinfo->SD_csd.MaxRdCurrentVDDMin=(tmp&0x38)>>3;
0000be  f3c203c2          UBFX     r3,r2,#3,#3
0000c2  750b              STRB     r3,[r1,#0x14]
;;;399    		cardinfo->SD_csd.MaxRdCurrentVDDMax=(tmp&0x07);
0000c4  f0020307          AND      r3,r2,#7
0000c8  754b              STRB     r3,[r1,#0x15]
;;;400     		tmp=(u8)((CSD_Tab[2]&0x00FF0000)>>16);		//第9个字节	
0000ca  4b90              LDR      r3,|L15.780|
0000cc  689b              LDR      r3,[r3,#8]  ; CSD_Tab
0000ce  f3c34207          UBFX     r2,r3,#16,#8
;;;401    		cardinfo->SD_csd.MaxWrCurrentVDDMin=(tmp&0xE0)>>5;
0000d2  0953              LSRS     r3,r2,#5
0000d4  758b              STRB     r3,[r1,#0x16]
;;;402    		cardinfo->SD_csd.MaxWrCurrentVDDMax=(tmp&0x1C)>>2;
0000d6  f3c20382          UBFX     r3,r2,#2,#3
0000da  75cb              STRB     r3,[r1,#0x17]
;;;403    		cardinfo->SD_csd.DeviceSizeMul=(tmp&0x03)<<1;//C_SIZE_MULT
0000dc  0793              LSLS     r3,r2,#30
0000de  0f5b              LSRS     r3,r3,#29
0000e0  760b              STRB     r3,[r1,#0x18]
;;;404     		tmp=(u8)((CSD_Tab[2]&0x0000FF00)>>8);	  	//第10个字节	
0000e2  4b8a              LDR      r3,|L15.780|
0000e4  891b              LDRH     r3,[r3,#8]  ; CSD_Tab
0000e6  f3c32207          UBFX     r2,r3,#8,#8
;;;405    		cardinfo->SD_csd.DeviceSizeMul|=(tmp&0x80)>>7;
0000ea  7e0b              LDRB     r3,[r1,#0x18]
0000ec  ea4313d2          ORR      r3,r3,r2,LSR #7
0000f0  760b              STRB     r3,[r1,#0x18]
;;;406     		cardinfo->CardCapacity=(cardinfo->SD_csd.DeviceSize+1);//计算卡容量
0000f2  690b              LDR      r3,[r1,#0x10]
0000f4  1c5b              ADDS     r3,r3,#1
0000f6  2400              MOVS     r4,#0
0000f8  e9c13412          STRD     r3,r4,[r1,#0x48]
;;;407    		cardinfo->CardCapacity*=(1<<(cardinfo->SD_csd.DeviceSizeMul+2));
0000fc  7e0b              LDRB     r3,[r1,#0x18]
0000fe  1c9b              ADDS     r3,r3,#2
000100  2401              MOVS     r4,#1
000102  fa04f303          LSL      r3,r4,r3
000106  17dc              ASRS     r4,r3,#31
000108  e9d15612          LDRD     r5,r6,[r1,#0x48]
00010c  fba57c03          UMULL    r7,r12,r5,r3
000110  fb06c303          MLA      r3,r6,r3,r12
000114  fb053304          MLA      r3,r5,r4,r3
000118  e9c17312          STRD     r7,r3,[r1,#0x48]
;;;408    		cardinfo->CardBlockSize=1<<(cardinfo->SD_csd.RdBlockLen);//块大小
00011c  7a0c              LDRB     r4,[r1,#8]
00011e  2301              MOVS     r3,#1
000120  40a3              LSLS     r3,r3,r4
000122  650b              STR      r3,[r1,#0x50]
;;;409    		cardinfo->CardCapacity*=cardinfo->CardBlockSize;
000124  2400              MOVS     r4,#0
000126  e9d16512          LDRD     r6,r5,[r1,#0x48]
00012a  6d0b              LDR      r3,[r1,#0x50]
00012c  fba67c03          UMULL    r7,r12,r6,r3
000130  fb05c303          MLA      r3,r5,r3,r12
000134  fb063304          MLA      r3,r6,r4,r3
000138  e9c17312          STRD     r7,r3,[r1,#0x48]
00013c  e02e              B        |L15.412|
                  |L15.318|
;;;410    	}else if(CardType==SDIO_HIGH_CAPACITY_SD_CARD)	//高容量卡
00013e  4b71              LDR      r3,|L15.772|
000140  781b              LDRB     r3,[r3,#0]  ; CardType
000142  2b02              CMP      r3,#2
000144  d12a              BNE      |L15.412|
;;;411    	{
;;;412     		tmp=(u8)(CSD_Tab[1]&0x000000FF); 		//第7个字节	
000146  4b71              LDR      r3,|L15.780|
000148  791a              LDRB     r2,[r3,#4]  ; CSD_Tab
;;;413    		cardinfo->SD_csd.DeviceSize=(tmp&0x3F)<<16;//C_SIZE
00014a  0693              LSLS     r3,r2,#26
00014c  0a9b              LSRS     r3,r3,#10
00014e  610b              STR      r3,[r1,#0x10]
;;;414     		tmp=(u8)((CSD_Tab[2]&0xFF000000)>>24); 	//第8个字节	
000150  4b6e              LDR      r3,|L15.780|
000152  689b              LDR      r3,[r3,#8]  ; CSD_Tab
000154  0e1a              LSRS     r2,r3,#24
;;;415     		cardinfo->SD_csd.DeviceSize|=(tmp<<8);
000156  690b              LDR      r3,[r1,#0x10]
000158  ea432302          ORR      r3,r3,r2,LSL #8
00015c  610b              STR      r3,[r1,#0x10]
;;;416     		tmp=(u8)((CSD_Tab[2]&0x00FF0000)>>16);	//第9个字节	
00015e  4b6b              LDR      r3,|L15.780|
000160  689b              LDR      r3,[r3,#8]  ; CSD_Tab
000162  f3c34207          UBFX     r2,r3,#16,#8
;;;417     		cardinfo->SD_csd.DeviceSize|=(tmp);
000166  690b              LDR      r3,[r1,#0x10]
000168  4313              ORRS     r3,r3,r2
00016a  610b              STR      r3,[r1,#0x10]
;;;418     		tmp=(u8)((CSD_Tab[2]&0x0000FF00)>>8); 	//第10个字节	
00016c  4b67              LDR      r3,|L15.780|
00016e  891b              LDRH     r3,[r3,#8]  ; CSD_Tab
000170  f3c32207          UBFX     r2,r3,#8,#8
;;;419     		cardinfo->CardCapacity=(long long)(cardinfo->SD_csd.DeviceSize+1)*512*1024;//计算卡容量
000174  690b              LDR      r3,[r1,#0x10]
000176  1c5b              ADDS     r3,r3,#1
000178  f44f7400          MOV      r4,#0x200
00017c  fba34604          UMULL    r4,r6,r3,r4
000180  f44f6380          MOV      r3,#0x400
000184  2500              MOVS     r5,#0
000186  fba47c03          UMULL    r7,r12,r4,r3
00018a  fb06c303          MLA      r3,r6,r3,r12
00018e  fb043305          MLA      r3,r4,r5,r3
000192  e9c17312          STRD     r7,r3,[r1,#0x48]
;;;420    		cardinfo->CardBlockSize=512; 			//块大小固定为512字节
000196  f44f7300          MOV      r3,#0x200
00019a  650b              STR      r3,[r1,#0x50]
                  |L15.412|
;;;421    	}	  
;;;422    	cardinfo->SD_csd.EraseGrSize=(tmp&0x40)>>6;
00019c  f3c21380          UBFX     r3,r2,#6,#1
0001a0  f8013f19          STRB     r3,[r1,#0x19]!
;;;423    	cardinfo->SD_csd.EraseGrMul=(tmp&0x3F)<<1;	   
0001a4  0693              LSLS     r3,r2,#26
0001a6  0e5b              LSRS     r3,r3,#25
0001a8  704b              STRB     r3,[r1,#1]
;;;424    	tmp=(u8)(CSD_Tab[2]&0x000000FF);			//第11个字节	
0001aa  4b58              LDR      r3,|L15.780|
0001ac  7a1a              LDRB     r2,[r3,#8]  ; CSD_Tab
;;;425    	cardinfo->SD_csd.EraseGrMul|=(tmp&0x80)>>7;
0001ae  784b              LDRB     r3,[r1,#1]
0001b0  ea4313d2          ORR      r3,r3,r2,LSR #7
0001b4  704b              STRB     r3,[r1,#1]
;;;426    	cardinfo->SD_csd.WrProtectGrSize=(tmp&0x7F);
0001b6  f002037f          AND      r3,r2,#0x7f
0001ba  708b              STRB     r3,[r1,#2]
;;;427     	tmp=(u8)((CSD_Tab[3]&0xFF000000)>>24);		//第12个字节	
0001bc  4b53              LDR      r3,|L15.780|
0001be  68db              LDR      r3,[r3,#0xc]  ; CSD_Tab
0001c0  0e1a              LSRS     r2,r3,#24
;;;428    	cardinfo->SD_csd.WrProtectGrEnable=(tmp&0x80)>>7;
0001c2  09d3              LSRS     r3,r2,#7
0001c4  70cb              STRB     r3,[r1,#3]
;;;429    	cardinfo->SD_csd.ManDeflECC=(tmp&0x60)>>5;
0001c6  f3c21341          UBFX     r3,r2,#5,#2
0001ca  710b              STRB     r3,[r1,#4]
;;;430    	cardinfo->SD_csd.WrSpeedFact=(tmp&0x1C)>>2;
0001cc  f3c20382          UBFX     r3,r2,#2,#3
0001d0  714b              STRB     r3,[r1,#5]
;;;431    	cardinfo->SD_csd.MaxWrBlockLen=(tmp&0x03)<<2;	 
0001d2  0793              LSLS     r3,r2,#30
0001d4  0f1b              LSRS     r3,r3,#28
0001d6  718b              STRB     r3,[r1,#6]
;;;432    	tmp=(u8)((CSD_Tab[3]&0x00FF0000)>>16);		//第13个字节
0001d8  4b4c              LDR      r3,|L15.780|
0001da  68db              LDR      r3,[r3,#0xc]  ; CSD_Tab
0001dc  f3c34207          UBFX     r2,r3,#16,#8
;;;433    	cardinfo->SD_csd.MaxWrBlockLen|=(tmp&0xC0)>>6;
0001e0  798b              LDRB     r3,[r1,#6]
0001e2  ea431392          ORR      r3,r3,r2,LSR #6
0001e6  718b              STRB     r3,[r1,#6]
;;;434    	cardinfo->SD_csd.WriteBlockPaPartial=(tmp&0x20)>>5;
0001e8  f3c21340          UBFX     r3,r2,#5,#1
0001ec  71cb              STRB     r3,[r1,#7]
;;;435    	cardinfo->SD_csd.Reserved3=0;
0001ee  2300              MOVS     r3,#0
0001f0  720b              STRB     r3,[r1,#8]
;;;436    	cardinfo->SD_csd.ContentProtectAppli=(tmp&0x01);  
0001f2  f0020301          AND      r3,r2,#1
0001f6  724b              STRB     r3,[r1,#9]
;;;437    	tmp=(u8)((CSD_Tab[3]&0x0000FF00)>>8);		//第14个字节
0001f8  4b44              LDR      r3,|L15.780|
0001fa  899b              LDRH     r3,[r3,#0xc]  ; CSD_Tab
0001fc  f3c32207          UBFX     r2,r3,#8,#8
;;;438    	cardinfo->SD_csd.FileFormatGrouop=(tmp&0x80)>>7;
000200  09d3              LSRS     r3,r2,#7
000202  728b              STRB     r3,[r1,#0xa]
;;;439    	cardinfo->SD_csd.CopyFlag=(tmp&0x40)>>6;
000204  f3c21380          UBFX     r3,r2,#6,#1
000208  72cb              STRB     r3,[r1,#0xb]
;;;440    	cardinfo->SD_csd.PermWrProtect=(tmp&0x20)>>5;
00020a  f3c21340          UBFX     r3,r2,#5,#1
00020e  730b              STRB     r3,[r1,#0xc]
;;;441    	cardinfo->SD_csd.TempWrProtect=(tmp&0x10)>>4;
000210  f3c21300          UBFX     r3,r2,#4,#1
000214  734b              STRB     r3,[r1,#0xd]
;;;442    	cardinfo->SD_csd.FileFormat=(tmp&0x0C)>>2;
000216  f3c20381          UBFX     r3,r2,#2,#2
00021a  738b              STRB     r3,[r1,#0xe]
;;;443    	cardinfo->SD_csd.ECC=(tmp&0x03);  
00021c  f0020303          AND      r3,r2,#3
000220  73cb              STRB     r3,[r1,#0xf]
;;;444    	tmp=(u8)(CSD_Tab[3]&0x000000FF);			//第15个字节
000222  4b3a              LDR      r3,|L15.780|
000224  7b1a              LDRB     r2,[r3,#0xc]  ; CSD_Tab
;;;445    	cardinfo->SD_csd.CSD_CRC=(tmp&0xFE)>>1;
000226  0853              LSRS     r3,r2,#1
000228  740b              STRB     r3,[r1,#0x10]
;;;446    	cardinfo->SD_csd.Reserved4=1;		 
00022a  2301              MOVS     r3,#1
00022c  744b              STRB     r3,[r1,#0x11]
;;;447    	tmp=(u8)((CID_Tab[0]&0xFF000000)>>24);		//第0个字节
00022e  4b38              LDR      r3,|L15.784|
000230  681b              LDR      r3,[r3,#0]  ; CID_Tab
000232  0e1a              LSRS     r2,r3,#24
;;;448    	cardinfo->SD_cid.ManufacturerID=tmp;		    
000234  74ca              STRB     r2,[r1,#0x13]
000236  3919              SUBS     r1,r1,#0x19
;;;449    	tmp=(u8)((CID_Tab[0]&0x00FF0000)>>16);		//第1个字节
000238  4b35              LDR      r3,|L15.784|
00023a  681b              LDR      r3,[r3,#0]  ; CID_Tab
00023c  f3c34207          UBFX     r2,r3,#16,#8
;;;450    	cardinfo->SD_cid.OEM_AppliID=tmp<<8;	  
000240  0214              LSLS     r4,r2,#8
000242  85cc              STRH     r4,[r1,#0x2e]
;;;451    	tmp=(u8)((CID_Tab[0]&0x000000FF00)>>8);		//第2个字节
000244  4b32              LDR      r3,|L15.784|
000246  881b              LDRH     r3,[r3,#0]  ; CID_Tab
000248  f3c32207          UBFX     r2,r3,#8,#8
;;;452    	cardinfo->SD_cid.OEM_AppliID|=tmp;	    
00024c  8dcb              LDRH     r3,[r1,#0x2e]
00024e  4313              ORRS     r3,r3,r2
000250  85cb              STRH     r3,[r1,#0x2e]
;;;453    	tmp=(u8)(CID_Tab[0]&0x000000FF);			//第3个字节	
000252  4b2f              LDR      r3,|L15.784|
000254  781a              LDRB     r2,[r3,#0]  ; CID_Tab
;;;454    	cardinfo->SD_cid.ProdName1=tmp<<24;				  
000256  0614              LSLS     r4,r2,#24
000258  630c              STR      r4,[r1,#0x30]
;;;455    	tmp=(u8)((CID_Tab[1]&0xFF000000)>>24); 		//第4个字节
00025a  685b              LDR      r3,[r3,#4]  ; CID_Tab
00025c  0e1a              LSRS     r2,r3,#24
;;;456    	cardinfo->SD_cid.ProdName1|=tmp<<16;	  
00025e  6b0b              LDR      r3,[r1,#0x30]
000260  ea434402          ORR      r4,r3,r2,LSL #16
000264  630c              STR      r4,[r1,#0x30]
;;;457    	tmp=(u8)((CID_Tab[1]&0x00FF0000)>>16);	   	//第5个字节
000266  4b2a              LDR      r3,|L15.784|
000268  685b              LDR      r3,[r3,#4]  ; CID_Tab
00026a  f3c34207          UBFX     r2,r3,#16,#8
;;;458    	cardinfo->SD_cid.ProdName1|=tmp<<8;		 
00026e  6b0b              LDR      r3,[r1,#0x30]
000270  ea432402          ORR      r4,r3,r2,LSL #8
000274  630c              STR      r4,[r1,#0x30]
;;;459    	tmp=(u8)((CID_Tab[1]&0x0000FF00)>>8);		//第6个字节
000276  4b26              LDR      r3,|L15.784|
000278  889b              LDRH     r3,[r3,#4]  ; CID_Tab
00027a  f3c32207          UBFX     r2,r3,#8,#8
;;;460    	cardinfo->SD_cid.ProdName1|=tmp;		   
00027e  6b0b              LDR      r3,[r1,#0x30]
000280  4313              ORRS     r3,r3,r2
000282  630b              STR      r3,[r1,#0x30]
;;;461    	tmp=(u8)(CID_Tab[1]&0x000000FF);	  		//第7个字节
000284  4b22              LDR      r3,|L15.784|
000286  791a              LDRB     r2,[r3,#4]  ; CID_Tab
;;;462    	cardinfo->SD_cid.ProdName2=tmp;			  
000288  2334              MOVS     r3,#0x34
00028a  545a              STRB     r2,[r3,r1]
;;;463    	tmp=(u8)((CID_Tab[2]&0xFF000000)>>24); 		//第8个字节
00028c  4b20              LDR      r3,|L15.784|
00028e  689b              LDR      r3,[r3,#8]  ; CID_Tab
000290  0e1a              LSRS     r2,r3,#24
;;;464    	cardinfo->SD_cid.ProdRev=tmp;		 
000292  2335              MOVS     r3,#0x35
000294  545a              STRB     r2,[r3,r1]
;;;465    	tmp=(u8)((CID_Tab[2]&0x00FF0000)>>16);		//第9个字节
000296  4b1e              LDR      r3,|L15.784|
000298  689b              LDR      r3,[r3,#8]  ; CID_Tab
00029a  f3c34207          UBFX     r2,r3,#16,#8
;;;466    	cardinfo->SD_cid.ProdSN=tmp<<24;	   
00029e  0614              LSLS     r4,r2,#24
0002a0  638c              STR      r4,[r1,#0x38]
;;;467    	tmp=(u8)((CID_Tab[2]&0x0000FF00)>>8); 		//第10个字节
0002a2  4b1b              LDR      r3,|L15.784|
0002a4  891b              LDRH     r3,[r3,#8]  ; CID_Tab
0002a6  f3c32207          UBFX     r2,r3,#8,#8
;;;468    	cardinfo->SD_cid.ProdSN|=tmp<<16;	   
0002aa  6b8b              LDR      r3,[r1,#0x38]
0002ac  ea434402          ORR      r4,r3,r2,LSL #16
0002b0  638c              STR      r4,[r1,#0x38]
;;;469    	tmp=(u8)(CID_Tab[2]&0x000000FF);   			//第11个字节
0002b2  4b17              LDR      r3,|L15.784|
0002b4  7a1a              LDRB     r2,[r3,#8]  ; CID_Tab
;;;470    	cardinfo->SD_cid.ProdSN|=tmp<<8;		   
0002b6  6b8b              LDR      r3,[r1,#0x38]
0002b8  ea432402          ORR      r4,r3,r2,LSL #8
0002bc  638c              STR      r4,[r1,#0x38]
;;;471    	tmp=(u8)((CID_Tab[3]&0xFF000000)>>24); 		//第12个字节
0002be  4b14              LDR      r3,|L15.784|
0002c0  68db              LDR      r3,[r3,#0xc]  ; CID_Tab
0002c2  0e1a              LSRS     r2,r3,#24
;;;472    	cardinfo->SD_cid.ProdSN|=tmp;			     
0002c4  6b8b              LDR      r3,[r1,#0x38]
0002c6  4313              ORRS     r3,r3,r2
0002c8  638b              STR      r3,[r1,#0x38]
;;;473    	tmp=(u8)((CID_Tab[3]&0x00FF0000)>>16);	 	//第13个字节
0002ca  4b11              LDR      r3,|L15.784|
0002cc  68db              LDR      r3,[r3,#0xc]  ; CID_Tab
0002ce  f3c34207          UBFX     r2,r3,#16,#8
;;;474    	cardinfo->SD_cid.Reserved1|=(tmp&0xF0)>>4;
0002d2  233c              MOVS     r3,#0x3c
0002d4  5c5b              LDRB     r3,[r3,r1]
0002d6  ea431412          ORR      r4,r3,r2,LSR #4
0002da  233c              MOVS     r3,#0x3c
0002dc  545c              STRB     r4,[r3,r1]
;;;475    	cardinfo->SD_cid.ManufactDate=(tmp&0x0F)<<8;    
0002de  0713              LSLS     r3,r2,#28
0002e0  0d1c              LSRS     r4,r3,#20
0002e2  87cc              STRH     r4,[r1,#0x3e]
;;;476    	tmp=(u8)((CID_Tab[3]&0x0000FF00)>>8);		//第14个字节
0002e4  4b0a              LDR      r3,|L15.784|
0002e6  899b              LDRH     r3,[r3,#0xc]  ; CID_Tab
0002e8  f3c32207          UBFX     r2,r3,#8,#8
;;;477    	cardinfo->SD_cid.ManufactDate|=tmp;		 	  
0002ec  8fcb              LDRH     r3,[r1,#0x3e]
0002ee  4313              ORRS     r3,r3,r2
0002f0  87cb              STRH     r3,[r1,#0x3e]
;;;478    	tmp=(u8)(CID_Tab[3]&0x000000FF);			//第15个字节
0002f2  4b07              LDR      r3,|L15.784|
0002f4  7b1a              LDRB     r2,[r3,#0xc]  ; CID_Tab
;;;479    	cardinfo->SD_cid.CID_CRC=(tmp&0xFE)>>1;
0002f6  0854              LSRS     r4,r2,#1
0002f8  2340              MOVS     r3,#0x40
0002fa  545c              STRB     r4,[r3,r1]
;;;480    	cardinfo->SD_cid.Reserved2=1;	 
0002fc  2401              MOVS     r4,#1
0002fe  2341              MOVS     r3,#0x41
000300  545c              STRB     r4,[r3,r1]
;;;481    	return errorstatus;
;;;482    }
000302  bdf0              POP      {r4-r7,pc}
;;;483    //设置SDIO总线宽度(MMC卡不支持4bit模式)
                          ENDP

                  |L15.772|
                          DCD      CardType
                  |L15.776|
                          DCD      ||RCA||
                  |L15.780|
                          DCD      CSD_Tab
                  |L15.784|
                          DCD      CID_Tab

                          AREA ||i.SD_GetState||, CODE, READONLY, ALIGN=1

                  SD_GetState PROC
;;;1508   //返回值:SD卡状态
;;;1509   SDCardState SD_GetState(void)
000000  b508              PUSH     {r3,lr}
;;;1510   {
;;;1511   	u32 resp1=0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;1512   	if(SD_SendStatus(&resp1)!=SD_OK)return SD_CARD_ERROR;
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       SD_SendStatus
00000c  b108              CBZ      r0,|L16.18|
00000e  20ff              MOVS     r0,#0xff
                  |L16.16|
;;;1513   	else return (SDCardState)((resp1>>9) & 0x0F);
;;;1514   }
000010  bd08              POP      {r3,pc}
                  |L16.18|
000012  9800              LDR      r0,[sp,#0]            ;1513
000014  f3c02043          UBFX     r0,r0,#9,#4           ;1513
000018  e7fa              B        |L16.16|
;;;1515   //查找SD卡的SCR寄存器值
                          ENDP


                          AREA ||i.SD_Init||, CODE, READONLY, ALIGN=2

                  SD_Init PROC
;;;68     //返回值:错误代码;(0,无错误)
;;;69     SD_Error SD_Init(void)
000000  b53e              PUSH     {r1-r5,lr}
;;;70     {
;;;71      	GPIO_InitTypeDef  GPIO_InitStructure;
;;;72     	NVIC_InitTypeDef NVIC_InitStructure;
;;;73     	
;;;74     	SD_Error errorstatus=SD_OK;	 
000002  2400              MOVS     r4,#0
;;;75       u8 clkdiv=0;
000004  2500              MOVS     r5,#0
;;;76     	
;;;77       RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC|RCC_AHB1Periph_GPIOD|RCC_AHB1Periph_DMA2, ENABLE);//使能GPIOC,GPIOD DMA2时钟
000006  2101              MOVS     r1,#1
000008  4844              LDR      r0,|L17.284|
00000a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;78     	
;;;79       RCC_APB2PeriphClockCmd(RCC_APB2Periph_SDIO, ENABLE);//SDIO时钟使能
00000e  2101              MOVS     r1,#1
000010  02c8              LSLS     r0,r1,#11
000012  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;80     	
;;;81     	RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);//SDIO复位
000016  2101              MOVS     r1,#1
000018  02c8              LSLS     r0,r1,#11
00001a  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;82     	
;;;83     	
;;;84       GPIO_InitStructure.GPIO_Pin =GPIO_Pin_8|GPIO_Pin_9|GPIO_Pin_10|GPIO_Pin_11|GPIO_Pin_12; 	//PC8,9,10,11,12复用功能输出	
00001e  f44f50f8          MOV      r0,#0x1f00
000022  9001              STR      r0,[sp,#4]
;;;85       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能
000024  2002              MOVS     r0,#2
000026  f88d0008          STRB     r0,[sp,#8]
;;;86       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;//100M
00002a  f88d0009          STRB     r0,[sp,#9]
;;;87       GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002e  2000              MOVS     r0,#0
000030  f88d000a          STRB     r0,[sp,#0xa]
;;;88       GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//上拉
000034  2001              MOVS     r0,#1
000036  f88d000b          STRB     r0,[sp,#0xb]
;;;89       GPIO_Init(GPIOC, &GPIO_InitStructure);// PC8,9,10,11,12复用功能输出
00003a  a901              ADD      r1,sp,#4
00003c  4838              LDR      r0,|L17.288|
00003e  f7fffffe          BL       GPIO_Init
;;;90     
;;;91     	
;;;92     	GPIO_InitStructure.GPIO_Pin =GPIO_Pin_2;
000042  2004              MOVS     r0,#4
000044  9001              STR      r0,[sp,#4]
;;;93       GPIO_Init(GPIOD, &GPIO_InitStructure);//PD2复用功能输出
000046  a901              ADD      r1,sp,#4
000048  4836              LDR      r0,|L17.292|
00004a  f7fffffe          BL       GPIO_Init
;;;94     	
;;;95     	 //引脚复用映射设置
;;;96     	GPIO_PinAFConfig(GPIOC,GPIO_PinSource8,GPIO_AF_SDIO); //PC8,AF12
00004e  220c              MOVS     r2,#0xc
000050  2108              MOVS     r1,#8
000052  4833              LDR      r0,|L17.288|
000054  f7fffffe          BL       GPIO_PinAFConfig
;;;97       GPIO_PinAFConfig(GPIOC,GPIO_PinSource9,GPIO_AF_SDIO);
000058  220c              MOVS     r2,#0xc
00005a  2109              MOVS     r1,#9
00005c  4830              LDR      r0,|L17.288|
00005e  f7fffffe          BL       GPIO_PinAFConfig
;;;98       GPIO_PinAFConfig(GPIOC,GPIO_PinSource10,GPIO_AF_SDIO);
000062  220c              MOVS     r2,#0xc
000064  210a              MOVS     r1,#0xa
000066  482e              LDR      r0,|L17.288|
000068  f7fffffe          BL       GPIO_PinAFConfig
;;;99       GPIO_PinAFConfig(GPIOC,GPIO_PinSource11,GPIO_AF_SDIO);
00006c  220c              MOVS     r2,#0xc
00006e  210b              MOVS     r1,#0xb
000070  482b              LDR      r0,|L17.288|
000072  f7fffffe          BL       GPIO_PinAFConfig
;;;100      GPIO_PinAFConfig(GPIOC,GPIO_PinSource12,GPIO_AF_SDIO);	
000076  220c              MOVS     r2,#0xc
000078  4611              MOV      r1,r2
00007a  4829              LDR      r0,|L17.288|
00007c  f7fffffe          BL       GPIO_PinAFConfig
;;;101      GPIO_PinAFConfig(GPIOD,GPIO_PinSource2,GPIO_AF_SDIO);	
000080  220c              MOVS     r2,#0xc
000082  2102              MOVS     r1,#2
000084  4827              LDR      r0,|L17.292|
000086  f7fffffe          BL       GPIO_PinAFConfig
;;;102    	
;;;103    	RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);//SDIO结束复位
00008a  2100              MOVS     r1,#0
00008c  f44f6000          MOV      r0,#0x800
000090  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;104    		
;;;105     	//SDIO外设寄存器设置为默认值 			   
;;;106    	SDIO_Register_Deinit();
000094  f7fffffe          BL       SDIO_Register_Deinit
;;;107    	
;;;108      NVIC_InitStructure.NVIC_IRQChannel = SDIO_IRQn;
000098  2031              MOVS     r0,#0x31
00009a  f88d0000          STRB     r0,[sp,#0]
;;;109    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=0;//抢占优先级3
00009e  2000              MOVS     r0,#0
0000a0  f88d0001          STRB     r0,[sp,#1]
;;;110    	NVIC_InitStructure.NVIC_IRQChannelSubPriority =0;		//子优先级3
0000a4  f88d0002          STRB     r0,[sp,#2]
;;;111    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			//IRQ通道使能
0000a8  2001              MOVS     r0,#1
0000aa  f88d0003          STRB     r0,[sp,#3]
;;;112    	NVIC_Init(&NVIC_InitStructure);	//根据指定的参数初始化VIC寄存器、
0000ae  4668              MOV      r0,sp
0000b0  f7fffffe          BL       NVIC_Init
;;;113    	
;;;114       	errorstatus=SD_PowerON();			//SD卡上电
0000b4  f7fffffe          BL       SD_PowerON
0000b8  4604              MOV      r4,r0
;;;115     	if(errorstatus==SD_OK)errorstatus=SD_InitializeCards();			//初始化SD卡														  
0000ba  b914              CBNZ     r4,|L17.194|
0000bc  f7fffffe          BL       SD_InitializeCards
0000c0  4604              MOV      r4,r0
                  |L17.194|
;;;116      	if(errorstatus==SD_OK)errorstatus=SD_GetCardInfo(&SDCardInfo);	//获取卡信息
0000c2  b91c              CBNZ     r4,|L17.204|
0000c4  4818              LDR      r0,|L17.296|
0000c6  f7fffffe          BL       SD_GetCardInfo
0000ca  4604              MOV      r4,r0
                  |L17.204|
;;;117     	if(errorstatus==SD_OK)errorstatus=SD_SelectDeselect((u32)(SDCardInfo.RCA<<16));//选中SD卡   
0000cc  b934              CBNZ     r4,|L17.220|
0000ce  4916              LDR      r1,|L17.296|
0000d0  f8b11054          LDRH     r1,[r1,#0x54]  ; SDCardInfo
0000d4  0408              LSLS     r0,r1,#16
0000d6  f7fffffe          BL       SD_SelectDeselect
0000da  4604              MOV      r4,r0
                  |L17.220|
;;;118       	if(errorstatus==SD_OK)errorstatus=SD_EnableWideBusOperation(SDIO_BusWide_4b);	//4位宽度,如果是MMC卡,则不能用4位模式 
0000dc  b924              CBNZ     r4,|L17.232|
0000de  f44f6000          MOV      r0,#0x800
0000e2  f7fffffe          BL       SD_EnableWideBusOperation
0000e6  4604              MOV      r4,r0
                  |L17.232|
;;;119      	if((errorstatus==SD_OK)||(SDIO_MULTIMEDIA_CARD==CardType))
0000e8  b11c              CBZ      r4,|L17.242|
0000ea  4810              LDR      r0,|L17.300|
0000ec  7800              LDRB     r0,[r0,#0]  ; CardType
0000ee  2803              CMP      r0,#3
0000f0  d112              BNE      |L17.280|
                  |L17.242|
;;;120    	{  		    
;;;121    		if(SDCardInfo.CardType==SDIO_STD_CAPACITY_SD_CARD_V1_1||SDCardInfo.CardType==SDIO_STD_CAPACITY_SD_CARD_V2_0)
0000f2  480d              LDR      r0,|L17.296|
0000f4  f8900056          LDRB     r0,[r0,#0x56]  ; SDCardInfo
0000f8  b120              CBZ      r0,|L17.260|
0000fa  480b              LDR      r0,|L17.296|
0000fc  f8900056          LDRB     r0,[r0,#0x56]  ; SDCardInfo
000100  2801              CMP      r0,#1
000102  d101              BNE      |L17.264|
                  |L17.260|
;;;122    		{
;;;123    			clkdiv=SDIO_TRANSFER_CLK_DIV+2;	//V1.1/V2.0卡，设置最高48/4=12Mhz
000104  2502              MOVS     r5,#2
000106  e000              B        |L17.266|
                  |L17.264|
;;;124    		}else clkdiv=SDIO_TRANSFER_CLK_DIV;	//SDHC等其他卡，设置最高48/2=24Mhz
000108  2500              MOVS     r5,#0
                  |L17.266|
;;;125    		SDIO_Clock_Set(clkdiv);	//设置时钟频率,SDIO时钟计算公式:SDIO_CK时钟=SDIOCLK/[clkdiv+2];其中,SDIOCLK固定为48Mhz 
00010a  4628              MOV      r0,r5
00010c  f7fffffe          BL       SDIO_Clock_Set
;;;126    		//errorstatus=SD_SetDeviceMode(SD_DMA_MODE);	//设置为DMA模式
;;;127    		errorstatus=SD_SetDeviceMode(SD_POLLING_MODE);//设置为查询模式
000110  2000              MOVS     r0,#0
000112  f7fffffe          BL       SD_SetDeviceMode
000116  4604              MOV      r4,r0
                  |L17.280|
;;;128     	}
;;;129    	return errorstatus;		 
000118  4620              MOV      r0,r4
;;;130    }
00011a  bd3e              POP      {r1-r5,pc}
;;;131    //SDIO时钟初始化设置
                          ENDP

                  |L17.284|
                          DCD      0x0040000c
                  |L17.288|
                          DCD      0x40020800
                  |L17.292|
                          DCD      0x40020c00
                  |L17.296|
                          DCD      SDCardInfo
                  |L17.300|
                          DCD      CardType

                          AREA ||i.SD_InitializeCards||, CODE, READONLY, ALIGN=2

                  SD_InitializeCards PROC
;;;283    //返回值:错误代码
;;;284    SD_Error SD_InitializeCards(void)
000000  b538              PUSH     {r3-r5,lr}
;;;285    {
;;;286     	SD_Error errorstatus=SD_OK;
000002  2400              MOVS     r4,#0
;;;287    	u16 rca = 0x01;
000004  2001              MOVS     r0,#1
000006  9000              STR      r0,[sp,#0]
;;;288    	
;;;289      if (SDIO_GetPowerState() == SDIO_PowerState_OFF)	//检查电源状态,确保为上电状态
000008  f7fffffe          BL       SDIO_GetPowerState
00000c  b910              CBNZ     r0,|L18.20|
;;;290      {
;;;291        errorstatus = SD_REQUEST_NOT_APPLICABLE;
00000e  2425              MOVS     r4,#0x25
;;;292        return(errorstatus);
000010  4620              MOV      r0,r4
                  |L18.18|
;;;293      }
;;;294    
;;;295     	if(SDIO_SECURE_DIGITAL_IO_CARD!=CardType)			//非SECURE_DIGITAL_IO_CARD
;;;296    	{
;;;297    		SDIO_CmdInitStructure.SDIO_Argument = 0x0;//发送CMD2,取得CID,长响应
;;;298        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ALL_SEND_CID;
;;;299        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
;;;300        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;301        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;302        SDIO_SendCommand(&SDIO_CmdInitStructure);//发送CMD2,取得CID,长响应	
;;;303    		
;;;304    		errorstatus=CmdResp2Error(); 					//等待R2响应 
;;;305    		
;;;306    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误		 
;;;307    		
;;;308     		CID_Tab[0]=SDIO->RESP1;
;;;309    		CID_Tab[1]=SDIO->RESP2;
;;;310    		CID_Tab[2]=SDIO->RESP3;
;;;311    		CID_Tab[3]=SDIO->RESP4;
;;;312    	}
;;;313    	if((SDIO_STD_CAPACITY_SD_CARD_V1_1==CardType)||(SDIO_STD_CAPACITY_SD_CARD_V2_0==CardType)||(SDIO_SECURE_DIGITAL_IO_COMBO_CARD==CardType)||(SDIO_HIGH_CAPACITY_SD_CARD==CardType))//判断卡类型
;;;314    	{
;;;315    		SDIO_CmdInitStructure.SDIO_Argument = 0x00;//发送CMD3,短响应 
;;;316        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_REL_ADDR;	//cmd3
;;;317        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short; //r6
;;;318        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;319        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;320        SDIO_SendCommand(&SDIO_CmdInitStructure);	//发送CMD3,短响应 
;;;321    		
;;;322    		errorstatus=CmdResp6Error(SD_CMD_SET_REL_ADDR,&rca);//等待R6响应 
;;;323    		
;;;324    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误		    
;;;325    	}   
;;;326        if (SDIO_MULTIMEDIA_CARD==CardType)
;;;327        {
;;;328    
;;;329    		  SDIO_CmdInitStructure.SDIO_Argument = (u32)(rca<<16);//发送CMD3,短响应 
;;;330          SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_REL_ADDR;	//cmd3
;;;331          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short; //r6
;;;332          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;333          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;334          SDIO_SendCommand(&SDIO_CmdInitStructure);	//发送CMD3,短响应 	
;;;335    			
;;;336          errorstatus=CmdResp2Error(); 					//等待R2响应   
;;;337    			
;;;338    		  if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	 
;;;339        }
;;;340    	if (SDIO_SECURE_DIGITAL_IO_CARD!=CardType)			//非SECURE_DIGITAL_IO_CARD
;;;341    	{
;;;342    		RCA = rca;
;;;343    		
;;;344        SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)(rca << 16);//发送CMD9+卡RCA,取得CSD,长响应 
;;;345        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_CSD;
;;;346        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
;;;347        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;348        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;349        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;350    		
;;;351    		errorstatus=CmdResp2Error(); 					//等待R2响应   
;;;352    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误		    
;;;353      		
;;;354    		CSD_Tab[0]=SDIO->RESP1;
;;;355    	  CSD_Tab[1]=SDIO->RESP2;
;;;356    		CSD_Tab[2]=SDIO->RESP3;						
;;;357    		CSD_Tab[3]=SDIO->RESP4;					    
;;;358    	}
;;;359    	return SD_OK;//卡初始化成功
;;;360    } 
000012  bd38              POP      {r3-r5,pc}
                  |L18.20|
000014  484d              LDR      r0,|L18.332|
000016  7800              LDRB     r0,[r0,#0]            ;295  ; CardType
000018  2804              CMP      r0,#4                 ;295
00001a  d024              BEQ      |L18.102|
00001c  2000              MOVS     r0,#0                 ;297
00001e  494c              LDR      r1,|L18.336|
000020  6008              STR      r0,[r1,#0]            ;297  ; SDIO_CmdInitStructure
000022  2002              MOVS     r0,#2                 ;298
000024  6048              STR      r0,[r1,#4]            ;298  ; SDIO_CmdInitStructure
000026  20c0              MOVS     r0,#0xc0              ;299
000028  6088              STR      r0,[r1,#8]            ;299  ; SDIO_CmdInitStructure
00002a  2000              MOVS     r0,#0                 ;300
00002c  60c8              STR      r0,[r1,#0xc]          ;300  ; SDIO_CmdInitStructure
00002e  f44f6080          MOV      r0,#0x400             ;301
000032  6108              STR      r0,[r1,#0x10]         ;301  ; SDIO_CmdInitStructure
000034  4608              MOV      r0,r1                 ;302
000036  f7fffffe          BL       SDIO_SendCommand
00003a  f7fffffe          BL       CmdResp2Error
00003e  4604              MOV      r4,r0                 ;304
000040  b10c              CBZ      r4,|L18.70|
000042  4620              MOV      r0,r4                 ;306
000044  e7e5              B        |L18.18|
                  |L18.70|
000046  4843              LDR      r0,|L18.340|
000048  6800              LDR      r0,[r0,#0]            ;308
00004a  4943              LDR      r1,|L18.344|
00004c  6008              STR      r0,[r1,#0]            ;308  ; CID_Tab
00004e  4841              LDR      r0,|L18.340|
000050  1d00              ADDS     r0,r0,#4              ;309
000052  6800              LDR      r0,[r0,#0]            ;309
000054  6048              STR      r0,[r1,#4]            ;309  ; CID_Tab
000056  483f              LDR      r0,|L18.340|
000058  3008              ADDS     r0,r0,#8              ;310
00005a  6800              LDR      r0,[r0,#0]            ;310
00005c  6088              STR      r0,[r1,#8]            ;310  ; CID_Tab
00005e  483d              LDR      r0,|L18.340|
000060  300c              ADDS     r0,r0,#0xc            ;311
000062  6800              LDR      r0,[r0,#0]            ;311
000064  60c8              STR      r0,[r1,#0xc]          ;311  ; CID_Tab
                  |L18.102|
000066  4839              LDR      r0,|L18.332|
000068  7800              LDRB     r0,[r0,#0]            ;313  ; CardType
00006a  b158              CBZ      r0,|L18.132|
00006c  4837              LDR      r0,|L18.332|
00006e  7800              LDRB     r0,[r0,#0]            ;313  ; CardType
000070  2801              CMP      r0,#1                 ;313
000072  d007              BEQ      |L18.132|
000074  4835              LDR      r0,|L18.332|
000076  7800              LDRB     r0,[r0,#0]            ;313  ; CardType
000078  2806              CMP      r0,#6                 ;313
00007a  d003              BEQ      |L18.132|
00007c  4833              LDR      r0,|L18.332|
00007e  7800              LDRB     r0,[r0,#0]            ;313  ; CardType
000080  2802              CMP      r0,#2                 ;313
000082  d116              BNE      |L18.178|
                  |L18.132|
000084  2000              MOVS     r0,#0                 ;315
000086  4932              LDR      r1,|L18.336|
000088  6008              STR      r0,[r1,#0]            ;315  ; SDIO_CmdInitStructure
00008a  2003              MOVS     r0,#3                 ;316
00008c  6048              STR      r0,[r1,#4]            ;316  ; SDIO_CmdInitStructure
00008e  2040              MOVS     r0,#0x40              ;317
000090  6088              STR      r0,[r1,#8]            ;317  ; SDIO_CmdInitStructure
000092  2000              MOVS     r0,#0                 ;318
000094  60c8              STR      r0,[r1,#0xc]          ;318  ; SDIO_CmdInitStructure
000096  f44f6080          MOV      r0,#0x400             ;319
00009a  6108              STR      r0,[r1,#0x10]         ;319  ; SDIO_CmdInitStructure
00009c  4608              MOV      r0,r1                 ;320
00009e  f7fffffe          BL       SDIO_SendCommand
0000a2  4669              MOV      r1,sp                 ;322
0000a4  2003              MOVS     r0,#3                 ;322
0000a6  f7fffffe          BL       CmdResp6Error
0000aa  4604              MOV      r4,r0                 ;322
0000ac  b10c              CBZ      r4,|L18.178|
0000ae  4620              MOV      r0,r4                 ;324
0000b0  e7af              B        |L18.18|
                  |L18.178|
0000b2  4826              LDR      r0,|L18.332|
0000b4  7800              LDRB     r0,[r0,#0]            ;326  ; CardType
0000b6  2803              CMP      r0,#3                 ;326
0000b8  d116              BNE      |L18.232|
0000ba  f8bd0000          LDRH     r0,[sp,#0]            ;329
0000be  0400              LSLS     r0,r0,#16             ;329
0000c0  4923              LDR      r1,|L18.336|
0000c2  6008              STR      r0,[r1,#0]            ;329  ; SDIO_CmdInitStructure
0000c4  2003              MOVS     r0,#3                 ;330
0000c6  6048              STR      r0,[r1,#4]            ;330  ; SDIO_CmdInitStructure
0000c8  2040              MOVS     r0,#0x40              ;331
0000ca  6088              STR      r0,[r1,#8]            ;331  ; SDIO_CmdInitStructure
0000cc  2000              MOVS     r0,#0                 ;332
0000ce  60c8              STR      r0,[r1,#0xc]          ;332  ; SDIO_CmdInitStructure
0000d0  f44f6080          MOV      r0,#0x400             ;333
0000d4  6108              STR      r0,[r1,#0x10]         ;333  ; SDIO_CmdInitStructure
0000d6  4608              MOV      r0,r1                 ;334
0000d8  f7fffffe          BL       SDIO_SendCommand
0000dc  f7fffffe          BL       CmdResp2Error
0000e0  4604              MOV      r4,r0                 ;336
0000e2  b10c              CBZ      r4,|L18.232|
0000e4  4620              MOV      r0,r4                 ;338
0000e6  e794              B        |L18.18|
                  |L18.232|
0000e8  4818              LDR      r0,|L18.332|
0000ea  7800              LDRB     r0,[r0,#0]            ;340  ; CardType
0000ec  2804              CMP      r0,#4                 ;340
0000ee  d02a              BEQ      |L18.326|
0000f0  f8bd0000          LDRH     r0,[sp,#0]            ;342
0000f4  4919              LDR      r1,|L18.348|
0000f6  6008              STR      r0,[r1,#0]            ;342  ; RCA
0000f8  f8bd0000          LDRH     r0,[sp,#0]            ;344
0000fc  0400              LSLS     r0,r0,#16             ;344
0000fe  4914              LDR      r1,|L18.336|
000100  6008              STR      r0,[r1,#0]            ;344  ; SDIO_CmdInitStructure
000102  2009              MOVS     r0,#9                 ;345
000104  6048              STR      r0,[r1,#4]            ;345  ; SDIO_CmdInitStructure
000106  20c0              MOVS     r0,#0xc0              ;346
000108  6088              STR      r0,[r1,#8]            ;346  ; SDIO_CmdInitStructure
00010a  2000              MOVS     r0,#0                 ;347
00010c  60c8              STR      r0,[r1,#0xc]          ;347  ; SDIO_CmdInitStructure
00010e  f44f6080          MOV      r0,#0x400             ;348
000112  6108              STR      r0,[r1,#0x10]         ;348  ; SDIO_CmdInitStructure
000114  4608              MOV      r0,r1                 ;349
000116  f7fffffe          BL       SDIO_SendCommand
00011a  f7fffffe          BL       CmdResp2Error
00011e  4604              MOV      r4,r0                 ;351
000120  b10c              CBZ      r4,|L18.294|
000122  4620              MOV      r0,r4                 ;352
000124  e775              B        |L18.18|
                  |L18.294|
000126  480b              LDR      r0,|L18.340|
000128  6800              LDR      r0,[r0,#0]            ;354
00012a  490d              LDR      r1,|L18.352|
00012c  6008              STR      r0,[r1,#0]            ;354  ; CSD_Tab
00012e  4809              LDR      r0,|L18.340|
000130  1d00              ADDS     r0,r0,#4              ;355
000132  6800              LDR      r0,[r0,#0]            ;355
000134  6048              STR      r0,[r1,#4]            ;355  ; CSD_Tab
000136  4807              LDR      r0,|L18.340|
000138  3008              ADDS     r0,r0,#8              ;356
00013a  6800              LDR      r0,[r0,#0]            ;356
00013c  6088              STR      r0,[r1,#8]            ;356  ; CSD_Tab
00013e  4805              LDR      r0,|L18.340|
000140  300c              ADDS     r0,r0,#0xc            ;357
000142  6800              LDR      r0,[r0,#0]            ;357
000144  60c8              STR      r0,[r1,#0xc]          ;357  ; CSD_Tab
                  |L18.326|
000146  2000              MOVS     r0,#0                 ;359
000148  e763              B        |L18.18|
;;;361    //得到卡信息
                          ENDP

00014a  0000              DCW      0x0000
                  |L18.332|
                          DCD      CardType
                  |L18.336|
                          DCD      SDIO_CmdInitStructure
                  |L18.340|
                          DCD      0x40012c14
                  |L18.344|
                          DCD      CID_Tab
                  |L18.348|
                          DCD      ||RCA||
                  |L18.352|
                          DCD      CSD_Tab

                          AREA ||i.SD_PowerOFF||, CODE, READONLY, ALIGN=1

                  SD_PowerOFF PROC
;;;274    //返回值:错误代码;(0,无错误)
;;;275    SD_Error SD_PowerOFF(void)
000000  b510              PUSH     {r4,lr}
;;;276    {
;;;277     
;;;278      SDIO_SetPowerState(SDIO_PowerState_OFF);//SDIO电源关闭,时钟停止	
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       SDIO_SetPowerState
;;;279    
;;;280      return SD_OK;	  
000008  2000              MOVS     r0,#0
;;;281    }   
00000a  bd10              POP      {r4,pc}
;;;282    //初始化所有的卡,并让卡进入就绪状态
                          ENDP


                          AREA ||i.SD_PowerON||, CODE, READONLY, ALIGN=2

                  SD_PowerON PROC
;;;145    //返回值:错误代码;(0,无错误)
;;;146    SD_Error SD_PowerON(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;147    {
;;;148     	u8 i=0;
000004  2700              MOVS     r7,#0
;;;149    	SD_Error errorstatus=SD_OK;
000006  2400              MOVS     r4,#0
;;;150    	u32 response=0,count=0,validvoltage=0;
000008  2600              MOVS     r6,#0
00000a  2500              MOVS     r5,#0
00000c  46a0              MOV      r8,r4
;;;151    	u32 SDType=SD_STD_CAPACITY;
00000e  46a1              MOV      r9,r4
;;;152    	
;;;153    	 /*初始化时的时钟不能大于400KHz*/ 
;;;154      SDIO_InitStructure.SDIO_ClockDiv = SDIO_INIT_CLK_DIV;	/* HCLK = 72MHz, SDIOCLK = 72MHz, SDIO_CK = HCLK/(178 + 2) = 400 KHz */
000010  2076              MOVS     r0,#0x76
000012  496e              LDR      r1,|L20.460|
000014  7508              STRB     r0,[r1,#0x14]
;;;155      SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
000016  2000              MOVS     r0,#0
000018  6008              STR      r0,[r1,#0]  ; SDIO_InitStructure
;;;156      SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;  //不使用bypass模式，直接用HCLK进行分频得到SDIO_CK
00001a  6048              STR      r0,[r1,#4]  ; SDIO_InitStructure
;;;157      SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;	// 空闲时不关闭时钟电源
00001c  6088              STR      r0,[r1,#8]  ; SDIO_InitStructure
;;;158      SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;	 				//1位数据线
00001e  60c8              STR      r0,[r1,#0xc]  ; SDIO_InitStructure
;;;159      SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;//硬件流
000020  6108              STR      r0,[r1,#0x10]  ; SDIO_InitStructure
;;;160      SDIO_Init(&SDIO_InitStructure);
000022  4608              MOV      r0,r1
000024  f7fffffe          BL       SDIO_Init
;;;161    
;;;162    	SDIO_SetPowerState(SDIO_PowerState_ON);	//上电状态,开启卡时钟   
000028  2003              MOVS     r0,#3
00002a  f7fffffe          BL       SDIO_SetPowerState
;;;163      SDIO->CLKCR|=1<<8;			//SDIOCK使能  
00002e  4868              LDR      r0,|L20.464|
000030  6800              LDR      r0,[r0,#0]
000032  f4407080          ORR      r0,r0,#0x100
000036  4966              LDR      r1,|L20.464|
000038  6008              STR      r0,[r1,#0]
;;;164     
;;;165     	for(i=0;i<74;i++)
00003a  bf00              NOP      
00003c  e012              B        |L20.100|
                  |L20.62|
;;;166    	{
;;;167     
;;;168    		SDIO_CmdInitStructure.SDIO_Argument = 0x0;//发送CMD0进入IDLE STAGE模式命令.
00003e  2000              MOVS     r0,#0
000040  4964              LDR      r1,|L20.468|
000042  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;169        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_GO_IDLE_STATE; //cmd0
000044  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;170        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_No;  //无响应
000046  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;171        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000048  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;172        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;  //则CPSM在开始发送命令之前等待数据传输结束。 
00004a  f44f6080          MOV      r0,#0x400
00004e  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;173        SDIO_SendCommand(&SDIO_CmdInitStructure);	  		//写命令进命令寄存器
000050  4608              MOV      r0,r1
000052  f7fffffe          BL       SDIO_SendCommand
;;;174    		
;;;175    		errorstatus=CmdError();
000056  f7fffffe          BL       CmdError
00005a  4604              MOV      r4,r0
;;;176    		
;;;177    		if(errorstatus==SD_OK)break;
00005c  b904              CBNZ     r4,|L20.96|
00005e  e003              B        |L20.104|
                  |L20.96|
000060  1c78              ADDS     r0,r7,#1              ;165
000062  b2c7              UXTB     r7,r0                 ;165
                  |L20.100|
000064  2f4a              CMP      r7,#0x4a              ;165
000066  dbea              BLT      |L20.62|
                  |L20.104|
000068  bf00              NOP      
;;;178     	}
;;;179     	if(errorstatus)return errorstatus;//返回错误状态
00006a  b114              CBZ      r4,|L20.114|
00006c  4620              MOV      r0,r4
                  |L20.110|
;;;180    	
;;;181      SDIO_CmdInitStructure.SDIO_Argument = SD_CHECK_PATTERN;	//发送CMD8,短响应,检查SD卡接口特性
;;;182      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_IF_COND;	//cmd8
;;;183      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;	 //r7
;;;184      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;			 //关闭等待中断
;;;185      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;186      SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;187    	
;;;188      errorstatus=CmdResp7Error();						//等待R7响应
;;;189    	
;;;190     	if(errorstatus==SD_OK) 								//R7响应正常
;;;191    	{
;;;192    		CardType=SDIO_STD_CAPACITY_SD_CARD_V2_0;		//SD 2.0卡
;;;193    		SDType=SD_HIGH_CAPACITY;			   			//高容量卡
;;;194    	}
;;;195    	  
;;;196    	  SDIO_CmdInitStructure.SDIO_Argument = 0x00;//发送CMD55,短响应	
;;;197        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;198        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;199        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;200        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;201        SDIO_SendCommand(&SDIO_CmdInitStructure);		//发送CMD55,短响应	 
;;;202    	
;;;203    	 errorstatus=CmdResp1Error(SD_CMD_APP_CMD); 		 	//等待R1响应   
;;;204    	
;;;205    	if(errorstatus==SD_OK)//SD2.0/SD 1.1,否则为MMC卡
;;;206    	{																  
;;;207    		//SD卡,发送ACMD41 SD_APP_OP_COND,参数为:0x80100000 
;;;208    		while((!validvoltage)&&(count<SD_MAX_VOLT_TRIAL))
;;;209    		{	   										   
;;;210    		  SDIO_CmdInitStructure.SDIO_Argument = 0x00;//发送CMD55,短响应
;;;211          SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;	  //CMD55
;;;212          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;213          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;214          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;215          SDIO_SendCommand(&SDIO_CmdInitStructure);			//发送CMD55,短响应	 
;;;216    			
;;;217    			errorstatus=CmdResp1Error(SD_CMD_APP_CMD); 	 	//等待R1响应  
;;;218    			
;;;219     			if(errorstatus!=SD_OK)return errorstatus;   	//响应错误
;;;220    
;;;221          //acmd41，命令参数由支持的电压范围及HCS位组成，HCS位置一来区分卡是SDSc还是sdhc
;;;222          SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;	//发送ACMD41,短响应	
;;;223          SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_OP_COND;
;;;224          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;  //r3
;;;225          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;226          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;227          SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;228    			
;;;229    			errorstatus=CmdResp3Error(); 					//等待R3响应   
;;;230    			
;;;231     			if(errorstatus!=SD_OK)return errorstatus;   	//响应错误 
;;;232    			response=SDIO->RESP1;;			   				//得到响应
;;;233    			validvoltage=(((response>>31)==1)?1:0);			//判断SD卡上电是否完成
;;;234    			count++;
;;;235    		}
;;;236    		if(count>=SD_MAX_VOLT_TRIAL)
;;;237    		{
;;;238    			errorstatus=SD_INVALID_VOLTRANGE;
;;;239    			return errorstatus;
;;;240    		}	 
;;;241    		if(response&=SD_HIGH_CAPACITY)
;;;242    		{
;;;243    			CardType=SDIO_HIGH_CAPACITY_SD_CARD;
;;;244    		}
;;;245     	}else//MMC卡
;;;246    	{
;;;247    		//MMC卡,发送CMD1 SDIO_SEND_OP_COND,参数为:0x80FF8000 
;;;248    		while((!validvoltage)&&(count<SD_MAX_VOLT_TRIAL))
;;;249    		{	   										   				   
;;;250    			SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_MMC;//发送CMD1,短响应	   
;;;251          SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_OP_COND;
;;;252          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;  //r3
;;;253          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;254          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;255          SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;256    			
;;;257    			errorstatus=CmdResp3Error(); 					//等待R3响应   
;;;258    			
;;;259     			if(errorstatus!=SD_OK)return errorstatus;   	//响应错误  
;;;260    			response=SDIO->RESP1;;			   				//得到响应
;;;261    			validvoltage=(((response>>31)==1)?1:0);
;;;262    			count++;
;;;263    		}
;;;264    		if(count>=SD_MAX_VOLT_TRIAL)
;;;265    		{
;;;266    			errorstatus=SD_INVALID_VOLTRANGE;
;;;267    			return errorstatus;
;;;268    		}	 			    
;;;269    		CardType=SDIO_MULTIMEDIA_CARD;	  
;;;270      	}  
;;;271      	return(errorstatus);		
;;;272    }
00006e  e8bd87f0          POP      {r4-r10,pc}
                  |L20.114|
000072  f44f70d5          MOV      r0,#0x1aa             ;181
000076  4957              LDR      r1,|L20.468|
000078  6008              STR      r0,[r1,#0]            ;181  ; SDIO_CmdInitStructure
00007a  2008              MOVS     r0,#8                 ;182
00007c  6048              STR      r0,[r1,#4]            ;182  ; SDIO_CmdInitStructure
00007e  2040              MOVS     r0,#0x40              ;183
000080  6088              STR      r0,[r1,#8]            ;183  ; SDIO_CmdInitStructure
000082  2000              MOVS     r0,#0                 ;184
000084  60c8              STR      r0,[r1,#0xc]          ;184  ; SDIO_CmdInitStructure
000086  f44f6080          MOV      r0,#0x400             ;185
00008a  6108              STR      r0,[r1,#0x10]         ;185  ; SDIO_CmdInitStructure
00008c  4608              MOV      r0,r1                 ;186
00008e  f7fffffe          BL       SDIO_SendCommand
000092  f7fffffe          BL       CmdResp7Error
000096  4604              MOV      r4,r0                 ;188
000098  b924              CBNZ     r4,|L20.164|
00009a  2001              MOVS     r0,#1                 ;192
00009c  494e              LDR      r1,|L20.472|
00009e  7008              STRB     r0,[r1,#0]            ;192
0000a0  f04f4980          MOV      r9,#0x40000000        ;193
                  |L20.164|
0000a4  2000              MOVS     r0,#0                 ;196
0000a6  494b              LDR      r1,|L20.468|
0000a8  6008              STR      r0,[r1,#0]            ;196  ; SDIO_CmdInitStructure
0000aa  2037              MOVS     r0,#0x37              ;197
0000ac  6048              STR      r0,[r1,#4]            ;197  ; SDIO_CmdInitStructure
0000ae  2040              MOVS     r0,#0x40              ;198
0000b0  6088              STR      r0,[r1,#8]            ;198  ; SDIO_CmdInitStructure
0000b2  2000              MOVS     r0,#0                 ;199
0000b4  60c8              STR      r0,[r1,#0xc]          ;199  ; SDIO_CmdInitStructure
0000b6  f44f6080          MOV      r0,#0x400             ;200
0000ba  6108              STR      r0,[r1,#0x10]         ;200  ; SDIO_CmdInitStructure
0000bc  4608              MOV      r0,r1                 ;201
0000be  f7fffffe          BL       SDIO_SendCommand
0000c2  2037              MOVS     r0,#0x37              ;203
0000c4  f7fffffe          BL       CmdResp1Error
0000c8  4604              MOV      r4,r0                 ;203
0000ca  2c00              CMP      r4,#0                 ;205
0000cc  d14c              BNE      |L20.360|
0000ce  e035              B        |L20.316|
                  |L20.208|
0000d0  2000              MOVS     r0,#0                 ;210
0000d2  4940              LDR      r1,|L20.468|
0000d4  6008              STR      r0,[r1,#0]            ;210  ; SDIO_CmdInitStructure
0000d6  2037              MOVS     r0,#0x37              ;211
0000d8  6048              STR      r0,[r1,#4]            ;211  ; SDIO_CmdInitStructure
0000da  2040              MOVS     r0,#0x40              ;212
0000dc  6088              STR      r0,[r1,#8]            ;212  ; SDIO_CmdInitStructure
0000de  2000              MOVS     r0,#0                 ;213
0000e0  60c8              STR      r0,[r1,#0xc]          ;213  ; SDIO_CmdInitStructure
0000e2  f44f6080          MOV      r0,#0x400             ;214
0000e6  6108              STR      r0,[r1,#0x10]         ;214  ; SDIO_CmdInitStructure
0000e8  4608              MOV      r0,r1                 ;215
0000ea  f7fffffe          BL       SDIO_SendCommand
0000ee  2037              MOVS     r0,#0x37              ;217
0000f0  f7fffffe          BL       CmdResp1Error
0000f4  4604              MOV      r4,r0                 ;217
0000f6  b10c              CBZ      r4,|L20.252|
0000f8  4620              MOV      r0,r4                 ;219
0000fa  e7b8              B        |L20.110|
                  |L20.252|
0000fc  4837              LDR      r0,|L20.476|
0000fe  ea490000          ORR      r0,r9,r0              ;222
000102  4934              LDR      r1,|L20.468|
000104  6008              STR      r0,[r1,#0]            ;222  ; SDIO_CmdInitStructure
000106  2029              MOVS     r0,#0x29              ;223
000108  6048              STR      r0,[r1,#4]            ;223  ; SDIO_CmdInitStructure
00010a  2040              MOVS     r0,#0x40              ;224
00010c  6088              STR      r0,[r1,#8]            ;224  ; SDIO_CmdInitStructure
00010e  2000              MOVS     r0,#0                 ;225
000110  60c8              STR      r0,[r1,#0xc]          ;225  ; SDIO_CmdInitStructure
000112  f44f6080          MOV      r0,#0x400             ;226
000116  6108              STR      r0,[r1,#0x10]         ;226  ; SDIO_CmdInitStructure
000118  4608              MOV      r0,r1                 ;227
00011a  f7fffffe          BL       SDIO_SendCommand
00011e  f7fffffe          BL       CmdResp3Error
000122  4604              MOV      r4,r0                 ;229
000124  b10c              CBZ      r4,|L20.298|
000126  4620              MOV      r0,r4                 ;231
000128  e7a1              B        |L20.110|
                  |L20.298|
00012a  4829              LDR      r0,|L20.464|
00012c  3010              ADDS     r0,r0,#0x10           ;232
00012e  6806              LDR      r6,[r0,#0]            ;232
000130  2001              MOVS     r0,#1                 ;233
000132  ea8070d6          EOR      r0,r0,r6,LSR #31      ;233
000136  f0800801          EOR      r8,r0,#1              ;233
00013a  1c6d              ADDS     r5,r5,#1              ;234
                  |L20.316|
00013c  f1b80f00          CMP      r8,#0                 ;208
000140  d103              BNE      |L20.330|
000142  f64f70ff          MOV      r0,#0xffff            ;208
000146  4285              CMP      r5,r0                 ;208
000148  d3c2              BCC      |L20.208|
                  |L20.330|
00014a  f64f70ff          MOV      r0,#0xffff            ;236
00014e  4285              CMP      r5,r0                 ;236
000150  d302              BCC      |L20.344|
000152  241b              MOVS     r4,#0x1b              ;238
000154  4620              MOV      r0,r4                 ;239
000156  e78a              B        |L20.110|
                  |L20.344|
000158  f0064080          AND      r0,r6,#0x40000000     ;241
00015c  1e06              SUBS     r6,r0,#0              ;241
00015e  d033              BEQ      |L20.456|
000160  2002              MOVS     r0,#2                 ;243
000162  491d              LDR      r1,|L20.472|
000164  7008              STRB     r0,[r1,#0]            ;243
000166  e02f              B        |L20.456|
                  |L20.360|
000168  e01d              B        |L20.422|
                  |L20.362|
00016a  481d              LDR      r0,|L20.480|
00016c  4919              LDR      r1,|L20.468|
00016e  6008              STR      r0,[r1,#0]            ;250  ; SDIO_CmdInitStructure
000170  2001              MOVS     r0,#1                 ;251
000172  6048              STR      r0,[r1,#4]            ;251  ; SDIO_CmdInitStructure
000174  2040              MOVS     r0,#0x40              ;252
000176  6088              STR      r0,[r1,#8]            ;252  ; SDIO_CmdInitStructure
000178  2000              MOVS     r0,#0                 ;253
00017a  60c8              STR      r0,[r1,#0xc]          ;253  ; SDIO_CmdInitStructure
00017c  f44f6080          MOV      r0,#0x400             ;254
000180  6108              STR      r0,[r1,#0x10]         ;254  ; SDIO_CmdInitStructure
000182  4608              MOV      r0,r1                 ;255
000184  f7fffffe          BL       SDIO_SendCommand
000188  f7fffffe          BL       CmdResp3Error
00018c  4604              MOV      r4,r0                 ;257
00018e  b10c              CBZ      r4,|L20.404|
000190  4620              MOV      r0,r4                 ;259
000192  e76c              B        |L20.110|
                  |L20.404|
000194  480e              LDR      r0,|L20.464|
000196  3010              ADDS     r0,r0,#0x10           ;260
000198  6806              LDR      r6,[r0,#0]            ;260
00019a  2001              MOVS     r0,#1                 ;261
00019c  ea8070d6          EOR      r0,r0,r6,LSR #31      ;261
0001a0  f0800801          EOR      r8,r0,#1              ;261
0001a4  1c6d              ADDS     r5,r5,#1              ;262
                  |L20.422|
0001a6  f1b80f00          CMP      r8,#0                 ;248
0001aa  d103              BNE      |L20.436|
0001ac  f64f70ff          MOV      r0,#0xffff            ;248
0001b0  4285              CMP      r5,r0                 ;248
0001b2  d3da              BCC      |L20.362|
                  |L20.436|
0001b4  f64f70ff          MOV      r0,#0xffff            ;264
0001b8  4285              CMP      r5,r0                 ;264
0001ba  d302              BCC      |L20.450|
0001bc  241b              MOVS     r4,#0x1b              ;266
0001be  4620              MOV      r0,r4                 ;267
0001c0  e755              B        |L20.110|
                  |L20.450|
0001c2  2003              MOVS     r0,#3                 ;269
0001c4  4904              LDR      r1,|L20.472|
0001c6  7008              STRB     r0,[r1,#0]            ;269
                  |L20.456|
0001c8  4620              MOV      r0,r4                 ;271
0001ca  e750              B        |L20.110|
;;;273    //SD卡 Power OFF
                          ENDP

                  |L20.460|
                          DCD      SDIO_InitStructure
                  |L20.464|
                          DCD      0x40012c04
                  |L20.468|
                          DCD      SDIO_CmdInitStructure
                  |L20.472|
                          DCD      CardType
                  |L20.476|
                          DCD      0x80100000
                  |L20.480|
                          DCD      0x80ff8000

                          AREA ||i.SD_ProcessIRQSrc||, CODE, READONLY, ALIGN=2

                  SD_ProcessIRQSrc PROC
;;;1204   //返回值:错误代码
;;;1205   SD_Error SD_ProcessIRQSrc(void)
000000  b510              PUSH     {r4,lr}
;;;1206   {
;;;1207   	if(SDIO_GetFlagStatus(SDIO_FLAG_DATAEND) != RESET)//接收完成中断
000002  f44f7080          MOV      r0,#0x100
000006  f7fffffe          BL       SDIO_GetFlagStatus
00000a  b378              CBZ      r0,|L21.108|
;;;1208   	{	 
;;;1209   		if (StopCondition==1)
00000c  484c              LDR      r0,|L21.320|
00000e  7800              LDRB     r0,[r0,#0]  ; StopCondition
000010  2801              CMP      r0,#1
000012  d114              BNE      |L21.62|
;;;1210   		{  
;;;1211   				SDIO_CmdInitStructure.SDIO_Argument =0;//发送CMD12+结束传输 	  
000014  2000              MOVS     r0,#0
000016  494b              LDR      r1,|L21.324|
000018  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;1212   				SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_STOP_TRANSMISSION;
00001a  200c              MOVS     r0,#0xc
00001c  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1213   				SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
00001e  2040              MOVS     r0,#0x40
000020  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1214   				SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000022  2000              MOVS     r0,#0
000024  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1215   				SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000026  f44f6080          MOV      r0,#0x400
00002a  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1216   				SDIO_SendCommand(&SDIO_CmdInitStructure);	
00002c  4608              MOV      r0,r1
00002e  f7fffffe          BL       SDIO_SendCommand
;;;1217   					
;;;1218   			TransferError=CmdResp1Error(SD_CMD_STOP_TRANSMISSION);
000032  200c              MOVS     r0,#0xc
000034  f7fffffe          BL       CmdResp1Error
000038  4943              LDR      r1,|L21.328|
00003a  7008              STRB     r0,[r1,#0]
00003c  e002              B        |L21.68|
                  |L21.62|
;;;1219   		}else TransferError = SD_OK;	
00003e  2000              MOVS     r0,#0
000040  4941              LDR      r1,|L21.328|
000042  7008              STRB     r0,[r1,#0]
                  |L21.68|
;;;1220    		SDIO->ICR|=1<<8;//清除完成中断标记
000044  4841              LDR      r0,|L21.332|
000046  6800              LDR      r0,[r0,#0]
000048  f4407080          ORR      r0,r0,#0x100
00004c  493f              LDR      r1,|L21.332|
00004e  6008              STR      r0,[r1,#0]
;;;1221   		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
000050  1d08              ADDS     r0,r1,#4
000052  6800              LDR      r0,[r0,#0]
000054  f24c313a          MOV      r1,#0xc33a
000058  4388              BICS     r0,r0,r1
00005a  493c              LDR      r1,|L21.332|
00005c  1d09              ADDS     r1,r1,#4
00005e  6008              STR      r0,[r1,#0]
;;;1222    		TransferEnd = 1;
000060  2001              MOVS     r0,#1
000062  493b              LDR      r1,|L21.336|
000064  7008              STRB     r0,[r1,#0]
;;;1223   		return(TransferError);
000066  4838              LDR      r0,|L21.328|
000068  7800              LDRB     r0,[r0,#0]  ; TransferError
                  |L21.106|
;;;1224   	}
;;;1225    	if(SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)//数据CRC错误
;;;1226   	{
;;;1227   		SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);  		//清错误标志
;;;1228   		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
;;;1229   	    TransferError = SD_DATA_CRC_FAIL;
;;;1230   	    return(SD_DATA_CRC_FAIL);
;;;1231   	}
;;;1232    	if(SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)//数据超时错误
;;;1233   	{
;;;1234   		SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);  			//清中断标志
;;;1235   		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
;;;1236   	    TransferError = SD_DATA_TIMEOUT;
;;;1237   	    return(SD_DATA_TIMEOUT);
;;;1238   	}
;;;1239     	if(SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)//FIFO上溢错误
;;;1240   	{
;;;1241   		SDIO_ClearFlag(SDIO_FLAG_RXOVERR);  			//清中断标志
;;;1242   		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
;;;1243   	    TransferError = SD_RX_OVERRUN;
;;;1244   	    return(SD_RX_OVERRUN);
;;;1245   	}
;;;1246      	if(SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET)//FIFO下溢错误
;;;1247   	{
;;;1248   		SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);  			//清中断标志
;;;1249   		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
;;;1250   	    TransferError = SD_TX_UNDERRUN;
;;;1251   	    return(SD_TX_UNDERRUN);
;;;1252   	}
;;;1253   	if(SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)//起始位错误
;;;1254   	{
;;;1255   		SDIO_ClearFlag(SDIO_FLAG_STBITERR);  		//清中断标志
;;;1256   		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
;;;1257   	    TransferError = SD_START_BIT_ERR;
;;;1258   	    return(SD_START_BIT_ERR);
;;;1259   	}
;;;1260   	return(SD_OK);
;;;1261   }
00006a  bd10              POP      {r4,pc}
                  |L21.108|
00006c  e7ff              B        |L21.110|
                  |L21.110|
00006e  2002              MOVS     r0,#2                 ;1225
000070  f7fffffe          BL       SDIO_GetFlagStatus
000074  b178              CBZ      r0,|L21.150|
000076  2002              MOVS     r0,#2                 ;1227
000078  f7fffffe          BL       SDIO_ClearFlag
00007c  4833              LDR      r0,|L21.332|
00007e  1d00              ADDS     r0,r0,#4              ;1228
000080  6800              LDR      r0,[r0,#0]            ;1228
000082  f24c313a          MOV      r1,#0xc33a            ;1228
000086  4388              BICS     r0,r0,r1              ;1228
000088  4930              LDR      r1,|L21.332|
00008a  1d09              ADDS     r1,r1,#4              ;1228
00008c  6008              STR      r0,[r1,#0]            ;1228
00008e  2002              MOVS     r0,#2                 ;1229
000090  492d              LDR      r1,|L21.328|
000092  7008              STRB     r0,[r1,#0]            ;1229
000094  e7e9              B        |L21.106|
                  |L21.150|
000096  2008              MOVS     r0,#8                 ;1232
000098  f7fffffe          BL       SDIO_GetFlagStatus
00009c  b178              CBZ      r0,|L21.190|
00009e  2008              MOVS     r0,#8                 ;1234
0000a0  f7fffffe          BL       SDIO_ClearFlag
0000a4  4829              LDR      r0,|L21.332|
0000a6  1d00              ADDS     r0,r0,#4              ;1235
0000a8  6800              LDR      r0,[r0,#0]            ;1235
0000aa  f24c313a          MOV      r1,#0xc33a            ;1235
0000ae  4388              BICS     r0,r0,r1              ;1235
0000b0  4926              LDR      r1,|L21.332|
0000b2  1d09              ADDS     r1,r1,#4              ;1235
0000b4  6008              STR      r0,[r1,#0]            ;1235
0000b6  2004              MOVS     r0,#4                 ;1236
0000b8  4923              LDR      r1,|L21.328|
0000ba  7008              STRB     r0,[r1,#0]            ;1236
0000bc  e7d5              B        |L21.106|
                  |L21.190|
0000be  2020              MOVS     r0,#0x20              ;1239
0000c0  f7fffffe          BL       SDIO_GetFlagStatus
0000c4  b178              CBZ      r0,|L21.230|
0000c6  2020              MOVS     r0,#0x20              ;1241
0000c8  f7fffffe          BL       SDIO_ClearFlag
0000cc  481f              LDR      r0,|L21.332|
0000ce  1d00              ADDS     r0,r0,#4              ;1242
0000d0  6800              LDR      r0,[r0,#0]            ;1242
0000d2  f24c313a          MOV      r1,#0xc33a            ;1242
0000d6  4388              BICS     r0,r0,r1              ;1242
0000d8  491c              LDR      r1,|L21.332|
0000da  1d09              ADDS     r1,r1,#4              ;1242
0000dc  6008              STR      r0,[r1,#0]            ;1242
0000de  2006              MOVS     r0,#6                 ;1243
0000e0  4919              LDR      r1,|L21.328|
0000e2  7008              STRB     r0,[r1,#0]            ;1243
0000e4  e7c1              B        |L21.106|
                  |L21.230|
0000e6  2010              MOVS     r0,#0x10              ;1246
0000e8  f7fffffe          BL       SDIO_GetFlagStatus
0000ec  b178              CBZ      r0,|L21.270|
0000ee  2010              MOVS     r0,#0x10              ;1248
0000f0  f7fffffe          BL       SDIO_ClearFlag
0000f4  4815              LDR      r0,|L21.332|
0000f6  1d00              ADDS     r0,r0,#4              ;1249
0000f8  6800              LDR      r0,[r0,#0]            ;1249
0000fa  f24c313a          MOV      r1,#0xc33a            ;1249
0000fe  4388              BICS     r0,r0,r1              ;1249
000100  4912              LDR      r1,|L21.332|
000102  1d09              ADDS     r1,r1,#4              ;1249
000104  6008              STR      r0,[r1,#0]            ;1249
000106  2005              MOVS     r0,#5                 ;1250
000108  490f              LDR      r1,|L21.328|
00010a  7008              STRB     r0,[r1,#0]            ;1250
00010c  e7ad              B        |L21.106|
                  |L21.270|
00010e  f44f7000          MOV      r0,#0x200             ;1253
000112  f7fffffe          BL       SDIO_GetFlagStatus
000116  b180              CBZ      r0,|L21.314|
000118  f44f7000          MOV      r0,#0x200             ;1255
00011c  f7fffffe          BL       SDIO_ClearFlag
000120  480a              LDR      r0,|L21.332|
000122  1d00              ADDS     r0,r0,#4              ;1256
000124  6800              LDR      r0,[r0,#0]            ;1256
000126  f24c313a          MOV      r1,#0xc33a            ;1256
00012a  4388              BICS     r0,r0,r1              ;1256
00012c  4907              LDR      r1,|L21.332|
00012e  1d09              ADDS     r1,r1,#4              ;1256
000130  6008              STR      r0,[r1,#0]            ;1256
000132  2007              MOVS     r0,#7                 ;1257
000134  4904              LDR      r1,|L21.328|
000136  7008              STRB     r0,[r1,#0]            ;1257
000138  e797              B        |L21.106|
                  |L21.314|
00013a  2000              MOVS     r0,#0                 ;1260
00013c  e795              B        |L21.106|
;;;1262     
                          ENDP

00013e  0000              DCW      0x0000
                  |L21.320|
                          DCD      StopCondition
                  |L21.324|
                          DCD      SDIO_CmdInitStructure
                  |L21.328|
                          DCD      TransferError
                  |L21.332|
                          DCD      0x40012c38
                  |L21.336|
                          DCD      TransferEnd

                          AREA ||i.SD_ReadBlock||, CODE, READONLY, ALIGN=2

                  SD_ReadBlock PROC
;;;551    //blksize:块大小
;;;552    SD_Error SD_ReadBlock(u8 *buf,long long addr,u16 blksize)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;553    {	  
000004  4681              MOV      r9,r0
000006  4617              MOV      r7,r2
000008  4698              MOV      r8,r3
00000a  9c0a              LDR      r4,[sp,#0x28]
;;;554    	SD_Error errorstatus=SD_OK;
00000c  f04f0a00          MOV      r10,#0
;;;555    	u8 power;
;;;556      u32 count=0,*tempbuff=(u32*)buf;//转换为u32指针 
000010  46d3              MOV      r11,r10
000012  464d              MOV      r5,r9
;;;557    	u32 timeout=SDIO_DATATIMEOUT;   
000014  f04f36ff          MOV      r6,#0xffffffff
;;;558      if(NULL==buf)
000018  f1b90f00          CMP      r9,#0
00001c  d102              BNE      |L22.36|
;;;559    		return SD_INVALID_PARAMETER; 
00001e  2026              MOVS     r0,#0x26
                  |L22.32|
;;;560      SDIO->DCTRL=0x0;	//数据控制寄存器清零(关DMA) 
;;;561      
;;;562    	if(CardType==SDIO_HIGH_CAPACITY_SD_CARD)//大容量卡
;;;563    	{
;;;564    		blksize=512;
;;;565    		addr>>=9;
;;;566    	}   
;;;567      	SDIO_DataInitStructure.SDIO_DataBlockSize= SDIO_DataBlockSize_1b ;//清除DPSM状态机配置
;;;568    	  SDIO_DataInitStructure.SDIO_DataLength= 0 ;
;;;569    	  SDIO_DataInitStructure.SDIO_DataTimeOut=SD_DATATIMEOUT ;
;;;570    	  SDIO_DataInitStructure.SDIO_DPSM=SDIO_DPSM_Enable;
;;;571    	  SDIO_DataInitStructure.SDIO_TransferDir=SDIO_TransferDir_ToCard;
;;;572    	  SDIO_DataInitStructure.SDIO_TransferMode=SDIO_TransferMode_Block;
;;;573        SDIO_DataConfig(&SDIO_DataInitStructure);
;;;574    	
;;;575    	
;;;576    	if(SDIO->RESP1&SD_CARD_LOCKED)return SD_LOCK_UNLOCK_FAILED;//卡锁了
;;;577    	if((blksize>0)&&(blksize<=2048)&&((blksize&(blksize-1))==0))
;;;578    	{
;;;579    		power=convert_from_bytes_to_power_of_two(blksize);	
;;;580    		
;;;581       
;;;582    		SDIO_CmdInitStructure.SDIO_Argument =  blksize;
;;;583        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;584        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;585        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;586        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;587        SDIO_SendCommand(&SDIO_CmdInitStructure);//发送CMD16+设置数据长度为blksize,短响应
;;;588    		
;;;589    		
;;;590    		errorstatus=CmdResp1Error(SD_CMD_SET_BLOCKLEN);	//等待R1响应 
;;;591    		
;;;592    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	
;;;593    		
;;;594    	}else return SD_INVALID_PARAMETER;	  	 
;;;595    	
;;;596    	  SDIO_DataInitStructure.SDIO_DataBlockSize= power<<4 ;//清除DPSM状态机配置
;;;597    	  SDIO_DataInitStructure.SDIO_DataLength= blksize ;
;;;598    	  SDIO_DataInitStructure.SDIO_DataTimeOut=SD_DATATIMEOUT ;
;;;599    	  SDIO_DataInitStructure.SDIO_DPSM=SDIO_DPSM_Enable;
;;;600    	  SDIO_DataInitStructure.SDIO_TransferDir=SDIO_TransferDir_ToSDIO;
;;;601    	  SDIO_DataInitStructure.SDIO_TransferMode=SDIO_TransferMode_Block;
;;;602        SDIO_DataConfig(&SDIO_DataInitStructure);
;;;603    	
;;;604    	  SDIO_CmdInitStructure.SDIO_Argument =  addr;
;;;605        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
;;;606        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;607        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;608        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;609        SDIO_SendCommand(&SDIO_CmdInitStructure);//发送CMD17+从addr地址出读取数据,短响应 
;;;610    	
;;;611    	errorstatus=CmdResp1Error(SD_CMD_READ_SINGLE_BLOCK);//等待R1响应   
;;;612    	if(errorstatus!=SD_OK)return errorstatus;   		//响应错误	 
;;;613     	if(DeviceMode==SD_POLLING_MODE)						//查询模式,轮询数据	 
;;;614    	{
;;;615     		INTX_DISABLE();//关闭总中断(POLLING模式,严禁中断打断SDIO读写操作!!!)
;;;616    		while(!(SDIO->STA&((1<<5)|(1<<1)|(1<<3)|(1<<10)|(1<<9))))//无上溢/CRC/超时/完成(标志)/起始位错误
;;;617    		{
;;;618    			if(SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)						//接收区半满,表示至少存了8个字
;;;619    			{
;;;620    				for(count=0;count<8;count++)			//循环读取数据
;;;621    				{
;;;622    					*(tempbuff+count)=SDIO->FIFO;
;;;623    				}
;;;624    				tempbuff+=8;	 
;;;625    				timeout=0X7FFFFF; 	//读数据溢出时间
;;;626    			}else 	//处理超时
;;;627    			{
;;;628    				if(timeout==0)return SD_DATA_TIMEOUT;
;;;629    				timeout--;
;;;630    			}
;;;631    		} 
;;;632    		if(SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)		//数据超时错误
;;;633    		{										   
;;;634    	 		SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT); 	//清错误标志
;;;635    			return SD_DATA_TIMEOUT;
;;;636    	 	}else if(SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)	//数据块CRC错误
;;;637    		{
;;;638    	 		SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);  		//清错误标志
;;;639    			return SD_DATA_CRC_FAIL;		   
;;;640    		}else if(SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET) 	//接收fifo上溢错误
;;;641    		{
;;;642    	 		SDIO_ClearFlag(SDIO_FLAG_RXOVERR);		//清错误标志
;;;643    			return SD_RX_OVERRUN;		 
;;;644    		}else if(SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET) 	//接收起始位错误
;;;645    		{
;;;646    	 		SDIO_ClearFlag(SDIO_FLAG_STBITERR);//清错误标志
;;;647    			return SD_START_BIT_ERR;		 
;;;648    		}   
;;;649    		while(SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)	//FIFO里面,还存在可用数据
;;;650    		{
;;;651    			*tempbuff=SDIO->FIFO;	//循环读取数据
;;;652    			tempbuff++;
;;;653    		}
;;;654    		INTX_ENABLE();//开启总中断
;;;655    		SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;656    	 
;;;657    	}else if(DeviceMode==SD_DMA_MODE)
;;;658    	{
;;;659     		TransferError=SD_OK;
;;;660    		StopCondition=0;			//单块读,不需要发送停止传输指令
;;;661    		TransferEnd=0;				//传输结束标置位，在中断服务置1
;;;662    		SDIO->MASK|=(1<<1)|(1<<3)|(1<<8)|(1<<5)|(1<<9);	//配置需要的中断 
;;;663    	 	SDIO->DCTRL|=1<<3;		 	//SDIO DMA使能 
;;;664     	    SD_DMA_Config((u32*)buf,blksize,DMA_DIR_PeripheralToMemory); 
;;;665     		while(((DMA2->LISR&(1<<27))==RESET)&&(TransferEnd==0)&&(TransferError==SD_OK)&&timeout)timeout--;//等待传输完成 
;;;666    		if(timeout==0)return SD_DATA_TIMEOUT;//超时
;;;667    		if(TransferError!=SD_OK)errorstatus=TransferError;  
;;;668        }   
;;;669     	return errorstatus; 
;;;670    }
000020  e8bd8ff8          POP      {r3-r11,pc}
                  |L22.36|
000024  2000              MOVS     r0,#0                 ;560
000026  4986              LDR      r1,|L22.576|
000028  6008              STR      r0,[r1,#0]            ;560
00002a  4886              LDR      r0,|L22.580|
00002c  7800              LDRB     r0,[r0,#0]            ;562  ; CardType
00002e  2802              CMP      r0,#2                 ;562
000030  d105              BNE      |L22.62|
000032  0204              LSLS     r4,r0,#8              ;564
000034  0a78              LSRS     r0,r7,#9              ;565
000036  ea4057c8          ORR      r7,r0,r8,LSL #23      ;565
00003a  ea4f2868          ASR      r8,r8,#9              ;565
                  |L22.62|
00003e  2000              MOVS     r0,#0                 ;567
000040  4981              LDR      r1,|L22.584|
000042  6088              STR      r0,[r1,#8]            ;567  ; SDIO_DataInitStructure
000044  6048              STR      r0,[r1,#4]            ;568  ; SDIO_DataInitStructure
000046  1e40              SUBS     r0,r0,#1              ;569
000048  6008              STR      r0,[r1,#0]            ;569  ; SDIO_DataInitStructure
00004a  2001              MOVS     r0,#1                 ;570
00004c  6148              STR      r0,[r1,#0x14]         ;570  ; SDIO_DataInitStructure
00004e  2000              MOVS     r0,#0                 ;571
000050  60c8              STR      r0,[r1,#0xc]          ;571  ; SDIO_DataInitStructure
000052  6108              STR      r0,[r1,#0x10]         ;572  ; SDIO_DataInitStructure
000054  4608              MOV      r0,r1                 ;573
000056  f7fffffe          BL       SDIO_DataConfig
00005a  4879              LDR      r0,|L22.576|
00005c  3818              SUBS     r0,r0,#0x18           ;576
00005e  6800              LDR      r0,[r0,#0]            ;576
000060  f0007000          AND      r0,r0,#0x2000000      ;576
000064  b108              CBZ      r0,|L22.106|
000066  200e              MOVS     r0,#0xe               ;576
000068  e7da              B        |L22.32|
                  |L22.106|
00006a  2c00              CMP      r4,#0                 ;577
00006c  dd21              BLE      |L22.178|
00006e  f5b46f00          CMP      r4,#0x800             ;577
000072  dc1e              BGT      |L22.178|
000074  1e60              SUBS     r0,r4,#1              ;577
000076  4020              ANDS     r0,r0,r4              ;577
000078  b9d8              CBNZ     r0,|L22.178|
00007a  4620              MOV      r0,r4                 ;579
00007c  f7fffffe          BL       convert_from_bytes_to_power_of_two
000080  9000              STR      r0,[sp,#0]            ;579
000082  4872              LDR      r0,|L22.588|
000084  6004              STR      r4,[r0,#0]            ;582  ; SDIO_CmdInitStructure
000086  2010              MOVS     r0,#0x10              ;583
000088  4970              LDR      r1,|L22.588|
00008a  6048              STR      r0,[r1,#4]            ;583  ; SDIO_CmdInitStructure
00008c  2040              MOVS     r0,#0x40              ;584
00008e  6088              STR      r0,[r1,#8]            ;584  ; SDIO_CmdInitStructure
000090  2000              MOVS     r0,#0                 ;585
000092  60c8              STR      r0,[r1,#0xc]          ;585  ; SDIO_CmdInitStructure
000094  f44f6080          MOV      r0,#0x400             ;586
000098  6108              STR      r0,[r1,#0x10]         ;586  ; SDIO_CmdInitStructure
00009a  4608              MOV      r0,r1                 ;587
00009c  f7fffffe          BL       SDIO_SendCommand
0000a0  2010              MOVS     r0,#0x10              ;590
0000a2  f7fffffe          BL       CmdResp1Error
0000a6  4682              MOV      r10,r0                ;590
0000a8  f1ba0f00          CMP      r10,#0                ;592
0000ac  d003              BEQ      |L22.182|
0000ae  4650              MOV      r0,r10                ;592
0000b0  e7b6              B        |L22.32|
                  |L22.178|
0000b2  2026              MOVS     r0,#0x26              ;594
0000b4  e7b4              B        |L22.32|
                  |L22.182|
0000b6  9800              LDR      r0,[sp,#0]            ;596
0000b8  0100              LSLS     r0,r0,#4              ;596
0000ba  4963              LDR      r1,|L22.584|
0000bc  6088              STR      r0,[r1,#8]            ;596  ; SDIO_DataInitStructure
0000be  4608              MOV      r0,r1                 ;597
0000c0  6044              STR      r4,[r0,#4]            ;597  ; SDIO_DataInitStructure
0000c2  f04f30ff          MOV      r0,#0xffffffff        ;598
0000c6  6008              STR      r0,[r1,#0]            ;598  ; SDIO_DataInitStructure
0000c8  2001              MOVS     r0,#1                 ;599
0000ca  6148              STR      r0,[r1,#0x14]         ;599  ; SDIO_DataInitStructure
0000cc  2002              MOVS     r0,#2                 ;600
0000ce  60c8              STR      r0,[r1,#0xc]          ;600  ; SDIO_DataInitStructure
0000d0  2000              MOVS     r0,#0                 ;601
0000d2  6108              STR      r0,[r1,#0x10]         ;601  ; SDIO_DataInitStructure
0000d4  4608              MOV      r0,r1                 ;602
0000d6  f7fffffe          BL       SDIO_DataConfig
0000da  485c              LDR      r0,|L22.588|
0000dc  6007              STR      r7,[r0,#0]            ;604  ; SDIO_CmdInitStructure
0000de  2011              MOVS     r0,#0x11              ;605
0000e0  495a              LDR      r1,|L22.588|
0000e2  6048              STR      r0,[r1,#4]            ;605  ; SDIO_CmdInitStructure
0000e4  2040              MOVS     r0,#0x40              ;606
0000e6  6088              STR      r0,[r1,#8]            ;606  ; SDIO_CmdInitStructure
0000e8  2000              MOVS     r0,#0                 ;607
0000ea  60c8              STR      r0,[r1,#0xc]          ;607  ; SDIO_CmdInitStructure
0000ec  f44f6080          MOV      r0,#0x400             ;608
0000f0  6108              STR      r0,[r1,#0x10]         ;608  ; SDIO_CmdInitStructure
0000f2  4608              MOV      r0,r1                 ;609
0000f4  f7fffffe          BL       SDIO_SendCommand
0000f8  2011              MOVS     r0,#0x11              ;611
0000fa  f7fffffe          BL       CmdResp1Error
0000fe  4682              MOV      r10,r0                ;611
000100  f1ba0f00          CMP      r10,#0                ;612
000104  d001              BEQ      |L22.266|
000106  4650              MOV      r0,r10                ;612
000108  e78a              B        |L22.32|
                  |L22.266|
00010a  4851              LDR      r0,|L22.592|
00010c  7800              LDRB     r0,[r0,#0]            ;613  ; DeviceMode
00010e  2800              CMP      r0,#0                 ;613
000110  d15c              BNE      |L22.460|
000112  f7fffffe          BL       INTX_DISABLE
000116  e018              B        |L22.330|
                  |L22.280|
000118  f44f4000          MOV      r0,#0x8000            ;618
00011c  f7fffffe          BL       SDIO_GetFlagStatus
000120  b178              CBZ      r0,|L22.322|
000122  f04f0b00          MOV      r11,#0                ;620
000126  e006              B        |L22.310|
                  |L22.296|
000128  4845              LDR      r0,|L22.576|
00012a  3054              ADDS     r0,r0,#0x54           ;622
00012c  6800              LDR      r0,[r0,#0]            ;622
00012e  f845002b          STR      r0,[r5,r11,LSL #2]    ;622
000132  f10b0b01          ADD      r11,r11,#1            ;620
                  |L22.310|
000136  f1bb0f08          CMP      r11,#8                ;620
00013a  d3f5              BCC      |L22.296|
00013c  3520              ADDS     r5,r5,#0x20           ;624
00013e  4e45              LDR      r6,|L22.596|
000140  e003              B        |L22.330|
                  |L22.322|
000142  b90e              CBNZ     r6,|L22.328|
000144  2004              MOVS     r0,#4                 ;628
000146  e76b              B        |L22.32|
                  |L22.328|
000148  1e76              SUBS     r6,r6,#1              ;629
                  |L22.330|
00014a  483d              LDR      r0,|L22.576|
00014c  3008              ADDS     r0,r0,#8              ;616
00014e  6800              LDR      r0,[r0,#0]            ;616
000150  f240612a          MOV      r1,#0x62a             ;616
000154  4008              ANDS     r0,r0,r1              ;616
000156  2800              CMP      r0,#0                 ;616
000158  d0de              BEQ      |L22.280|
00015a  2008              MOVS     r0,#8                 ;632
00015c  f7fffffe          BL       SDIO_GetFlagStatus
000160  b120              CBZ      r0,|L22.364|
000162  2008              MOVS     r0,#8                 ;634
000164  f7fffffe          BL       SDIO_ClearFlag
000168  2004              MOVS     r0,#4                 ;635
00016a  e759              B        |L22.32|
                  |L22.364|
00016c  2002              MOVS     r0,#2                 ;636
00016e  f7fffffe          BL       SDIO_GetFlagStatus
000172  b120              CBZ      r0,|L22.382|
000174  2002              MOVS     r0,#2                 ;638
000176  f7fffffe          BL       SDIO_ClearFlag
00017a  2002              MOVS     r0,#2                 ;639
00017c  e750              B        |L22.32|
                  |L22.382|
00017e  2020              MOVS     r0,#0x20              ;640
000180  f7fffffe          BL       SDIO_GetFlagStatus
000184  b120              CBZ      r0,|L22.400|
000186  2020              MOVS     r0,#0x20              ;642
000188  f7fffffe          BL       SDIO_ClearFlag
00018c  2006              MOVS     r0,#6                 ;643
00018e  e747              B        |L22.32|
                  |L22.400|
000190  f44f7000          MOV      r0,#0x200             ;644
000194  f7fffffe          BL       SDIO_GetFlagStatus
000198  b128              CBZ      r0,|L22.422|
00019a  f44f7000          MOV      r0,#0x200             ;646
00019e  f7fffffe          BL       SDIO_ClearFlag
0001a2  2007              MOVS     r0,#7                 ;647
0001a4  e73c              B        |L22.32|
                  |L22.422|
0001a6  e004              B        |L22.434|
                  |L22.424|
0001a8  4825              LDR      r0,|L22.576|
0001aa  3054              ADDS     r0,r0,#0x54           ;651
0001ac  6800              LDR      r0,[r0,#0]            ;651
0001ae  6028              STR      r0,[r5,#0]            ;651
0001b0  1d2d              ADDS     r5,r5,#4              ;652
                  |L22.434|
0001b2  f44f1000          MOV      r0,#0x200000          ;649
0001b6  f7fffffe          BL       SDIO_GetFlagStatus
0001ba  2800              CMP      r0,#0                 ;649
0001bc  d1f4              BNE      |L22.424|
0001be  f7fffffe          BL       INTX_ENABLE
0001c2  f24050ff          MOV      r0,#0x5ff             ;655
0001c6  f7fffffe          BL       SDIO_ClearFlag
0001ca  e036              B        |L22.570|
                  |L22.460|
0001cc  4820              LDR      r0,|L22.592|
0001ce  7800              LDRB     r0,[r0,#0]            ;657  ; DeviceMode
0001d0  2801              CMP      r0,#1                 ;657
0001d2  d132              BNE      |L22.570|
0001d4  2000              MOVS     r0,#0                 ;659
0001d6  4920              LDR      r1,|L22.600|
0001d8  7008              STRB     r0,[r1,#0]            ;659
0001da  4920              LDR      r1,|L22.604|
0001dc  7008              STRB     r0,[r1,#0]            ;660
0001de  4920              LDR      r1,|L22.608|
0001e0  7008              STRB     r0,[r1,#0]            ;661
0001e2  4817              LDR      r0,|L22.576|
0001e4  3010              ADDS     r0,r0,#0x10           ;662
0001e6  6800              LDR      r0,[r0,#0]            ;662
0001e8  f240312a          MOV      r1,#0x32a             ;662
0001ec  4308              ORRS     r0,r0,r1              ;662
0001ee  4914              LDR      r1,|L22.576|
0001f0  3110              ADDS     r1,r1,#0x10           ;662
0001f2  6008              STR      r0,[r1,#0]            ;662
0001f4  4812              LDR      r0,|L22.576|
0001f6  6800              LDR      r0,[r0,#0]            ;663
0001f8  f0400008          ORR      r0,r0,#8              ;663
0001fc  4910              LDR      r1,|L22.576|
0001fe  6008              STR      r0,[r1,#0]            ;663
000200  2200              MOVS     r2,#0                 ;664
000202  4621              MOV      r1,r4                 ;664
000204  4648              MOV      r0,r9                 ;664
000206  f7fffffe          BL       SD_DMA_Config
00020a  e000              B        |L22.526|
                  |L22.524|
00020c  1e76              SUBS     r6,r6,#1              ;665
                  |L22.526|
00020e  4815              LDR      r0,|L22.612|
000210  6800              LDR      r0,[r0,#0]            ;665
000212  f0006000          AND      r0,r0,#0x8000000      ;665
000216  b938              CBNZ     r0,|L22.552|
000218  4811              LDR      r0,|L22.608|
00021a  7800              LDRB     r0,[r0,#0]            ;665  ; TransferEnd
00021c  b920              CBNZ     r0,|L22.552|
00021e  480e              LDR      r0,|L22.600|
000220  7800              LDRB     r0,[r0,#0]            ;665  ; TransferError
000222  b908              CBNZ     r0,|L22.552|
000224  2e00              CMP      r6,#0                 ;665
000226  d1f1              BNE      |L22.524|
                  |L22.552|
000228  b90e              CBNZ     r6,|L22.558|
00022a  2004              MOVS     r0,#4                 ;666
00022c  e6f8              B        |L22.32|
                  |L22.558|
00022e  480a              LDR      r0,|L22.600|
000230  7800              LDRB     r0,[r0,#0]            ;667  ; TransferError
000232  b110              CBZ      r0,|L22.570|
000234  4808              LDR      r0,|L22.600|
000236  f890a000          LDRB     r10,[r0,#0]           ;667  ; TransferError
                  |L22.570|
00023a  4650              MOV      r0,r10                ;669
00023c  e6f0              B        |L22.32|
;;;671    //SD卡读取多个块 
                          ENDP

00023e  0000              DCW      0x0000
                  |L22.576|
                          DCD      0x40012c2c
                  |L22.580|
                          DCD      CardType
                  |L22.584|
                          DCD      SDIO_DataInitStructure
                  |L22.588|
                          DCD      SDIO_CmdInitStructure
                  |L22.592|
                          DCD      DeviceMode
                  |L22.596|
                          DCD      0x007fffff
                  |L22.600|
                          DCD      TransferError
                  |L22.604|
                          DCD      StopCondition
                  |L22.608|
                          DCD      TransferEnd
                  |L22.612|
                          DCD      0x40026400

                          AREA ||i.SD_ReadDisk||, CODE, READONLY, ALIGN=2

                  SD_ReadDisk PROC
;;;1651   //返回值:错误状态;0,正常;其他,错误代码;				  				 
;;;1652   u8 SD_ReadDisk(u8*buf,u32 sector,u8 cnt)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;1653   {
000004  4683              MOV      r11,r0
000006  460c              MOV      r4,r1
000008  4691              MOV      r9,r2
;;;1654   	u8 sta=SD_OK;
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
;;;1655   	long long lsector=sector;
00000e  2600              MOVS     r6,#0
000010  4625              MOV      r5,r4
;;;1656   	u8 n;
;;;1657   	lsector<<=9;
000012  462c              MOV      r4,r5
000014  0270              LSLS     r0,r6,#9
000016  ea4056d5          ORR      r6,r0,r5,LSR #23
00001a  026d              LSLS     r5,r5,#9
;;;1658   	if((u32)buf%4!=0)
00001c  f00b0003          AND      r0,r11,#3
000020  b1f0              CBZ      r0,|L23.96|
;;;1659   	{
;;;1660   	 	for(n=0;n<cnt;n++)
000022  f04f0a00          MOV      r10,#0
000026  e018              B        |L23.90|
                  |L23.40|
;;;1661   		{
;;;1662   		 	sta=SD_ReadBlock(SDIO_DATA_BUFFER,lsector+512*n,512);//单个sector的读操作
000028  f44f7000          MOV      r0,#0x200
00002c  9000              STR      r0,[sp,#0]
00002e  ea4f204a          LSL      r0,r10,#9
000032  1947              ADDS     r7,r0,r5
000034  eb4673e0          ADC      r3,r6,r0,ASR #31
000038  463a              MOV      r2,r7
00003a  4816              LDR      r0,|L23.148|
00003c  f7fffffe          BL       SD_ReadBlock
000040  9002              STR      r0,[sp,#8]
;;;1663   			memcpy(buf,SDIO_DATA_BUFFER,512);
000042  f44f7200          MOV      r2,#0x200
000046  4913              LDR      r1,|L23.148|
000048  4658              MOV      r0,r11
00004a  f7fffffe          BL       __aeabi_memcpy
;;;1664   			buf+=512;
00004e  f50b7b00          ADD      r11,r11,#0x200
000052  f10a0001          ADD      r0,r10,#1             ;1660
000056  f0000aff          AND      r10,r0,#0xff          ;1660
                  |L23.90|
00005a  45ca              CMP      r10,r9                ;1660
00005c  dbe4              BLT      |L23.40|
00005e  e016              B        |L23.142|
                  |L23.96|
;;;1665   		} 
;;;1666   	}else
;;;1667   	{
;;;1668   		if(cnt==1)sta=SD_ReadBlock(buf,lsector,512);    	//单个sector的读操作
000060  f1b90f01          CMP      r9,#1
000064  d109              BNE      |L23.122|
000066  f44f7000          MOV      r0,#0x200
00006a  462a              MOV      r2,r5
00006c  4633              MOV      r3,r6
00006e  9000              STR      r0,[sp,#0]
000070  4658              MOV      r0,r11
000072  f7fffffe          BL       SD_ReadBlock
000076  9002              STR      r0,[sp,#8]
000078  e009              B        |L23.142|
                  |L23.122|
;;;1669   		else sta=SD_ReadMultiBlocks(buf,lsector,512,cnt);//多个sector  
00007a  f44f7000          MOV      r0,#0x200
00007e  462a              MOV      r2,r5
000080  4633              MOV      r3,r6
000082  e9cd0900          STRD     r0,r9,[sp,#0]
000086  4658              MOV      r0,r11
000088  f7fffffe          BL       SD_ReadMultiBlocks
00008c  9002              STR      r0,[sp,#8]
                  |L23.142|
;;;1670   	}
;;;1671   	return sta;
00008e  9802              LDR      r0,[sp,#8]
;;;1672   }
000090  e8bd8ffe          POP      {r1-r11,pc}
;;;1673   //写SD卡
                          ENDP

                  |L23.148|
                          DCD      SDIO_DATA_BUFFER

                          AREA ||i.SD_ReadMultiBlocks||, CODE, READONLY, ALIGN=2

                  SD_ReadMultiBlocks PROC
;;;677    __align(4) u32 *tempbuff;
;;;678    SD_Error SD_ReadMultiBlocks(u8 *buf,long long addr,u16 blksize,u32 nblks)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;679    {
000004  4617              MOV      r7,r2
000006  4698              MOV      r8,r3
000008  e9dd460e          LDRD     r4,r6,[sp,#0x38]
;;;680      SD_Error errorstatus=SD_OK;
00000c  f04f0900          MOV      r9,#0
;;;681    	u8 power;
;;;682      u32 count=0;
000010  46ca              MOV      r10,r9
;;;683    	u32 timeout=SDIO_DATATIMEOUT;  
000012  f04f35ff          MOV      r5,#0xffffffff
;;;684    	tempbuff=(u32*)buf;//转换为u32指针
000016  49ac              LDR      r1,|L24.712|
000018  9800              LDR      r0,[sp,#0]
00001a  6008              STR      r0,[r1,#0]  ; tempbuff
;;;685    	
;;;686      SDIO->DCTRL=0x0;		//数据控制寄存器清零(关DMA)   
00001c  2000              MOVS     r0,#0
00001e  49ab              LDR      r1,|L24.716|
000020  6008              STR      r0,[r1,#0]
;;;687    	if(CardType==SDIO_HIGH_CAPACITY_SD_CARD)//大容量卡
000022  48ab              LDR      r0,|L24.720|
000024  7800              LDRB     r0,[r0,#0]  ; CardType
000026  2802              CMP      r0,#2
000028  d105              BNE      |L24.54|
;;;688    	{
;;;689    		blksize=512;
00002a  0204              LSLS     r4,r0,#8
;;;690    		addr>>=9;
00002c  0a78              LSRS     r0,r7,#9
00002e  ea4057c8          ORR      r7,r0,r8,LSL #23
000032  ea4f2868          ASR      r8,r8,#9
                  |L24.54|
;;;691    	}  
;;;692    	
;;;693    	  SDIO_DataInitStructure.SDIO_DataBlockSize= 0; ;//清除DPSM状态机配置
000036  2000              MOVS     r0,#0
000038  49a6              LDR      r1,|L24.724|
00003a  6088              STR      r0,[r1,#8]  ; SDIO_DataInitStructure
;;;694    	  SDIO_DataInitStructure.SDIO_DataLength= 0 ;
00003c  6048              STR      r0,[r1,#4]  ; SDIO_DataInitStructure
;;;695    	  SDIO_DataInitStructure.SDIO_DataTimeOut=SD_DATATIMEOUT ;
00003e  1e40              SUBS     r0,r0,#1
000040  6008              STR      r0,[r1,#0]  ; SDIO_DataInitStructure
;;;696    	  SDIO_DataInitStructure.SDIO_DPSM=SDIO_DPSM_Enable;
000042  2001              MOVS     r0,#1
000044  6148              STR      r0,[r1,#0x14]  ; SDIO_DataInitStructure
;;;697    	  SDIO_DataInitStructure.SDIO_TransferDir=SDIO_TransferDir_ToCard;
000046  2000              MOVS     r0,#0
000048  60c8              STR      r0,[r1,#0xc]  ; SDIO_DataInitStructure
;;;698    	  SDIO_DataInitStructure.SDIO_TransferMode=SDIO_TransferMode_Block;
00004a  6108              STR      r0,[r1,#0x10]  ; SDIO_DataInitStructure
;;;699        SDIO_DataConfig(&SDIO_DataInitStructure);
00004c  4608              MOV      r0,r1
00004e  f7fffffe          BL       SDIO_DataConfig
;;;700    	
;;;701    	if(SDIO->RESP1&SD_CARD_LOCKED)return SD_LOCK_UNLOCK_FAILED;//卡锁了
000052  489e              LDR      r0,|L24.716|
000054  3818              SUBS     r0,r0,#0x18
000056  6800              LDR      r0,[r0,#0]
000058  f0007000          AND      r0,r0,#0x2000000
00005c  b118              CBZ      r0,|L24.102|
00005e  200e              MOVS     r0,#0xe
                  |L24.96|
;;;702    	if((blksize>0)&&(blksize<=2048)&&((blksize&(blksize-1))==0))
;;;703    	{
;;;704    		power=convert_from_bytes_to_power_of_two(blksize);	    
;;;705    		
;;;706    	  SDIO_CmdInitStructure.SDIO_Argument =  blksize;//发送CMD16+设置数据长度为blksize,短响应 
;;;707    		SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;708    		SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;709    		SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;710    		SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;711    		SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;712    		
;;;713    		errorstatus=CmdResp1Error(SD_CMD_SET_BLOCKLEN);	//等待R1响应  
;;;714    		
;;;715    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	 
;;;716    		
;;;717    	}else return SD_INVALID_PARAMETER;	  
;;;718    	
;;;719    	if(nblks>1)											//多块读  
;;;720    	{									    
;;;721     	  	if(nblks*blksize>SD_MAX_DATA_LENGTH)return SD_INVALID_PARAMETER;//判断是否超过最大接收长度 
;;;722    		
;;;723    		   SDIO_DataInitStructure.SDIO_DataBlockSize= power<<4; ;//nblks*blksize,512块大小,卡到控制器
;;;724    			 SDIO_DataInitStructure.SDIO_DataLength= nblks*blksize ;
;;;725    			 SDIO_DataInitStructure.SDIO_DataTimeOut=SD_DATATIMEOUT ;
;;;726    			 SDIO_DataInitStructure.SDIO_DPSM=SDIO_DPSM_Enable;
;;;727    			 SDIO_DataInitStructure.SDIO_TransferDir=SDIO_TransferDir_ToSDIO;
;;;728    			 SDIO_DataInitStructure.SDIO_TransferMode=SDIO_TransferMode_Block;
;;;729    			 SDIO_DataConfig(&SDIO_DataInitStructure);
;;;730    
;;;731           SDIO_CmdInitStructure.SDIO_Argument =  addr;//发送CMD18+从addr地址出读取数据,短响应 
;;;732    	     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_MULT_BLOCK;
;;;733    		   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;734    		   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;735    		   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;736    		   SDIO_SendCommand(&SDIO_CmdInitStructure);	
;;;737    		
;;;738    		errorstatus=CmdResp1Error(SD_CMD_READ_MULT_BLOCK);//等待R1响应 
;;;739    		
;;;740    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	 
;;;741    		
;;;742     		if(DeviceMode==SD_POLLING_MODE)
;;;743    		{
;;;744    			INTX_DISABLE();//关闭总中断(POLLING模式,严禁中断打断SDIO读写操作!!!)
;;;745    			while(!(SDIO->STA&((1<<5)|(1<<1)|(1<<3)|(1<<8)|(1<<9))))//无上溢/CRC/超时/完成(标志)/起始位错误
;;;746    			{
;;;747    				if(SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)						//接收区半满,表示至少存了8个字
;;;748    				{
;;;749    					for(count=0;count<8;count++)			//循环读取数据
;;;750    					{
;;;751    						*(tempbuff+count)=SDIO->FIFO;
;;;752    					}
;;;753    					tempbuff+=8;	 
;;;754    					timeout=0X7FFFFF; 	//读数据溢出时间
;;;755    				}else 	//处理超时
;;;756    				{
;;;757    					if(timeout==0)return SD_DATA_TIMEOUT;
;;;758    					timeout--;
;;;759    				}
;;;760    			}  
;;;761    		if(SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)		//数据超时错误
;;;762    		{										   
;;;763    	 		SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT); 	//清错误标志
;;;764    			return SD_DATA_TIMEOUT;
;;;765    	 	}else if(SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)	//数据块CRC错误
;;;766    		{
;;;767    	 		SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);  		//清错误标志
;;;768    			return SD_DATA_CRC_FAIL;		   
;;;769    		}else if(SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET) 	//接收fifo上溢错误
;;;770    		{
;;;771    	 		SDIO_ClearFlag(SDIO_FLAG_RXOVERR);		//清错误标志
;;;772    			return SD_RX_OVERRUN;		 
;;;773    		}else if(SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET) 	//接收起始位错误
;;;774    		{
;;;775    	 		SDIO_ClearFlag(SDIO_FLAG_STBITERR);//清错误标志
;;;776    			return SD_START_BIT_ERR;		 
;;;777    		}   
;;;778    	    
;;;779    		while(SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)	//FIFO里面,还存在可用数据
;;;780    		{
;;;781    			*tempbuff=SDIO->FIFO;	//循环读取数据
;;;782    			tempbuff++;
;;;783    		}
;;;784    	 		if(SDIO_GetFlagStatus(SDIO_FLAG_DATAEND) != RESET)		//接收结束
;;;785    			{
;;;786    				if((SDIO_STD_CAPACITY_SD_CARD_V1_1==CardType)||(SDIO_STD_CAPACITY_SD_CARD_V2_0==CardType)||(SDIO_HIGH_CAPACITY_SD_CARD==CardType))
;;;787    				{				
;;;788    					SDIO_CmdInitStructure.SDIO_Argument =  0;//发送CMD12+结束传输
;;;789    				  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_STOP_TRANSMISSION;
;;;790    					SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;791    					SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;792    					SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;793    					SDIO_SendCommand(&SDIO_CmdInitStructure);	
;;;794    					
;;;795    					errorstatus=CmdResp1Error(SD_CMD_STOP_TRANSMISSION);//等待R1响应   
;;;796    					
;;;797    					if(errorstatus!=SD_OK)return errorstatus;	 
;;;798    				}
;;;799     			}
;;;800    			INTX_ENABLE();//开启总中断
;;;801    	 		SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;802     		}else if(DeviceMode==SD_DMA_MODE)
;;;803    		{
;;;804    	   		TransferError=SD_OK;
;;;805    			StopCondition=1;			//多块读,需要发送停止传输指令 
;;;806    			TransferEnd=0;				//传输结束标置位，在中断服务置1
;;;807    			SDIO->MASK|=(1<<1)|(1<<3)|(1<<8)|(1<<5)|(1<<9);	//配置需要的中断 
;;;808    		 	SDIO->DCTRL|=1<<3;		 						//SDIO DMA使能 
;;;809    	 	    SD_DMA_Config((u32*)buf,nblks*blksize,DMA_DIR_PeripheralToMemory); 
;;;810    	 		while(((DMA2->LISR&(1<<27))==RESET)&&timeout)timeout--;//等待传输完成 
;;;811    			if(timeout==0)return SD_DATA_TIMEOUT;//超时
;;;812    			while((TransferEnd==0)&&(TransferError==SD_OK)); 
;;;813    			if(TransferError!=SD_OK)errorstatus=TransferError;  	 
;;;814    		}		 
;;;815      	}
;;;816    	return errorstatus;
;;;817    }			    																  
000060  b004              ADD      sp,sp,#0x10
000062  e8bd9ff0          POP      {r4-r12,pc}
                  |L24.102|
000066  2c00              CMP      r4,#0                 ;702
000068  dd21              BLE      |L24.174|
00006a  f5b46f00          CMP      r4,#0x800             ;702
00006e  dc1e              BGT      |L24.174|
000070  1e60              SUBS     r0,r4,#1              ;702
000072  4020              ANDS     r0,r0,r4              ;702
000074  b9d8              CBNZ     r0,|L24.174|
000076  4620              MOV      r0,r4                 ;704
000078  f7fffffe          BL       convert_from_bytes_to_power_of_two
00007c  4683              MOV      r11,r0                ;704
00007e  4896              LDR      r0,|L24.728|
000080  6004              STR      r4,[r0,#0]            ;706  ; SDIO_CmdInitStructure
000082  2010              MOVS     r0,#0x10              ;707
000084  4994              LDR      r1,|L24.728|
000086  6048              STR      r0,[r1,#4]            ;707  ; SDIO_CmdInitStructure
000088  2040              MOVS     r0,#0x40              ;708
00008a  6088              STR      r0,[r1,#8]            ;708  ; SDIO_CmdInitStructure
00008c  2000              MOVS     r0,#0                 ;709
00008e  60c8              STR      r0,[r1,#0xc]          ;709  ; SDIO_CmdInitStructure
000090  f44f6080          MOV      r0,#0x400             ;710
000094  6108              STR      r0,[r1,#0x10]         ;710  ; SDIO_CmdInitStructure
000096  4608              MOV      r0,r1                 ;711
000098  f7fffffe          BL       SDIO_SendCommand
00009c  2010              MOVS     r0,#0x10              ;713
00009e  f7fffffe          BL       CmdResp1Error
0000a2  4681              MOV      r9,r0                 ;713
0000a4  f1b90f00          CMP      r9,#0                 ;715
0000a8  d003              BEQ      |L24.178|
0000aa  4648              MOV      r0,r9                 ;715
0000ac  e7d8              B        |L24.96|
                  |L24.174|
0000ae  2026              MOVS     r0,#0x26              ;717
0000b0  e7d6              B        |L24.96|
                  |L24.178|
0000b2  2e01              CMP      r6,#1                 ;719
0000b4  d971              BLS      |L24.410|
0000b6  fb06f004          MUL      r0,r6,r4              ;721
0000ba  f1b07f00          CMP      r0,#0x2000000         ;721
0000be  d301              BCC      |L24.196|
0000c0  2026              MOVS     r0,#0x26              ;721
0000c2  e7cd              B        |L24.96|
                  |L24.196|
0000c4  ea4f100b          LSL      r0,r11,#4             ;723
0000c8  4982              LDR      r1,|L24.724|
0000ca  6088              STR      r0,[r1,#8]            ;723  ; SDIO_DataInitStructure
0000cc  fb06f004          MUL      r0,r6,r4              ;724
0000d0  6048              STR      r0,[r1,#4]            ;724  ; SDIO_DataInitStructure
0000d2  f04f30ff          MOV      r0,#0xffffffff        ;725
0000d6  6008              STR      r0,[r1,#0]            ;725  ; SDIO_DataInitStructure
0000d8  2001              MOVS     r0,#1                 ;726
0000da  6148              STR      r0,[r1,#0x14]         ;726  ; SDIO_DataInitStructure
0000dc  2002              MOVS     r0,#2                 ;727
0000de  60c8              STR      r0,[r1,#0xc]          ;727  ; SDIO_DataInitStructure
0000e0  2000              MOVS     r0,#0                 ;728
0000e2  6108              STR      r0,[r1,#0x10]         ;728  ; SDIO_DataInitStructure
0000e4  4608              MOV      r0,r1                 ;729
0000e6  f7fffffe          BL       SDIO_DataConfig
0000ea  487b              LDR      r0,|L24.728|
0000ec  6007              STR      r7,[r0,#0]            ;731  ; SDIO_CmdInitStructure
0000ee  2012              MOVS     r0,#0x12              ;732
0000f0  4979              LDR      r1,|L24.728|
0000f2  6048              STR      r0,[r1,#4]            ;732  ; SDIO_CmdInitStructure
0000f4  2040              MOVS     r0,#0x40              ;733
0000f6  6088              STR      r0,[r1,#8]            ;733  ; SDIO_CmdInitStructure
0000f8  2000              MOVS     r0,#0                 ;734
0000fa  60c8              STR      r0,[r1,#0xc]          ;734  ; SDIO_CmdInitStructure
0000fc  f44f6080          MOV      r0,#0x400             ;735
000100  6108              STR      r0,[r1,#0x10]         ;735  ; SDIO_CmdInitStructure
000102  4608              MOV      r0,r1                 ;736
000104  f7fffffe          BL       SDIO_SendCommand
000108  2012              MOVS     r0,#0x12              ;738
00010a  f7fffffe          BL       CmdResp1Error
00010e  4681              MOV      r9,r0                 ;738
000110  f1b90f00          CMP      r9,#0                 ;740
000114  d001              BEQ      |L24.282|
000116  4648              MOV      r0,r9                 ;740
000118  e7a2              B        |L24.96|
                  |L24.282|
00011a  4870              LDR      r0,|L24.732|
00011c  7800              LDRB     r0,[r0,#0]            ;742  ; DeviceMode
00011e  2800              CMP      r0,#0                 ;742
000120  d17e              BNE      |L24.544|
000122  f7fffffe          BL       INTX_DISABLE
000126  e01e              B        |L24.358|
                  |L24.296|
000128  f44f4000          MOV      r0,#0x8000            ;747
00012c  f7fffffe          BL       SDIO_GetFlagStatus
000130  b1a8              CBZ      r0,|L24.350|
000132  f04f0a00          MOV      r10,#0                ;749
000136  e008              B        |L24.330|
                  |L24.312|
000138  4864              LDR      r0,|L24.716|
00013a  3054              ADDS     r0,r0,#0x54           ;751
00013c  6800              LDR      r0,[r0,#0]            ;751
00013e  4962              LDR      r1,|L24.712|
000140  6809              LDR      r1,[r1,#0]            ;751  ; tempbuff
000142  f841002a          STR      r0,[r1,r10,LSL #2]    ;751
000146  f10a0a01          ADD      r10,r10,#1            ;749
                  |L24.330|
00014a  f1ba0f08          CMP      r10,#8                ;749
00014e  d3f3              BCC      |L24.312|
000150  485d              LDR      r0,|L24.712|
000152  6800              LDR      r0,[r0,#0]            ;753  ; tempbuff
000154  3020              ADDS     r0,r0,#0x20           ;753
000156  495c              LDR      r1,|L24.712|
000158  6008              STR      r0,[r1,#0]            ;753  ; tempbuff
00015a  4d61              LDR      r5,|L24.736|
00015c  e003              B        |L24.358|
                  |L24.350|
00015e  b90d              CBNZ     r5,|L24.356|
000160  2004              MOVS     r0,#4                 ;757
000162  e77d              B        |L24.96|
                  |L24.356|
000164  1e6d              SUBS     r5,r5,#1              ;758
                  |L24.358|
000166  4859              LDR      r0,|L24.716|
000168  3008              ADDS     r0,r0,#8              ;745
00016a  6800              LDR      r0,[r0,#0]            ;745
00016c  f240312a          MOV      r1,#0x32a             ;745
000170  4008              ANDS     r0,r0,r1              ;745
000172  2800              CMP      r0,#0                 ;745
000174  d0d8              BEQ      |L24.296|
000176  2008              MOVS     r0,#8                 ;761
000178  f7fffffe          BL       SDIO_GetFlagStatus
00017c  b120              CBZ      r0,|L24.392|
00017e  2008              MOVS     r0,#8                 ;763
000180  f7fffffe          BL       SDIO_ClearFlag
000184  2004              MOVS     r0,#4                 ;764
000186  e76b              B        |L24.96|
                  |L24.392|
000188  2002              MOVS     r0,#2                 ;765
00018a  f7fffffe          BL       SDIO_GetFlagStatus
00018e  b128              CBZ      r0,|L24.412|
000190  2002              MOVS     r0,#2                 ;767
000192  f7fffffe          BL       SDIO_ClearFlag
000196  2002              MOVS     r0,#2                 ;768
000198  e762              B        |L24.96|
                  |L24.410|
00019a  e092              B        |L24.706|
                  |L24.412|
00019c  2020              MOVS     r0,#0x20              ;769
00019e  f7fffffe          BL       SDIO_GetFlagStatus
0001a2  b120              CBZ      r0,|L24.430|
0001a4  2020              MOVS     r0,#0x20              ;771
0001a6  f7fffffe          BL       SDIO_ClearFlag
0001aa  2006              MOVS     r0,#6                 ;772
0001ac  e758              B        |L24.96|
                  |L24.430|
0001ae  f44f7000          MOV      r0,#0x200             ;773
0001b2  f7fffffe          BL       SDIO_GetFlagStatus
0001b6  b128              CBZ      r0,|L24.452|
0001b8  f44f7000          MOV      r0,#0x200             ;775
0001bc  f7fffffe          BL       SDIO_ClearFlag
0001c0  2007              MOVS     r0,#7                 ;776
0001c2  e74d              B        |L24.96|
                  |L24.452|
0001c4  e00a              B        |L24.476|
                  |L24.454|
0001c6  4841              LDR      r0,|L24.716|
0001c8  3054              ADDS     r0,r0,#0x54           ;781
0001ca  6800              LDR      r0,[r0,#0]            ;781
0001cc  493e              LDR      r1,|L24.712|
0001ce  6809              LDR      r1,[r1,#0]            ;781  ; tempbuff
0001d0  6008              STR      r0,[r1,#0]            ;781
0001d2  483d              LDR      r0,|L24.712|
0001d4  6800              LDR      r0,[r0,#0]            ;782  ; tempbuff
0001d6  1d00              ADDS     r0,r0,#4              ;782
0001d8  493b              LDR      r1,|L24.712|
0001da  6008              STR      r0,[r1,#0]            ;782  ; tempbuff
                  |L24.476|
0001dc  f44f1000          MOV      r0,#0x200000          ;779
0001e0  f7fffffe          BL       SDIO_GetFlagStatus
0001e4  2800              CMP      r0,#0                 ;779
0001e6  d1ee              BNE      |L24.454|
0001e8  f44f7080          MOV      r0,#0x100             ;784
0001ec  f7fffffe          BL       SDIO_GetFlagStatus
0001f0  b320              CBZ      r0,|L24.572|
0001f2  4837              LDR      r0,|L24.720|
0001f4  7800              LDRB     r0,[r0,#0]            ;786  ; CardType
0001f6  b138              CBZ      r0,|L24.520|
0001f8  4835              LDR      r0,|L24.720|
0001fa  7800              LDRB     r0,[r0,#0]            ;786  ; CardType
0001fc  2801              CMP      r0,#1                 ;786
0001fe  d003              BEQ      |L24.520|
000200  4833              LDR      r0,|L24.720|
000202  7800              LDRB     r0,[r0,#0]            ;786  ; CardType
000204  2802              CMP      r0,#2                 ;786
000206  d119              BNE      |L24.572|
                  |L24.520|
000208  2000              MOVS     r0,#0                 ;788
00020a  4933              LDR      r1,|L24.728|
00020c  6008              STR      r0,[r1,#0]            ;788  ; SDIO_CmdInitStructure
00020e  200c              MOVS     r0,#0xc               ;789
000210  6048              STR      r0,[r1,#4]            ;789  ; SDIO_CmdInitStructure
000212  2040              MOVS     r0,#0x40              ;790
000214  6088              STR      r0,[r1,#8]            ;790  ; SDIO_CmdInitStructure
000216  2000              MOVS     r0,#0                 ;791
000218  60c8              STR      r0,[r1,#0xc]          ;791  ; SDIO_CmdInitStructure
00021a  f44f6080          MOV      r0,#0x400             ;792
00021e  e000              B        |L24.546|
                  |L24.544|
000220  e013              B        |L24.586|
                  |L24.546|
000222  6108              STR      r0,[r1,#0x10]         ;792  ; SDIO_CmdInitStructure
000224  4608              MOV      r0,r1                 ;793
000226  f7fffffe          BL       SDIO_SendCommand
00022a  200c              MOVS     r0,#0xc               ;795
00022c  f7fffffe          BL       CmdResp1Error
000230  4681              MOV      r9,r0                 ;795
000232  f1b90f00          CMP      r9,#0                 ;797
000236  d001              BEQ      |L24.572|
000238  4648              MOV      r0,r9                 ;797
00023a  e711              B        |L24.96|
                  |L24.572|
00023c  f7fffffe          BL       INTX_ENABLE
000240  f24050ff          MOV      r0,#0x5ff             ;801
000244  f7fffffe          BL       SDIO_ClearFlag
000248  e03b              B        |L24.706|
                  |L24.586|
00024a  4824              LDR      r0,|L24.732|
00024c  7800              LDRB     r0,[r0,#0]            ;802  ; DeviceMode
00024e  2801              CMP      r0,#1                 ;802
000250  d137              BNE      |L24.706|
000252  2000              MOVS     r0,#0                 ;804
000254  4923              LDR      r1,|L24.740|
000256  7008              STRB     r0,[r1,#0]            ;804
000258  2001              MOVS     r0,#1                 ;805
00025a  4923              LDR      r1,|L24.744|
00025c  7008              STRB     r0,[r1,#0]            ;805
00025e  2000              MOVS     r0,#0                 ;806
000260  4922              LDR      r1,|L24.748|
000262  7008              STRB     r0,[r1,#0]            ;806
000264  4819              LDR      r0,|L24.716|
000266  3010              ADDS     r0,r0,#0x10           ;807
000268  6800              LDR      r0,[r0,#0]            ;807
00026a  f240312a          MOV      r1,#0x32a             ;807
00026e  4308              ORRS     r0,r0,r1              ;807
000270  4916              LDR      r1,|L24.716|
000272  3110              ADDS     r1,r1,#0x10           ;807
000274  6008              STR      r0,[r1,#0]            ;807
000276  4815              LDR      r0,|L24.716|
000278  6800              LDR      r0,[r0,#0]            ;808
00027a  f0400008          ORR      r0,r0,#8              ;808
00027e  4913              LDR      r1,|L24.716|
000280  6008              STR      r0,[r1,#0]            ;808
000282  fb06f104          MUL      r1,r6,r4              ;809
000286  2200              MOVS     r2,#0                 ;809
000288  9800              LDR      r0,[sp,#0]            ;809
00028a  f7fffffe          BL       SD_DMA_Config
00028e  e000              B        |L24.658|
                  |L24.656|
000290  1e6d              SUBS     r5,r5,#1              ;810
                  |L24.658|
000292  4817              LDR      r0,|L24.752|
000294  6800              LDR      r0,[r0,#0]            ;810
000296  f0006000          AND      r0,r0,#0x8000000      ;810
00029a  b908              CBNZ     r0,|L24.672|
00029c  2d00              CMP      r5,#0                 ;810
00029e  d1f7              BNE      |L24.656|
                  |L24.672|
0002a0  b90d              CBNZ     r5,|L24.678|
0002a2  2004              MOVS     r0,#4                 ;811
0002a4  e6dc              B        |L24.96|
                  |L24.678|
0002a6  bf00              NOP                            ;812
                  |L24.680|
0002a8  4810              LDR      r0,|L24.748|
0002aa  7800              LDRB     r0,[r0,#0]            ;812  ; TransferEnd
0002ac  b918              CBNZ     r0,|L24.694|
0002ae  480d              LDR      r0,|L24.740|
0002b0  7800              LDRB     r0,[r0,#0]            ;812  ; TransferError
0002b2  2800              CMP      r0,#0                 ;812
0002b4  d0f8              BEQ      |L24.680|
                  |L24.694|
0002b6  480b              LDR      r0,|L24.740|
0002b8  7800              LDRB     r0,[r0,#0]            ;813  ; TransferError
0002ba  b110              CBZ      r0,|L24.706|
0002bc  4809              LDR      r0,|L24.740|
0002be  f8909000          LDRB     r9,[r0,#0]            ;813  ; TransferError
                  |L24.706|
0002c2  4648              MOV      r0,r9                 ;816
0002c4  e6cc              B        |L24.96|
;;;818    //SD卡写1个块 
                          ENDP

0002c6  0000              DCW      0x0000
                  |L24.712|
                          DCD      tempbuff
                  |L24.716|
                          DCD      0x40012c2c
                  |L24.720|
                          DCD      CardType
                  |L24.724|
                          DCD      SDIO_DataInitStructure
                  |L24.728|
                          DCD      SDIO_CmdInitStructure
                  |L24.732|
                          DCD      DeviceMode
                  |L24.736|
                          DCD      0x007fffff
                  |L24.740|
                          DCD      TransferError
                  |L24.744|
                          DCD      StopCondition
                  |L24.748|
                          DCD      TransferEnd
                  |L24.752|
                          DCD      0x40026400

                          AREA ||i.SD_SelectDeselect||, CODE, READONLY, ALIGN=2

                  SD_SelectDeselect PROC
;;;535    //addr:卡的RCA地址
;;;536    SD_Error SD_SelectDeselect(u32 addr)
000000  b510              PUSH     {r4,lr}
;;;537    {
000002  4604              MOV      r4,r0
;;;538    
;;;539      SDIO_CmdInitStructure.SDIO_Argument =  addr;//发送CMD7,选择卡,短响应	
000004  4809              LDR      r0,|L25.44|
000006  6004              STR      r4,[r0,#0]  ; SDIO_CmdInitStructure
;;;540      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEL_DESEL_CARD;
000008  2007              MOVS     r0,#7
00000a  4908              LDR      r1,|L25.44|
00000c  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;541      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
00000e  2040              MOVS     r0,#0x40
000010  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;542      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000012  2000              MOVS     r0,#0
000014  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;543      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000016  f44f6080          MOV      r0,#0x400
00001a  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;544      SDIO_SendCommand(&SDIO_CmdInitStructure);//发送CMD7,选择卡,短响应
00001c  4608              MOV      r0,r1
00001e  f7fffffe          BL       SDIO_SendCommand
;;;545    	
;;;546     	return CmdResp1Error(SD_CMD_SEL_DESEL_CARD);	  
000022  2007              MOVS     r0,#7
000024  f7fffffe          BL       CmdResp1Error
;;;547    }
000028  bd10              POP      {r4,pc}
;;;548    //SD卡读取一个块 
                          ENDP

00002a  0000              DCW      0x0000
                  |L25.44|
                          DCD      SDIO_CmdInitStructure

                          AREA ||i.SD_SendStatus||, CODE, READONLY, ALIGN=2

                  SD_SendStatus PROC
;;;1485   //返回值:错误代码
;;;1486   SD_Error SD_SendStatus(uint32_t *pcardstatus)
000000  b570              PUSH     {r4-r6,lr}
;;;1487   {
000002  4604              MOV      r4,r0
;;;1488   	SD_Error errorstatus = SD_OK;
000004  2500              MOVS     r5,#0
;;;1489   	if(pcardstatus==NULL)
000006  b914              CBNZ     r4,|L26.14|
;;;1490   	{
;;;1491   		errorstatus=SD_INVALID_PARAMETER;
000008  2526              MOVS     r5,#0x26
;;;1492   		return errorstatus;
00000a  4628              MOV      r0,r5
                  |L26.12|
;;;1493   	}
;;;1494   	
;;;1495   	SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;//发送CMD13,短响应		 
;;;1496     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
;;;1497     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1498     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1499     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1500     SDIO_SendCommand(&SDIO_CmdInitStructure);	
;;;1501   	
;;;1502   	errorstatus=CmdResp1Error(SD_CMD_SEND_STATUS);	//查询响应状态 
;;;1503   	if(errorstatus!=SD_OK)return errorstatus;
;;;1504   	*pcardstatus=SDIO->RESP1;//读取响应值
;;;1505   	return errorstatus;
;;;1506   } 
00000c  bd70              POP      {r4-r6,pc}
                  |L26.14|
00000e  480e              LDR      r0,|L26.72|
000010  8800              LDRH     r0,[r0,#0]            ;1495  ; RCA
000012  0400              LSLS     r0,r0,#16             ;1495
000014  490d              LDR      r1,|L26.76|
000016  6008              STR      r0,[r1,#0]            ;1495  ; SDIO_CmdInitStructure
000018  200d              MOVS     r0,#0xd               ;1496
00001a  6048              STR      r0,[r1,#4]            ;1496  ; SDIO_CmdInitStructure
00001c  2040              MOVS     r0,#0x40              ;1497
00001e  6088              STR      r0,[r1,#8]            ;1497  ; SDIO_CmdInitStructure
000020  2000              MOVS     r0,#0                 ;1498
000022  60c8              STR      r0,[r1,#0xc]          ;1498  ; SDIO_CmdInitStructure
000024  f44f6080          MOV      r0,#0x400             ;1499
000028  6108              STR      r0,[r1,#0x10]         ;1499  ; SDIO_CmdInitStructure
00002a  4608              MOV      r0,r1                 ;1500
00002c  f7fffffe          BL       SDIO_SendCommand
000030  200d              MOVS     r0,#0xd               ;1502
000032  f7fffffe          BL       CmdResp1Error
000036  4605              MOV      r5,r0                 ;1502
000038  b10d              CBZ      r5,|L26.62|
00003a  4628              MOV      r0,r5                 ;1503
00003c  e7e6              B        |L26.12|
                  |L26.62|
00003e  4804              LDR      r0,|L26.80|
000040  6800              LDR      r0,[r0,#0]            ;1504
000042  6020              STR      r0,[r4,#0]            ;1504
000044  4628              MOV      r0,r5                 ;1505
000046  e7e1              B        |L26.12|
;;;1507   //返回SD卡的状态
                          ENDP

                  |L26.72|
                          DCD      ||RCA||
                  |L26.76|
                          DCD      SDIO_CmdInitStructure
                  |L26.80|
                          DCD      0x40012c14

                          AREA ||i.SD_SetDeviceMode||, CODE, READONLY, ALIGN=2

                  SD_SetDeviceMode PROC
;;;525    //返回值:错误状态
;;;526    SD_Error SD_SetDeviceMode(u32 Mode)
000000  4601              MOV      r1,r0
;;;527    {
;;;528    	SD_Error errorstatus = SD_OK;
000002  2000              MOVS     r0,#0
;;;529     	if((Mode==SD_DMA_MODE)||(Mode==SD_POLLING_MODE))DeviceMode=Mode;
000004  2901              CMP      r1,#1
000006  d000              BEQ      |L27.10|
000008  b911              CBNZ     r1,|L27.16|
                  |L27.10|
00000a  4b02              LDR      r3,|L27.20|
00000c  7019              STRB     r1,[r3,#0]
00000e  e000              B        |L27.18|
                  |L27.16|
;;;530    	else errorstatus=SD_INVALID_PARAMETER;
000010  2026              MOVS     r0,#0x26
                  |L27.18|
;;;531    	return errorstatus;	    
;;;532    }
000012  4770              BX       lr
;;;533    //选卡
                          ENDP

                  |L27.20|
                          DCD      DeviceMode

                          AREA ||i.SD_WriteBlock||, CODE, READONLY, ALIGN=2

                  SD_WriteBlock PROC
;;;822    //返回值:错误状态
;;;823    SD_Error SD_WriteBlock(u8 *buf,long long addr,  u16 blksize)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;824    {
000004  b086              SUB      sp,sp,#0x18
000006  4617              MOV      r7,r2
000008  4698              MOV      r8,r3
00000a  9d14              LDR      r5,[sp,#0x50]
;;;825    	SD_Error errorstatus = SD_OK;
00000c  2600              MOVS     r6,#0
;;;826    	
;;;827    	u8  power=0,cardstate=0;
00000e  2000              MOVS     r0,#0
000010  9005              STR      r0,[sp,#0x14]
000012  9004              STR      r0,[sp,#0x10]
;;;828    	
;;;829    	u32 timeout=0,bytestransferred=0;
000014  2400              MOVS     r4,#0
000016  4681              MOV      r9,r0
;;;830    	
;;;831    	u32 cardstatus=0,count=0,restwords=0;
000018  9003              STR      r0,[sp,#0xc]
00001a  4682              MOV      r10,r0
00001c  9002              STR      r0,[sp,#8]
;;;832    	
;;;833    	u32	tlen=blksize;						//总长度(字节)
00001e  9501              STR      r5,[sp,#4]
;;;834    	
;;;835    	u32*tempbuff=(u32*)buf;					
000020  f8ddb018          LDR      r11,[sp,#0x18]
;;;836    	
;;;837     	if(buf==NULL)return SD_INVALID_PARAMETER;//参数错误  
000024  f8ddb018          LDR      r11,[sp,#0x18]
000028  f1bb0f00          CMP      r11,#0
00002c  d103              BNE      |L28.54|
00002e  2026              MOVS     r0,#0x26
                  |L28.48|
;;;838    	
;;;839      SDIO->DCTRL=0x0;							//数据控制寄存器清零(关DMA)
;;;840    	
;;;841    	SDIO_DataInitStructure.SDIO_DataBlockSize= 0; ;//清除DPSM状态机配置
;;;842    	SDIO_DataInitStructure.SDIO_DataLength= 0 ;
;;;843    	SDIO_DataInitStructure.SDIO_DataTimeOut=SD_DATATIMEOUT ;
;;;844    	SDIO_DataInitStructure.SDIO_DPSM=SDIO_DPSM_Enable;
;;;845    	SDIO_DataInitStructure.SDIO_TransferDir=SDIO_TransferDir_ToCard;
;;;846    	SDIO_DataInitStructure.SDIO_TransferMode=SDIO_TransferMode_Block;
;;;847      SDIO_DataConfig(&SDIO_DataInitStructure);
;;;848    	
;;;849    	
;;;850    	if(SDIO->RESP1&SD_CARD_LOCKED)return SD_LOCK_UNLOCK_FAILED;//卡锁了
;;;851     	if(CardType==SDIO_HIGH_CAPACITY_SD_CARD)	//大容量卡
;;;852    	{
;;;853    		blksize=512;
;;;854    		addr>>=9;
;;;855    	}    
;;;856    	if((blksize>0)&&(blksize<=2048)&&((blksize&(blksize-1))==0))
;;;857    	{
;;;858    		power=convert_from_bytes_to_power_of_two(blksize);	
;;;859    		
;;;860    		SDIO_CmdInitStructure.SDIO_Argument = blksize;//发送CMD16+设置数据长度为blksize,短响应 	
;;;861    		SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;862    		SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;863    		SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;864    		SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;865    		SDIO_SendCommand(&SDIO_CmdInitStructure);	
;;;866    		
;;;867    		errorstatus=CmdResp1Error(SD_CMD_SET_BLOCKLEN);	//等待R1响应  
;;;868    		
;;;869    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	 
;;;870    		
;;;871    	}else return SD_INVALID_PARAMETER;	
;;;872    	
;;;873    			SDIO_CmdInitStructure.SDIO_Argument = (u32)RCA<<16;//发送CMD13,查询卡的状态,短响应 	
;;;874    		  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
;;;875    			SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;876    			SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;877    			SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;878    			SDIO_SendCommand(&SDIO_CmdInitStructure);	
;;;879    
;;;880    	  errorstatus=CmdResp1Error(SD_CMD_SEND_STATUS);		//等待R1响应  
;;;881    	
;;;882    	if(errorstatus!=SD_OK)return errorstatus;
;;;883    	cardstatus=SDIO->RESP1;													  
;;;884    	timeout=SD_DATATIMEOUT;
;;;885       	while(((cardstatus&0x00000100)==0)&&(timeout>0)) 	//检查READY_FOR_DATA位是否置位
;;;886    	{
;;;887    		timeout--;  
;;;888    		
;;;889    		SDIO_CmdInitStructure.SDIO_Argument = (u32)RCA<<16;//发送CMD13,查询卡的状态,短响应
;;;890    		SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
;;;891    		SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;892    		SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;893    		SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;894    		SDIO_SendCommand(&SDIO_CmdInitStructure);	
;;;895    		
;;;896    		errorstatus=CmdResp1Error(SD_CMD_SEND_STATUS);	//等待R1响应   
;;;897    		
;;;898    		if(errorstatus!=SD_OK)return errorstatus;		
;;;899    		
;;;900    		cardstatus=SDIO->RESP1;													  
;;;901    	}
;;;902    	if(timeout==0)return SD_ERROR;
;;;903    
;;;904    			SDIO_CmdInitStructure.SDIO_Argument = addr;//发送CMD24,写单块指令,短响应 	
;;;905    			SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
;;;906    			SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;907    			SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;908    			SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;909    			SDIO_SendCommand(&SDIO_CmdInitStructure);	
;;;910    	
;;;911    	errorstatus=CmdResp1Error(SD_CMD_WRITE_SINGLE_BLOCK);//等待R1响应  
;;;912    	
;;;913    	if(errorstatus!=SD_OK)return errorstatus;   	 
;;;914    	
;;;915    	StopCondition=0;									//单块写,不需要发送停止传输指令 
;;;916    
;;;917    	SDIO_DataInitStructure.SDIO_DataBlockSize= power<<4; ;	//blksize, 控制器到卡	
;;;918    	SDIO_DataInitStructure.SDIO_DataLength= blksize ;
;;;919    	SDIO_DataInitStructure.SDIO_DataTimeOut=SD_DATATIMEOUT ;
;;;920    	SDIO_DataInitStructure.SDIO_DPSM=SDIO_DPSM_Enable;
;;;921    	SDIO_DataInitStructure.SDIO_TransferDir=SDIO_TransferDir_ToCard;
;;;922    	SDIO_DataInitStructure.SDIO_TransferMode=SDIO_TransferMode_Block;
;;;923      SDIO_DataConfig(&SDIO_DataInitStructure);
;;;924    	
;;;925    	
;;;926    	timeout=SDIO_DATATIMEOUT;
;;;927    	
;;;928    	if (DeviceMode == SD_POLLING_MODE)
;;;929    	{
;;;930    		INTX_DISABLE();//关闭总中断(POLLING模式,严禁中断打断SDIO读写操作!!!)
;;;931    		while(!(SDIO->STA&((1<<10)|(1<<4)|(1<<1)|(1<<3)|(1<<9))))//数据块发送成功/下溢/CRC/超时/起始位错误
;;;932    		{
;;;933    			if(SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)							//发送区半空,表示至少存了8个字
;;;934    			{
;;;935    				if((tlen-bytestransferred)<SD_HALFFIFOBYTES)//不够32字节了
;;;936    				{
;;;937    					restwords=((tlen-bytestransferred)%4==0)?((tlen-bytestransferred)/4):((tlen-bytestransferred)/4+1);
;;;938    					
;;;939    					for(count=0;count<restwords;count++,tempbuff++,bytestransferred+=4)
;;;940    					{
;;;941    						SDIO->FIFO=*tempbuff;
;;;942    					}
;;;943    				}else
;;;944    				{
;;;945    					for(count=0;count<8;count++)
;;;946    					{
;;;947    						SDIO->FIFO=*(tempbuff+count);
;;;948    					}
;;;949    					tempbuff+=8;
;;;950    					bytestransferred+=32;
;;;951    				}
;;;952    				timeout=0X3FFFFFFF;	//写数据溢出时间
;;;953    			}else
;;;954    			{
;;;955    				if(timeout==0)return SD_DATA_TIMEOUT;
;;;956    				timeout--;
;;;957    			}
;;;958    		} 
;;;959    		if(SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)		//数据超时错误
;;;960    		{										   
;;;961    	 		SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT); 	//清错误标志
;;;962    			return SD_DATA_TIMEOUT;
;;;963    	 	}else if(SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)	//数据块CRC错误
;;;964    		{
;;;965    	 		SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);  		//清错误标志
;;;966    			return SD_DATA_CRC_FAIL;		   
;;;967    		}else if(SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET) 	//接收fifo下溢错误
;;;968    		{
;;;969    	 		SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);		//清错误标志
;;;970    			return SD_TX_UNDERRUN;		 
;;;971    		}else if(SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET) 	//接收起始位错误
;;;972    		{
;;;973    	 		SDIO_ClearFlag(SDIO_FLAG_STBITERR);//清错误标志
;;;974    			return SD_START_BIT_ERR;		 
;;;975    		}   
;;;976    	      
;;;977    		INTX_ENABLE();//开启总中断
;;;978    		SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记  
;;;979    	}else if(DeviceMode==SD_DMA_MODE)
;;;980    	{
;;;981       		TransferError=SD_OK;
;;;982    		StopCondition=0;			//单块写,不需要发送停止传输指令 
;;;983    		TransferEnd=0;				//传输结束标置位，在中断服务置1
;;;984    		SDIO->MASK|=(1<<1)|(1<<3)|(1<<8)|(1<<4)|(1<<9);	//配置产生数据接收完成中断
;;;985    		SD_DMA_Config((u32*)buf,blksize,DMA_DIR_MemoryToPeripheral);				//SDIO DMA配置
;;;986     	 	SDIO->DCTRL|=1<<3;								//SDIO DMA使能.  
;;;987     		while(((DMA2->LISR&(1<<27))==RESET)&&timeout)timeout--;//等待传输完成 
;;;988    		if(timeout==0)
;;;989    		{
;;;990      			SD_Init();	 					//重新初始化SD卡,可以解决写入死机的问题
;;;991    			return SD_DATA_TIMEOUT;			//超时	 
;;;992     		}
;;;993    		timeout=SDIO_DATATIMEOUT;
;;;994    		while((TransferEnd==0)&&(TransferError==SD_OK)&&timeout)timeout--;
;;;995     		if(timeout==0)return SD_DATA_TIMEOUT;			//超时	 
;;;996      		if(TransferError!=SD_OK)return TransferError;
;;;997     	}  
;;;998     	SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;999     	errorstatus=IsCardProgramming(&cardstate);
;;;1000    	while((errorstatus==SD_OK)&&((cardstate==SD_CARD_PROGRAMMING)||(cardstate==SD_CARD_RECEIVING)))
;;;1001   	{
;;;1002   		errorstatus=IsCardProgramming(&cardstate);
;;;1003   	}   
;;;1004   	return errorstatus;
;;;1005   }
000030  b00a              ADD      sp,sp,#0x28
000032  e8bd9ff0          POP      {r4-r12,pc}
                  |L28.54|
000036  2000              MOVS     r0,#0                 ;839
000038  49c9              LDR      r1,|L28.864|
00003a  6008              STR      r0,[r1,#0]            ;839
00003c  49c9              LDR      r1,|L28.868|
00003e  6088              STR      r0,[r1,#8]            ;841  ; SDIO_DataInitStructure
000040  6048              STR      r0,[r1,#4]            ;842  ; SDIO_DataInitStructure
000042  1e40              SUBS     r0,r0,#1              ;843
000044  6008              STR      r0,[r1,#0]            ;843  ; SDIO_DataInitStructure
000046  2001              MOVS     r0,#1                 ;844
000048  6148              STR      r0,[r1,#0x14]         ;844  ; SDIO_DataInitStructure
00004a  2000              MOVS     r0,#0                 ;845
00004c  60c8              STR      r0,[r1,#0xc]          ;845  ; SDIO_DataInitStructure
00004e  6108              STR      r0,[r1,#0x10]         ;846  ; SDIO_DataInitStructure
000050  4608              MOV      r0,r1                 ;847
000052  f7fffffe          BL       SDIO_DataConfig
000056  48c2              LDR      r0,|L28.864|
000058  3818              SUBS     r0,r0,#0x18           ;850
00005a  6800              LDR      r0,[r0,#0]            ;850
00005c  f0007000          AND      r0,r0,#0x2000000      ;850
000060  b108              CBZ      r0,|L28.102|
000062  200e              MOVS     r0,#0xe               ;850
000064  e7e4              B        |L28.48|
                  |L28.102|
000066  48c0              LDR      r0,|L28.872|
000068  7800              LDRB     r0,[r0,#0]            ;851  ; CardType
00006a  2802              CMP      r0,#2                 ;851
00006c  d105              BNE      |L28.122|
00006e  0205              LSLS     r5,r0,#8              ;853
000070  0a78              LSRS     r0,r7,#9              ;854
000072  ea4057c8          ORR      r7,r0,r8,LSL #23      ;854
000076  ea4f2868          ASR      r8,r8,#9              ;854
                  |L28.122|
00007a  2d00              CMP      r5,#0                 ;856
00007c  dd1f              BLE      |L28.190|
00007e  f5b56f00          CMP      r5,#0x800             ;856
000082  dc1c              BGT      |L28.190|
000084  1e68              SUBS     r0,r5,#1              ;856
000086  4028              ANDS     r0,r0,r5              ;856
000088  b9c8              CBNZ     r0,|L28.190|
00008a  4628              MOV      r0,r5                 ;858
00008c  f7fffffe          BL       convert_from_bytes_to_power_of_two
000090  9005              STR      r0,[sp,#0x14]         ;858
000092  48b6              LDR      r0,|L28.876|
000094  6005              STR      r5,[r0,#0]            ;860  ; SDIO_CmdInitStructure
000096  2010              MOVS     r0,#0x10              ;861
000098  49b4              LDR      r1,|L28.876|
00009a  6048              STR      r0,[r1,#4]            ;861  ; SDIO_CmdInitStructure
00009c  2040              MOVS     r0,#0x40              ;862
00009e  6088              STR      r0,[r1,#8]            ;862  ; SDIO_CmdInitStructure
0000a0  2000              MOVS     r0,#0                 ;863
0000a2  60c8              STR      r0,[r1,#0xc]          ;863  ; SDIO_CmdInitStructure
0000a4  f44f6080          MOV      r0,#0x400             ;864
0000a8  6108              STR      r0,[r1,#0x10]         ;864  ; SDIO_CmdInitStructure
0000aa  4608              MOV      r0,r1                 ;865
0000ac  f7fffffe          BL       SDIO_SendCommand
0000b0  2010              MOVS     r0,#0x10              ;867
0000b2  f7fffffe          BL       CmdResp1Error
0000b6  4606              MOV      r6,r0                 ;867
0000b8  b11e              CBZ      r6,|L28.194|
0000ba  4630              MOV      r0,r6                 ;869
0000bc  e7b8              B        |L28.48|
                  |L28.190|
0000be  2026              MOVS     r0,#0x26              ;871
0000c0  e7b6              B        |L28.48|
                  |L28.194|
0000c2  48ab              LDR      r0,|L28.880|
0000c4  8800              LDRH     r0,[r0,#0]            ;873  ; RCA
0000c6  0400              LSLS     r0,r0,#16             ;873
0000c8  49a8              LDR      r1,|L28.876|
0000ca  6008              STR      r0,[r1,#0]            ;873  ; SDIO_CmdInitStructure
0000cc  200d              MOVS     r0,#0xd               ;874
0000ce  6048              STR      r0,[r1,#4]            ;874  ; SDIO_CmdInitStructure
0000d0  2040              MOVS     r0,#0x40              ;875
0000d2  6088              STR      r0,[r1,#8]            ;875  ; SDIO_CmdInitStructure
0000d4  2000              MOVS     r0,#0                 ;876
0000d6  60c8              STR      r0,[r1,#0xc]          ;876  ; SDIO_CmdInitStructure
0000d8  f44f6080          MOV      r0,#0x400             ;877
0000dc  6108              STR      r0,[r1,#0x10]         ;877  ; SDIO_CmdInitStructure
0000de  4608              MOV      r0,r1                 ;878
0000e0  f7fffffe          BL       SDIO_SendCommand
0000e4  200d              MOVS     r0,#0xd               ;880
0000e6  f7fffffe          BL       CmdResp1Error
0000ea  4606              MOV      r6,r0                 ;880
0000ec  b10e              CBZ      r6,|L28.242|
0000ee  4630              MOV      r0,r6                 ;882
0000f0  e79e              B        |L28.48|
                  |L28.242|
0000f2  489b              LDR      r0,|L28.864|
0000f4  3818              SUBS     r0,r0,#0x18           ;883
0000f6  6800              LDR      r0,[r0,#0]            ;883
0000f8  9003              STR      r0,[sp,#0xc]          ;883
0000fa  f04f34ff          MOV      r4,#0xffffffff        ;884
0000fe  e01c              B        |L28.314|
                  |L28.256|
000100  1e64              SUBS     r4,r4,#1              ;887
000102  489b              LDR      r0,|L28.880|
000104  8800              LDRH     r0,[r0,#0]            ;889  ; RCA
000106  0400              LSLS     r0,r0,#16             ;889
000108  4998              LDR      r1,|L28.876|
00010a  6008              STR      r0,[r1,#0]            ;889  ; SDIO_CmdInitStructure
00010c  200d              MOVS     r0,#0xd               ;890
00010e  6048              STR      r0,[r1,#4]            ;890  ; SDIO_CmdInitStructure
000110  2040              MOVS     r0,#0x40              ;891
000112  6088              STR      r0,[r1,#8]            ;891  ; SDIO_CmdInitStructure
000114  2000              MOVS     r0,#0                 ;892
000116  60c8              STR      r0,[r1,#0xc]          ;892  ; SDIO_CmdInitStructure
000118  f44f6080          MOV      r0,#0x400             ;893
00011c  6108              STR      r0,[r1,#0x10]         ;893  ; SDIO_CmdInitStructure
00011e  4608              MOV      r0,r1                 ;894
000120  f7fffffe          BL       SDIO_SendCommand
000124  200d              MOVS     r0,#0xd               ;896
000126  f7fffffe          BL       CmdResp1Error
00012a  4606              MOV      r6,r0                 ;896
00012c  b10e              CBZ      r6,|L28.306|
00012e  4630              MOV      r0,r6                 ;898
000130  e77e              B        |L28.48|
                  |L28.306|
000132  488b              LDR      r0,|L28.864|
000134  3818              SUBS     r0,r0,#0x18           ;900
000136  6800              LDR      r0,[r0,#0]            ;900
000138  9003              STR      r0,[sp,#0xc]          ;900
                  |L28.314|
00013a  9803              LDR      r0,[sp,#0xc]          ;885
00013c  f4007080          AND      r0,r0,#0x100          ;885
000140  b908              CBNZ     r0,|L28.326|
000142  2c00              CMP      r4,#0                 ;885
000144  d1dc              BNE      |L28.256|
                  |L28.326|
000146  b90c              CBNZ     r4,|L28.332|
000148  2029              MOVS     r0,#0x29              ;902
00014a  e771              B        |L28.48|
                  |L28.332|
00014c  4887              LDR      r0,|L28.876|
00014e  6007              STR      r7,[r0,#0]            ;904  ; SDIO_CmdInitStructure
000150  2018              MOVS     r0,#0x18              ;905
000152  4986              LDR      r1,|L28.876|
000154  6048              STR      r0,[r1,#4]            ;905  ; SDIO_CmdInitStructure
000156  2040              MOVS     r0,#0x40              ;906
000158  6088              STR      r0,[r1,#8]            ;906  ; SDIO_CmdInitStructure
00015a  2000              MOVS     r0,#0                 ;907
00015c  60c8              STR      r0,[r1,#0xc]          ;907  ; SDIO_CmdInitStructure
00015e  f44f6080          MOV      r0,#0x400             ;908
000162  6108              STR      r0,[r1,#0x10]         ;908  ; SDIO_CmdInitStructure
000164  4608              MOV      r0,r1                 ;909
000166  f7fffffe          BL       SDIO_SendCommand
00016a  2018              MOVS     r0,#0x18              ;911
00016c  f7fffffe          BL       CmdResp1Error
000170  4606              MOV      r6,r0                 ;911
000172  b10e              CBZ      r6,|L28.376|
000174  4630              MOV      r0,r6                 ;913
000176  e75b              B        |L28.48|
                  |L28.376|
000178  2000              MOVS     r0,#0                 ;915
00017a  497e              LDR      r1,|L28.884|
00017c  7008              STRB     r0,[r1,#0]            ;915
00017e  9805              LDR      r0,[sp,#0x14]         ;917
000180  0100              LSLS     r0,r0,#4              ;917
000182  4978              LDR      r1,|L28.868|
000184  6088              STR      r0,[r1,#8]            ;917  ; SDIO_DataInitStructure
000186  4608              MOV      r0,r1                 ;918
000188  6045              STR      r5,[r0,#4]            ;918  ; SDIO_DataInitStructure
00018a  f04f30ff          MOV      r0,#0xffffffff        ;919
00018e  6008              STR      r0,[r1,#0]            ;919  ; SDIO_DataInitStructure
000190  2001              MOVS     r0,#1                 ;920
000192  6148              STR      r0,[r1,#0x14]         ;920  ; SDIO_DataInitStructure
000194  2000              MOVS     r0,#0                 ;921
000196  60c8              STR      r0,[r1,#0xc]          ;921  ; SDIO_DataInitStructure
000198  6108              STR      r0,[r1,#0x10]         ;922  ; SDIO_DataInitStructure
00019a  4608              MOV      r0,r1                 ;923
00019c  f7fffffe          BL       SDIO_DataConfig
0001a0  f04f34ff          MOV      r4,#0xffffffff        ;926
0001a4  4874              LDR      r0,|L28.888|
0001a6  7800              LDRB     r0,[r0,#0]            ;928  ; DeviceMode
0001a8  2800              CMP      r0,#0                 ;928
0001aa  d17e              BNE      |L28.682|
0001ac  f7fffffe          BL       INTX_DISABLE
0001b0  e045              B        |L28.574|
                  |L28.434|
0001b2  f44f4080          MOV      r0,#0x4000            ;933
0001b6  f7fffffe          BL       SDIO_GetFlagStatus
0001ba  b3d8              CBZ      r0,|L28.564|
0001bc  9801              LDR      r0,[sp,#4]            ;935
0001be  eba00009          SUB      r0,r0,r9              ;935
0001c2  2820              CMP      r0,#0x20              ;935
0001c4  d222              BCS      |L28.524|
0001c6  9801              LDR      r0,[sp,#4]            ;937
0001c8  eba00009          SUB      r0,r0,r9              ;937
0001cc  f0000003          AND      r0,r0,#3              ;937
0001d0  b920              CBNZ     r0,|L28.476|
0001d2  9801              LDR      r0,[sp,#4]            ;937
0001d4  eba00009          SUB      r0,r0,r9              ;937
0001d8  0880              LSRS     r0,r0,#2              ;937
0001da  e004              B        |L28.486|
                  |L28.476|
0001dc  9801              LDR      r0,[sp,#4]            ;937
0001de  eba00009          SUB      r0,r0,r9              ;937
0001e2  0880              LSRS     r0,r0,#2              ;937
0001e4  1c40              ADDS     r0,r0,#1              ;937
                  |L28.486|
0001e6  9002              STR      r0,[sp,#8]            ;937
0001e8  f04f0a00          MOV      r10,#0                ;939
0001ec  e00a              B        |L28.516|
                  |L28.494|
0001ee  495c              LDR      r1,|L28.864|
0001f0  3154              ADDS     r1,r1,#0x54           ;941
0001f2  f8db0000          LDR      r0,[r11,#0]           ;941
0001f6  6008              STR      r0,[r1,#0]            ;941
0001f8  f10a0a01          ADD      r10,r10,#1            ;939
0001fc  f10b0b04          ADD      r11,r11,#4            ;939
000200  f1090904          ADD      r9,r9,#4              ;939
                  |L28.516|
000204  9802              LDR      r0,[sp,#8]            ;939
000206  4582              CMP      r10,r0                ;939
000208  d3f1              BCC      |L28.494|
00020a  e010              B        |L28.558|
                  |L28.524|
00020c  f04f0a00          MOV      r10,#0                ;945
000210  e006              B        |L28.544|
                  |L28.530|
000212  f85b002a          LDR      r0,[r11,r10,LSL #2]   ;947
000216  4952              LDR      r1,|L28.864|
000218  3154              ADDS     r1,r1,#0x54           ;947
00021a  6008              STR      r0,[r1,#0]            ;947
00021c  f10a0a01          ADD      r10,r10,#1            ;945
                  |L28.544|
000220  f1ba0f08          CMP      r10,#8                ;945
000224  d3f5              BCC      |L28.530|
000226  f10b0b20          ADD      r11,r11,#0x20         ;949
00022a  f1090920          ADD      r9,r9,#0x20           ;950
                  |L28.558|
00022e  f06f4440          MVN      r4,#0xc0000000        ;952
000232  e004              B        |L28.574|
                  |L28.564|
000234  e7ff              B        |L28.566|
                  |L28.566|
000236  b90c              CBNZ     r4,|L28.572|
000238  2004              MOVS     r0,#4                 ;955
00023a  e6f9              B        |L28.48|
                  |L28.572|
00023c  1e64              SUBS     r4,r4,#1              ;956
                  |L28.574|
00023e  4848              LDR      r0,|L28.864|
000240  3008              ADDS     r0,r0,#8              ;931
000242  6800              LDR      r0,[r0,#0]            ;931
000244  f240611a          MOV      r1,#0x61a             ;931
000248  4008              ANDS     r0,r0,r1              ;931
00024a  2800              CMP      r0,#0                 ;931
00024c  d0b1              BEQ      |L28.434|
00024e  2008              MOVS     r0,#8                 ;959
000250  f7fffffe          BL       SDIO_GetFlagStatus
000254  b120              CBZ      r0,|L28.608|
000256  2008              MOVS     r0,#8                 ;961
000258  f7fffffe          BL       SDIO_ClearFlag
00025c  2004              MOVS     r0,#4                 ;962
00025e  e6e7              B        |L28.48|
                  |L28.608|
000260  2002              MOVS     r0,#2                 ;963
000262  f7fffffe          BL       SDIO_GetFlagStatus
000266  b120              CBZ      r0,|L28.626|
000268  2002              MOVS     r0,#2                 ;965
00026a  f7fffffe          BL       SDIO_ClearFlag
00026e  2002              MOVS     r0,#2                 ;966
000270  e6de              B        |L28.48|
                  |L28.626|
000272  2010              MOVS     r0,#0x10              ;967
000274  f7fffffe          BL       SDIO_GetFlagStatus
000278  b120              CBZ      r0,|L28.644|
00027a  2010              MOVS     r0,#0x10              ;969
00027c  f7fffffe          BL       SDIO_ClearFlag
000280  2005              MOVS     r0,#5                 ;970
000282  e6d5              B        |L28.48|
                  |L28.644|
000284  f44f7000          MOV      r0,#0x200             ;971
000288  f7fffffe          BL       SDIO_GetFlagStatus
00028c  b130              CBZ      r0,|L28.668|
00028e  f44f7000          MOV      r0,#0x200             ;973
000292  f7fffffe          BL       SDIO_ClearFlag
000296  2007              MOVS     r0,#7                 ;974
000298  e6ca              B        |L28.48|
00029a  e006              B        |L28.682|
                  |L28.668|
00029c  f7fffffe          BL       INTX_ENABLE
0002a0  f24050ff          MOV      r0,#0x5ff             ;978
0002a4  f7fffffe          BL       SDIO_ClearFlag
0002a8  e041              B        |L28.814|
                  |L28.682|
0002aa  4833              LDR      r0,|L28.888|
0002ac  7800              LDRB     r0,[r0,#0]            ;979  ; DeviceMode
0002ae  2801              CMP      r0,#1                 ;979
0002b0  d13d              BNE      |L28.814|
0002b2  2000              MOVS     r0,#0                 ;981
0002b4  4931              LDR      r1,|L28.892|
0002b6  7008              STRB     r0,[r1,#0]            ;981
0002b8  492e              LDR      r1,|L28.884|
0002ba  7008              STRB     r0,[r1,#0]            ;982
0002bc  4930              LDR      r1,|L28.896|
0002be  7008              STRB     r0,[r1,#0]            ;983
0002c0  4827              LDR      r0,|L28.864|
0002c2  3010              ADDS     r0,r0,#0x10           ;984
0002c4  6800              LDR      r0,[r0,#0]            ;984
0002c6  f240311a          MOV      r1,#0x31a             ;984
0002ca  4308              ORRS     r0,r0,r1              ;984
0002cc  4924              LDR      r1,|L28.864|
0002ce  3110              ADDS     r1,r1,#0x10           ;984
0002d0  6008              STR      r0,[r1,#0]            ;984
0002d2  2240              MOVS     r2,#0x40              ;985
0002d4  4629              MOV      r1,r5                 ;985
0002d6  9806              LDR      r0,[sp,#0x18]         ;985
0002d8  f7fffffe          BL       SD_DMA_Config
0002dc  4820              LDR      r0,|L28.864|
0002de  6800              LDR      r0,[r0,#0]            ;986
0002e0  f0400008          ORR      r0,r0,#8              ;986
0002e4  491e              LDR      r1,|L28.864|
0002e6  6008              STR      r0,[r1,#0]            ;986
0002e8  e000              B        |L28.748|
                  |L28.746|
0002ea  1e64              SUBS     r4,r4,#1              ;987
                  |L28.748|
0002ec  4825              LDR      r0,|L28.900|
0002ee  6800              LDR      r0,[r0,#0]            ;987
0002f0  f0006000          AND      r0,r0,#0x8000000      ;987
0002f4  b908              CBNZ     r0,|L28.762|
0002f6  2c00              CMP      r4,#0                 ;987
0002f8  d1f7              BNE      |L28.746|
                  |L28.762|
0002fa  b91c              CBNZ     r4,|L28.772|
0002fc  f7fffffe          BL       SD_Init
000300  2004              MOVS     r0,#4                 ;991
000302  e695              B        |L28.48|
                  |L28.772|
000304  f04f34ff          MOV      r4,#0xffffffff        ;993
000308  e000              B        |L28.780|
                  |L28.778|
00030a  1e64              SUBS     r4,r4,#1              ;994
                  |L28.780|
00030c  481c              LDR      r0,|L28.896|
00030e  7800              LDRB     r0,[r0,#0]            ;994  ; TransferEnd
000310  b920              CBNZ     r0,|L28.796|
000312  481a              LDR      r0,|L28.892|
000314  7800              LDRB     r0,[r0,#0]            ;994  ; TransferError
000316  b908              CBNZ     r0,|L28.796|
000318  2c00              CMP      r4,#0                 ;994
00031a  d1f6              BNE      |L28.778|
                  |L28.796|
00031c  b90c              CBNZ     r4,|L28.802|
00031e  2004              MOVS     r0,#4                 ;995
000320  e686              B        |L28.48|
                  |L28.802|
000322  4816              LDR      r0,|L28.892|
000324  7800              LDRB     r0,[r0,#0]            ;996  ; TransferError
000326  b110              CBZ      r0,|L28.814|
000328  4814              LDR      r0,|L28.892|
00032a  7800              LDRB     r0,[r0,#0]            ;996  ; TransferError
00032c  e680              B        |L28.48|
                  |L28.814|
00032e  f24050ff          MOV      r0,#0x5ff             ;998
000332  f7fffffe          BL       SDIO_ClearFlag
000336  a804              ADD      r0,sp,#0x10           ;999
000338  f7fffffe          BL       IsCardProgramming
00033c  4606              MOV      r6,r0                 ;999
00033e  e003              B        |L28.840|
                  |L28.832|
000340  a804              ADD      r0,sp,#0x10           ;1002
000342  f7fffffe          BL       IsCardProgramming
000346  4606              MOV      r6,r0                 ;1002
                  |L28.840|
000348  b93e              CBNZ     r6,|L28.858|
00034a  f89d0010          LDRB     r0,[sp,#0x10]         ;1000
00034e  2807              CMP      r0,#7                 ;1000
000350  d0f6              BEQ      |L28.832|
000352  f89d0010          LDRB     r0,[sp,#0x10]         ;1000
000356  2806              CMP      r0,#6                 ;1000
000358  d0f2              BEQ      |L28.832|
                  |L28.858|
00035a  4630              MOV      r0,r6                 ;1004
00035c  e668              B        |L28.48|
;;;1006   //SD卡写多个块 
                          ENDP

00035e  0000              DCW      0x0000
                  |L28.864|
                          DCD      0x40012c2c
                  |L28.868|
                          DCD      SDIO_DataInitStructure
                  |L28.872|
                          DCD      CardType
                  |L28.876|
                          DCD      SDIO_CmdInitStructure
                  |L28.880|
                          DCD      ||RCA||
                  |L28.884|
                          DCD      StopCondition
                  |L28.888|
                          DCD      DeviceMode
                  |L28.892|
                          DCD      TransferError
                  |L28.896|
                          DCD      TransferEnd
                  |L28.900|
                          DCD      0x40026400

                          AREA ||i.SD_WriteDisk||, CODE, READONLY, ALIGN=2

                  SD_WriteDisk PROC
;;;1677   //返回值:错误状态;0,正常;其他,错误代码;	
;;;1678   u8 SD_WriteDisk(u8*buf,u32 sector,u8 cnt)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;1679   {
000004  4681              MOV      r9,r0
000006  460c              MOV      r4,r1
000008  4692              MOV      r10,r2
;;;1680   	u8 sta=SD_OK;
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
;;;1681   	u8 n;
;;;1682   	long long lsector=sector;
00000e  2600              MOVS     r6,#0
000010  4625              MOV      r5,r4
;;;1683   	lsector<<=9;
000012  462c              MOV      r4,r5
000014  0270              LSLS     r0,r6,#9
000016  ea4056d5          ORR      r6,r0,r5,LSR #23
00001a  026d              LSLS     r5,r5,#9
;;;1684   	if((u32)buf%4!=0)
00001c  f0090003          AND      r0,r9,#3
000020  b1f0              CBZ      r0,|L29.96|
;;;1685   	{
;;;1686   	 	for(n=0;n<cnt;n++)
000022  f04f0b00          MOV      r11,#0
000026  e018              B        |L29.90|
                  |L29.40|
;;;1687   		{
;;;1688   			memcpy(SDIO_DATA_BUFFER,buf,512);
000028  f44f7200          MOV      r2,#0x200
00002c  4649              MOV      r1,r9
00002e  4819              LDR      r0,|L29.148|
000030  f7fffffe          BL       __aeabi_memcpy
;;;1689   		 	sta=SD_WriteBlock(SDIO_DATA_BUFFER,lsector+512*n,512);//单个sector的写操作
000034  f44f7000          MOV      r0,#0x200
000038  9000              STR      r0,[sp,#0]
00003a  ea4f204b          LSL      r0,r11,#9
00003e  1947              ADDS     r7,r0,r5
000040  eb4673e0          ADC      r3,r6,r0,ASR #31
000044  463a              MOV      r2,r7
000046  4813              LDR      r0,|L29.148|
000048  f7fffffe          BL       SD_WriteBlock
00004c  9002              STR      r0,[sp,#8]
;;;1690   			buf+=512;
00004e  f5097900          ADD      r9,r9,#0x200
000052  f10b0001          ADD      r0,r11,#1             ;1686
000056  f0000bff          AND      r11,r0,#0xff          ;1686
                  |L29.90|
00005a  45d3              CMP      r11,r10               ;1686
00005c  dbe4              BLT      |L29.40|
00005e  e016              B        |L29.142|
                  |L29.96|
;;;1691   		} 
;;;1692   	}else
;;;1693   	{
;;;1694   		if(cnt==1)sta=SD_WriteBlock(buf,lsector,512);    	//单个sector的写操作
000060  f1ba0f01          CMP      r10,#1
000064  d109              BNE      |L29.122|
000066  f44f7000          MOV      r0,#0x200
00006a  462a              MOV      r2,r5
00006c  4633              MOV      r3,r6
00006e  9000              STR      r0,[sp,#0]
000070  4648              MOV      r0,r9
000072  f7fffffe          BL       SD_WriteBlock
000076  9002              STR      r0,[sp,#8]
000078  e009              B        |L29.142|
                  |L29.122|
;;;1695   		else sta=SD_WriteMultiBlocks(buf,lsector,512,cnt);	//多个sector  
00007a  f44f7000          MOV      r0,#0x200
00007e  462a              MOV      r2,r5
000080  4633              MOV      r3,r6
000082  e9cd0a00          STRD     r0,r10,[sp,#0]
000086  4648              MOV      r0,r9
000088  f7fffffe          BL       SD_WriteMultiBlocks
00008c  9002              STR      r0,[sp,#8]
                  |L29.142|
;;;1696   	}
;;;1697   	return sta;
00008e  9802              LDR      r0,[sp,#8]
;;;1698   }
000090  e8bd8ffe          POP      {r1-r11,pc}
;;;1699   
                          ENDP

                  |L29.148|
                          DCD      SDIO_DATA_BUFFER

                          AREA ||i.SD_WriteMultiBlocks||, CODE, READONLY, ALIGN=2

                  SD_WriteMultiBlocks PROC
;;;1011   //返回值:错误状态												   
;;;1012   SD_Error SD_WriteMultiBlocks(u8 *buf,long long addr,u16 blksize,u32 nblks)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;1013   {
000004  b084              SUB      sp,sp,#0x10
000006  e9dd4712          LDRD     r4,r7,[sp,#0x48]
;;;1014   	SD_Error errorstatus = SD_OK;
00000a  2600              MOVS     r6,#0
;;;1015   	u8  power = 0, cardstate = 0;
00000c  2000              MOVS     r0,#0
00000e  9003              STR      r0,[sp,#0xc]
000010  9002              STR      r0,[sp,#8]
;;;1016   	u32 timeout=0,bytestransferred=0;
000012  2500              MOVS     r5,#0
000014  4680              MOV      r8,r0
;;;1017   	u32 count = 0, restwords = 0;
000016  4681              MOV      r9,r0
000018  9001              STR      r0,[sp,#4]
;;;1018   	u32 tlen=nblks*blksize;				//总长度(字节)
00001a  fb07fb04          MUL      r11,r7,r4
;;;1019   	u32 *tempbuff = (u32*)buf;  
00001e  f8dda010          LDR      r10,[sp,#0x10]
;;;1020     if(buf==NULL)return SD_INVALID_PARAMETER; //参数错误  
000022  f8dda010          LDR      r10,[sp,#0x10]
000026  f1ba0f00          CMP      r10,#0
00002a  d103              BNE      |L30.52|
00002c  2026              MOVS     r0,#0x26
                  |L30.46|
;;;1021     SDIO->DCTRL=0x0;							//数据控制寄存器清零(关DMA)   
;;;1022   	
;;;1023   	SDIO_DataInitStructure.SDIO_DataBlockSize= 0; ;	//清除DPSM状态机配置	
;;;1024   	SDIO_DataInitStructure.SDIO_DataLength= 0 ;
;;;1025   	SDIO_DataInitStructure.SDIO_DataTimeOut=SD_DATATIMEOUT ;
;;;1026   	SDIO_DataInitStructure.SDIO_DPSM=SDIO_DPSM_Enable;
;;;1027   	SDIO_DataInitStructure.SDIO_TransferDir=SDIO_TransferDir_ToCard;
;;;1028   	SDIO_DataInitStructure.SDIO_TransferMode=SDIO_TransferMode_Block;
;;;1029     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1030   	
;;;1031   	if(SDIO->RESP1&SD_CARD_LOCKED)return SD_LOCK_UNLOCK_FAILED;//卡锁了
;;;1032    	if(CardType==SDIO_HIGH_CAPACITY_SD_CARD)//大容量卡
;;;1033   	{
;;;1034   		blksize=512;
;;;1035   		addr>>=9;
;;;1036   	}    
;;;1037   	if((blksize>0)&&(blksize<=2048)&&((blksize&(blksize-1))==0))
;;;1038   	{
;;;1039   		power=convert_from_bytes_to_power_of_two(blksize);
;;;1040   		
;;;1041   		SDIO_CmdInitStructure.SDIO_Argument = blksize;	//发送CMD16+设置数据长度为blksize,短响应
;;;1042   		SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;1043   		SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1044   		SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1045   		SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1046   		SDIO_SendCommand(&SDIO_CmdInitStructure);	
;;;1047   		
;;;1048   		errorstatus=CmdResp1Error(SD_CMD_SET_BLOCKLEN);	//等待R1响应  
;;;1049   		
;;;1050   		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	 
;;;1051   		
;;;1052   	}else return SD_INVALID_PARAMETER;	 
;;;1053   	if(nblks>1)
;;;1054   	{					  
;;;1055   		if(nblks*blksize>SD_MAX_DATA_LENGTH)return SD_INVALID_PARAMETER;   
;;;1056        	if((SDIO_STD_CAPACITY_SD_CARD_V1_1==CardType)||(SDIO_STD_CAPACITY_SD_CARD_V2_0==CardType)||(SDIO_HIGH_CAPACITY_SD_CARD==CardType))
;;;1057       	{
;;;1058   			//提高性能
;;;1059   				SDIO_CmdInitStructure.SDIO_Argument = (u32)RCA<<16;		//发送ACMD55,短响应 	
;;;1060   				SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;1061   				SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1062   				SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1063   				SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1064   				SDIO_SendCommand(&SDIO_CmdInitStructure);	
;;;1065   				
;;;1066   			errorstatus=CmdResp1Error(SD_CMD_APP_CMD);		//等待R1响应 
;;;1067   				
;;;1068   			if(errorstatus!=SD_OK)return errorstatus;				 
;;;1069   				
;;;1070   				SDIO_CmdInitStructure.SDIO_Argument =nblks;		//发送CMD23,设置块数量,短响应 	 
;;;1071   				SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCK_COUNT;
;;;1072   				SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1073   				SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1074   				SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1075   				SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1076   			  
;;;1077   				errorstatus=CmdResp1Error(SD_CMD_SET_BLOCK_COUNT);//等待R1响应 
;;;1078   				
;;;1079   			if(errorstatus!=SD_OK)return errorstatus;		
;;;1080   		    
;;;1081   		} 
;;;1082   
;;;1083   				SDIO_CmdInitStructure.SDIO_Argument =addr;	//发送CMD25,多块写指令,短响应 	  
;;;1084   				SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
;;;1085   				SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1086   				SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1087   				SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1088   				SDIO_SendCommand(&SDIO_CmdInitStructure);	
;;;1089   
;;;1090    		errorstatus=CmdResp1Error(SD_CMD_WRITE_MULT_BLOCK);	//等待R1响应   		   
;;;1091   	
;;;1092   		if(errorstatus!=SD_OK)return errorstatus;
;;;1093   
;;;1094           SDIO_DataInitStructure.SDIO_DataBlockSize= power<<4; ;	//blksize, 控制器到卡	
;;;1095   				SDIO_DataInitStructure.SDIO_DataLength= nblks*blksize ;
;;;1096   				SDIO_DataInitStructure.SDIO_DataTimeOut=SD_DATATIMEOUT ;
;;;1097   				SDIO_DataInitStructure.SDIO_DPSM=SDIO_DPSM_Enable;
;;;1098   				SDIO_DataInitStructure.SDIO_TransferDir=SDIO_TransferDir_ToCard;
;;;1099   				SDIO_DataInitStructure.SDIO_TransferMode=SDIO_TransferMode_Block;
;;;1100   				SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1101   				
;;;1102   		if(DeviceMode==SD_POLLING_MODE)
;;;1103   	    {
;;;1104   			timeout=SDIO_DATATIMEOUT;
;;;1105   			INTX_DISABLE();//关闭总中断(POLLING模式,严禁中断打断SDIO读写操作!!!)
;;;1106   			while(!(SDIO->STA&((1<<4)|(1<<1)|(1<<8)|(1<<3)|(1<<9))))//下溢/CRC/数据结束/超时/起始位错误
;;;1107   			{
;;;1108   				if(SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)							//发送区半空,表示至少存了8字(32字节)
;;;1109   				{	  
;;;1110   					if((tlen-bytestransferred)<SD_HALFFIFOBYTES)//不够32字节了
;;;1111   					{
;;;1112   						restwords=((tlen-bytestransferred)%4==0)?((tlen-bytestransferred)/4):((tlen-bytestransferred)/4+1);
;;;1113   						for(count=0;count<restwords;count++,tempbuff++,bytestransferred+=4)
;;;1114   						{
;;;1115   							SDIO->FIFO=*tempbuff;
;;;1116   						}
;;;1117   					}else 										//发送区半空,可以发送至少8字(32字节)数据
;;;1118   					{
;;;1119   						for(count=0;count<SD_HALFFIFO;count++)
;;;1120   						{
;;;1121   							SDIO->FIFO=*(tempbuff+count);
;;;1122   						}
;;;1123   						tempbuff+=SD_HALFFIFO;
;;;1124   						bytestransferred+=SD_HALFFIFOBYTES;
;;;1125   					}
;;;1126   					timeout=0X3FFFFFFF;	//写数据溢出时间
;;;1127   				}else
;;;1128   				{
;;;1129   					if(timeout==0)return SD_DATA_TIMEOUT; 
;;;1130   					timeout--;
;;;1131   				}
;;;1132   			} 
;;;1133   		if(SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)		//数据超时错误
;;;1134   		{										   
;;;1135   	 		SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT); 	//清错误标志
;;;1136   			return SD_DATA_TIMEOUT;
;;;1137   	 	}else if(SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)	//数据块CRC错误
;;;1138   		{
;;;1139   	 		SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);  		//清错误标志
;;;1140   			return SD_DATA_CRC_FAIL;		   
;;;1141   		}else if(SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET) 	//接收fifo下溢错误
;;;1142   		{
;;;1143   	 		SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);		//清错误标志
;;;1144   			return SD_TX_UNDERRUN;		 
;;;1145   		}else if(SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET) 	//接收起始位错误
;;;1146   		{
;;;1147   	 		SDIO_ClearFlag(SDIO_FLAG_STBITERR);//清错误标志
;;;1148   			return SD_START_BIT_ERR;		 
;;;1149   		}   
;;;1150   	      										   
;;;1151   			if(SDIO_GetFlagStatus(SDIO_FLAG_DATAEND) != RESET)		//发送结束
;;;1152   			{															 
;;;1153   				if((SDIO_STD_CAPACITY_SD_CARD_V1_1==CardType)||(SDIO_STD_CAPACITY_SD_CARD_V2_0==CardType)||(SDIO_HIGH_CAPACITY_SD_CARD==CardType))
;;;1154   				{   
;;;1155   					SDIO_CmdInitStructure.SDIO_Argument =0;//发送CMD12+结束传输 	  
;;;1156   					SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_STOP_TRANSMISSION;
;;;1157   					SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1158   					SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1159   					SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1160   					SDIO_SendCommand(&SDIO_CmdInitStructure);	
;;;1161   					
;;;1162   					errorstatus=CmdResp1Error(SD_CMD_STOP_TRANSMISSION);//等待R1响应   
;;;1163   					if(errorstatus!=SD_OK)return errorstatus;	 
;;;1164   				}
;;;1165   			}
;;;1166   			INTX_ENABLE();//开启总中断
;;;1167   	 		SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;1168   	    }else if(DeviceMode==SD_DMA_MODE)
;;;1169   		{
;;;1170   	   	TransferError=SD_OK;
;;;1171   			StopCondition=1;			//多块写,需要发送停止传输指令 
;;;1172   			TransferEnd=0;				//传输结束标置位，在中断服务置1
;;;1173   			SDIO->MASK|=(1<<1)|(1<<3)|(1<<8)|(1<<4)|(1<<9);	//配置产生数据接收完成中断
;;;1174   			SD_DMA_Config((u32*)buf,nblks*blksize,DMA_DIR_MemoryToPeripheral);		//SDIO DMA配置
;;;1175   	 	 	SDIO->DCTRL|=1<<3;								//SDIO DMA使能. 
;;;1176   			timeout=SDIO_DATATIMEOUT;
;;;1177   	 		while(((DMA2->LISR&(1<<27))==RESET)&&timeout)timeout--;//等待传输完成 
;;;1178   			if(timeout==0)	 								//超时
;;;1179   			{									  
;;;1180     				SD_Init();	 					//重新初始化SD卡,可以解决写入死机的问题
;;;1181   	 			return SD_DATA_TIMEOUT;			//超时	 
;;;1182   	 		}
;;;1183   			timeout=SDIO_DATATIMEOUT;
;;;1184   			while((TransferEnd==0)&&(TransferError==SD_OK)&&timeout)timeout--;
;;;1185   	 		if(timeout==0)return SD_DATA_TIMEOUT;			//超时	 
;;;1186   	 		if(TransferError!=SD_OK)return TransferError;	 
;;;1187   		}
;;;1188     	}
;;;1189    	SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;1190    	errorstatus=IsCardProgramming(&cardstate);
;;;1191    	while((errorstatus==SD_OK)&&((cardstate==SD_CARD_PROGRAMMING)||(cardstate==SD_CARD_RECEIVING)))
;;;1192   	{
;;;1193   		errorstatus=IsCardProgramming(&cardstate);
;;;1194   	}   
;;;1195   	return errorstatus;	   
;;;1196   }
00002e  b008              ADD      sp,sp,#0x20
000030  e8bd9ff0          POP      {r4-r12,pc}
                  |L30.52|
000034  2000              MOVS     r0,#0                 ;1021
000036  49dc              LDR      r1,|L30.936|
000038  6008              STR      r0,[r1,#0]            ;1021
00003a  49dc              LDR      r1,|L30.940|
00003c  6088              STR      r0,[r1,#8]            ;1023  ; SDIO_DataInitStructure
00003e  6048              STR      r0,[r1,#4]            ;1024  ; SDIO_DataInitStructure
000040  1e40              SUBS     r0,r0,#1              ;1025
000042  6008              STR      r0,[r1,#0]            ;1025  ; SDIO_DataInitStructure
000044  2001              MOVS     r0,#1                 ;1026
000046  6148              STR      r0,[r1,#0x14]         ;1026  ; SDIO_DataInitStructure
000048  2000              MOVS     r0,#0                 ;1027
00004a  60c8              STR      r0,[r1,#0xc]          ;1027  ; SDIO_DataInitStructure
00004c  6108              STR      r0,[r1,#0x10]         ;1028  ; SDIO_DataInitStructure
00004e  4608              MOV      r0,r1                 ;1029
000050  f7fffffe          BL       SDIO_DataConfig
000054  48d4              LDR      r0,|L30.936|
000056  3818              SUBS     r0,r0,#0x18           ;1031
000058  6800              LDR      r0,[r0,#0]            ;1031
00005a  f0007000          AND      r0,r0,#0x2000000      ;1031
00005e  b108              CBZ      r0,|L30.100|
000060  200e              MOVS     r0,#0xe               ;1031
000062  e7e4              B        |L30.46|
                  |L30.100|
000064  48d2              LDR      r0,|L30.944|
000066  7800              LDRB     r0,[r0,#0]            ;1032  ; CardType
000068  2802              CMP      r0,#2                 ;1032
00006a  d108              BNE      |L30.126|
00006c  0204              LSLS     r4,r0,#8              ;1034
00006e  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;1035
000072  0a40              LSRS     r0,r0,#9              ;1035
000074  ea4050c1          ORR      r0,r0,r1,LSL #23      ;1035
000078  1249              ASRS     r1,r1,#9              ;1035
00007a  e9cd0106          STRD     r0,r1,[sp,#0x18]      ;1035
                  |L30.126|
00007e  2c00              CMP      r4,#0                 ;1037
000080  dd1f              BLE      |L30.194|
000082  f5b46f00          CMP      r4,#0x800             ;1037
000086  dc1c              BGT      |L30.194|
000088  1e60              SUBS     r0,r4,#1              ;1037
00008a  4020              ANDS     r0,r0,r4              ;1037
00008c  b9c8              CBNZ     r0,|L30.194|
00008e  4620              MOV      r0,r4                 ;1039
000090  f7fffffe          BL       convert_from_bytes_to_power_of_two
000094  9003              STR      r0,[sp,#0xc]          ;1039
000096  48c7              LDR      r0,|L30.948|
000098  6004              STR      r4,[r0,#0]            ;1041  ; SDIO_CmdInitStructure
00009a  2010              MOVS     r0,#0x10              ;1042
00009c  49c5              LDR      r1,|L30.948|
00009e  6048              STR      r0,[r1,#4]            ;1042  ; SDIO_CmdInitStructure
0000a0  2040              MOVS     r0,#0x40              ;1043
0000a2  6088              STR      r0,[r1,#8]            ;1043  ; SDIO_CmdInitStructure
0000a4  2000              MOVS     r0,#0                 ;1044
0000a6  60c8              STR      r0,[r1,#0xc]          ;1044  ; SDIO_CmdInitStructure
0000a8  f44f6080          MOV      r0,#0x400             ;1045
0000ac  6108              STR      r0,[r1,#0x10]         ;1045  ; SDIO_CmdInitStructure
0000ae  4608              MOV      r0,r1                 ;1046
0000b0  f7fffffe          BL       SDIO_SendCommand
0000b4  2010              MOVS     r0,#0x10              ;1048
0000b6  f7fffffe          BL       CmdResp1Error
0000ba  4606              MOV      r6,r0                 ;1048
0000bc  b11e              CBZ      r6,|L30.198|
0000be  4630              MOV      r0,r6                 ;1050
0000c0  e7b5              B        |L30.46|
                  |L30.194|
0000c2  2026              MOVS     r0,#0x26              ;1052
0000c4  e7b3              B        |L30.46|
                  |L30.198|
0000c6  2f01              CMP      r7,#1                 ;1053
0000c8  d96f              BLS      |L30.426|
0000ca  fb07f004          MUL      r0,r7,r4              ;1055
0000ce  f1b07f00          CMP      r0,#0x2000000         ;1055
0000d2  d301              BCC      |L30.216|
0000d4  2026              MOVS     r0,#0x26              ;1055
0000d6  e7aa              B        |L30.46|
                  |L30.216|
0000d8  48b5              LDR      r0,|L30.944|
0000da  7800              LDRB     r0,[r0,#0]            ;1056  ; CardType
0000dc  b138              CBZ      r0,|L30.238|
0000de  48b4              LDR      r0,|L30.944|
0000e0  7800              LDRB     r0,[r0,#0]            ;1056  ; CardType
0000e2  2801              CMP      r0,#1                 ;1056
0000e4  d003              BEQ      |L30.238|
0000e6  48b2              LDR      r0,|L30.944|
0000e8  7800              LDRB     r0,[r0,#0]            ;1056  ; CardType
0000ea  2802              CMP      r0,#2                 ;1056
0000ec  d12d              BNE      |L30.330|
                  |L30.238|
0000ee  48b2              LDR      r0,|L30.952|
0000f0  8800              LDRH     r0,[r0,#0]            ;1059  ; RCA
0000f2  0400              LSLS     r0,r0,#16             ;1059
0000f4  49af              LDR      r1,|L30.948|
0000f6  6008              STR      r0,[r1,#0]            ;1059  ; SDIO_CmdInitStructure
0000f8  2037              MOVS     r0,#0x37              ;1060
0000fa  6048              STR      r0,[r1,#4]            ;1060  ; SDIO_CmdInitStructure
0000fc  2040              MOVS     r0,#0x40              ;1061
0000fe  6088              STR      r0,[r1,#8]            ;1061  ; SDIO_CmdInitStructure
000100  2000              MOVS     r0,#0                 ;1062
000102  60c8              STR      r0,[r1,#0xc]          ;1062  ; SDIO_CmdInitStructure
000104  f44f6080          MOV      r0,#0x400             ;1063
000108  6108              STR      r0,[r1,#0x10]         ;1063  ; SDIO_CmdInitStructure
00010a  4608              MOV      r0,r1                 ;1064
00010c  f7fffffe          BL       SDIO_SendCommand
000110  2037              MOVS     r0,#0x37              ;1066
000112  f7fffffe          BL       CmdResp1Error
000116  4606              MOV      r6,r0                 ;1066
000118  b10e              CBZ      r6,|L30.286|
00011a  4630              MOV      r0,r6                 ;1068
00011c  e787              B        |L30.46|
                  |L30.286|
00011e  48a5              LDR      r0,|L30.948|
000120  6007              STR      r7,[r0,#0]            ;1070  ; SDIO_CmdInitStructure
000122  2017              MOVS     r0,#0x17              ;1071
000124  49a3              LDR      r1,|L30.948|
000126  6048              STR      r0,[r1,#4]            ;1071  ; SDIO_CmdInitStructure
000128  2040              MOVS     r0,#0x40              ;1072
00012a  6088              STR      r0,[r1,#8]            ;1072  ; SDIO_CmdInitStructure
00012c  2000              MOVS     r0,#0                 ;1073
00012e  60c8              STR      r0,[r1,#0xc]          ;1073  ; SDIO_CmdInitStructure
000130  f44f6080          MOV      r0,#0x400             ;1074
000134  6108              STR      r0,[r1,#0x10]         ;1074  ; SDIO_CmdInitStructure
000136  4608              MOV      r0,r1                 ;1075
000138  f7fffffe          BL       SDIO_SendCommand
00013c  2017              MOVS     r0,#0x17              ;1077
00013e  f7fffffe          BL       CmdResp1Error
000142  4606              MOV      r6,r0                 ;1077
000144  b10e              CBZ      r6,|L30.330|
000146  4630              MOV      r0,r6                 ;1079
000148  e771              B        |L30.46|
                  |L30.330|
00014a  499a              LDR      r1,|L30.948|
00014c  9806              LDR      r0,[sp,#0x18]         ;1083
00014e  6008              STR      r0,[r1,#0]            ;1083  ; SDIO_CmdInitStructure
000150  2019              MOVS     r0,#0x19              ;1084
000152  6048              STR      r0,[r1,#4]            ;1084  ; SDIO_CmdInitStructure
000154  2040              MOVS     r0,#0x40              ;1085
000156  6088              STR      r0,[r1,#8]            ;1085  ; SDIO_CmdInitStructure
000158  2000              MOVS     r0,#0                 ;1086
00015a  60c8              STR      r0,[r1,#0xc]          ;1086  ; SDIO_CmdInitStructure
00015c  f44f6080          MOV      r0,#0x400             ;1087
000160  6108              STR      r0,[r1,#0x10]         ;1087  ; SDIO_CmdInitStructure
000162  4608              MOV      r0,r1                 ;1088
000164  f7fffffe          BL       SDIO_SendCommand
000168  2019              MOVS     r0,#0x19              ;1090
00016a  f7fffffe          BL       CmdResp1Error
00016e  4606              MOV      r6,r0                 ;1090
000170  b10e              CBZ      r6,|L30.374|
000172  4630              MOV      r0,r6                 ;1092
000174  e75b              B        |L30.46|
                  |L30.374|
000176  9803              LDR      r0,[sp,#0xc]          ;1094
000178  0100              LSLS     r0,r0,#4              ;1094
00017a  498c              LDR      r1,|L30.940|
00017c  6088              STR      r0,[r1,#8]            ;1094  ; SDIO_DataInitStructure
00017e  fb07f004          MUL      r0,r7,r4              ;1095
000182  6048              STR      r0,[r1,#4]            ;1095  ; SDIO_DataInitStructure
000184  f04f30ff          MOV      r0,#0xffffffff        ;1096
000188  6008              STR      r0,[r1,#0]            ;1096  ; SDIO_DataInitStructure
00018a  2001              MOVS     r0,#1                 ;1097
00018c  6148              STR      r0,[r1,#0x14]         ;1097  ; SDIO_DataInitStructure
00018e  2000              MOVS     r0,#0                 ;1098
000190  60c8              STR      r0,[r1,#0xc]          ;1098  ; SDIO_DataInitStructure
000192  6108              STR      r0,[r1,#0x10]         ;1099  ; SDIO_DataInitStructure
000194  4608              MOV      r0,r1                 ;1100
000196  f7fffffe          BL       SDIO_DataConfig
00019a  4888              LDR      r0,|L30.956|
00019c  7800              LDRB     r0,[r0,#0]            ;1102  ; DeviceMode
00019e  2800              CMP      r0,#0                 ;1102
0001a0  d174              BNE      |L30.652|
0001a2  1e45              SUBS     r5,r0,#1              ;1104
0001a4  f7fffffe          BL       INTX_DISABLE
0001a8  e042              B        |L30.560|
                  |L30.426|
0001aa  e0e4              B        |L30.886|
                  |L30.428|
0001ac  f44f4080          MOV      r0,#0x4000            ;1108
0001b0  f7fffffe          BL       SDIO_GetFlagStatus
0001b4  b3b8              CBZ      r0,|L30.550|
0001b6  ebab0008          SUB      r0,r11,r8             ;1110
0001ba  2820              CMP      r0,#0x20              ;1110
0001bc  d21f              BCS      |L30.510|
0001be  ebab0008          SUB      r0,r11,r8             ;1112
0001c2  f0000003          AND      r0,r0,#3              ;1112
0001c6  b918              CBNZ     r0,|L30.464|
0001c8  ebab0008          SUB      r0,r11,r8             ;1112
0001cc  0880              LSRS     r0,r0,#2              ;1112
0001ce  e003              B        |L30.472|
                  |L30.464|
0001d0  ebab0008          SUB      r0,r11,r8             ;1112
0001d4  0880              LSRS     r0,r0,#2              ;1112
0001d6  1c40              ADDS     r0,r0,#1              ;1112
                  |L30.472|
0001d8  9001              STR      r0,[sp,#4]            ;1112
0001da  f04f0900          MOV      r9,#0                 ;1113
0001de  e00a              B        |L30.502|
                  |L30.480|
0001e0  4971              LDR      r1,|L30.936|
0001e2  3154              ADDS     r1,r1,#0x54           ;1115
0001e4  f8da0000          LDR      r0,[r10,#0]           ;1115
0001e8  6008              STR      r0,[r1,#0]            ;1115
0001ea  f1090901          ADD      r9,r9,#1              ;1113
0001ee  f10a0a04          ADD      r10,r10,#4            ;1113
0001f2  f1080804          ADD      r8,r8,#4              ;1113
                  |L30.502|
0001f6  9801              LDR      r0,[sp,#4]            ;1113
0001f8  4581              CMP      r9,r0                 ;1113
0001fa  d3f1              BCC      |L30.480|
0001fc  e010              B        |L30.544|
                  |L30.510|
0001fe  f04f0900          MOV      r9,#0                 ;1119
000202  e006              B        |L30.530|
                  |L30.516|
000204  f85a0029          LDR      r0,[r10,r9,LSL #2]    ;1121
000208  4967              LDR      r1,|L30.936|
00020a  3154              ADDS     r1,r1,#0x54           ;1121
00020c  6008              STR      r0,[r1,#0]            ;1121
00020e  f1090901          ADD      r9,r9,#1              ;1119
                  |L30.530|
000212  f1b90f08          CMP      r9,#8                 ;1119
000216  d3f5              BCC      |L30.516|
000218  f10a0a20          ADD      r10,r10,#0x20         ;1123
00021c  f1080820          ADD      r8,r8,#0x20           ;1124
                  |L30.544|
000220  f06f4540          MVN      r5,#0xc0000000        ;1126
000224  e004              B        |L30.560|
                  |L30.550|
000226  e7ff              B        |L30.552|
                  |L30.552|
000228  b90d              CBNZ     r5,|L30.558|
00022a  2004              MOVS     r0,#4                 ;1129
00022c  e6ff              B        |L30.46|
                  |L30.558|
00022e  1e6d              SUBS     r5,r5,#1              ;1130
                  |L30.560|
000230  485d              LDR      r0,|L30.936|
000232  3008              ADDS     r0,r0,#8              ;1106
000234  6800              LDR      r0,[r0,#0]            ;1106
000236  f240311a          MOV      r1,#0x31a             ;1106
00023a  4008              ANDS     r0,r0,r1              ;1106
00023c  2800              CMP      r0,#0                 ;1106
00023e  d0b5              BEQ      |L30.428|
000240  2008              MOVS     r0,#8                 ;1133
000242  f7fffffe          BL       SDIO_GetFlagStatus
000246  b120              CBZ      r0,|L30.594|
000248  2008              MOVS     r0,#8                 ;1135
00024a  f7fffffe          BL       SDIO_ClearFlag
00024e  2004              MOVS     r0,#4                 ;1136
000250  e6ed              B        |L30.46|
                  |L30.594|
000252  2002              MOVS     r0,#2                 ;1137
000254  f7fffffe          BL       SDIO_GetFlagStatus
000258  b120              CBZ      r0,|L30.612|
00025a  2002              MOVS     r0,#2                 ;1139
00025c  f7fffffe          BL       SDIO_ClearFlag
000260  2002              MOVS     r0,#2                 ;1140
000262  e6e4              B        |L30.46|
                  |L30.612|
000264  2010              MOVS     r0,#0x10              ;1141
000266  f7fffffe          BL       SDIO_GetFlagStatus
00026a  b120              CBZ      r0,|L30.630|
00026c  2010              MOVS     r0,#0x10              ;1143
00026e  f7fffffe          BL       SDIO_ClearFlag
000272  2005              MOVS     r0,#5                 ;1144
000274  e6db              B        |L30.46|
                  |L30.630|
000276  f44f7000          MOV      r0,#0x200             ;1145
00027a  f7fffffe          BL       SDIO_GetFlagStatus
00027e  b130              CBZ      r0,|L30.654|
000280  f44f7000          MOV      r0,#0x200             ;1147
000284  f7fffffe          BL       SDIO_ClearFlag
000288  2007              MOVS     r0,#7                 ;1148
00028a  e6d0              B        |L30.46|
                  |L30.652|
00028c  e02c              B        |L30.744|
                  |L30.654|
00028e  f44f7080          MOV      r0,#0x100             ;1151
000292  f7fffffe          BL       SDIO_GetFlagStatus
000296  b300              CBZ      r0,|L30.730|
000298  4845              LDR      r0,|L30.944|
00029a  7800              LDRB     r0,[r0,#0]            ;1153  ; CardType
00029c  b138              CBZ      r0,|L30.686|
00029e  4844              LDR      r0,|L30.944|
0002a0  7800              LDRB     r0,[r0,#0]            ;1153  ; CardType
0002a2  2801              CMP      r0,#1                 ;1153
0002a4  d003              BEQ      |L30.686|
0002a6  4842              LDR      r0,|L30.944|
0002a8  7800              LDRB     r0,[r0,#0]            ;1153  ; CardType
0002aa  2802              CMP      r0,#2                 ;1153
0002ac  d115              BNE      |L30.730|
                  |L30.686|
0002ae  2000              MOVS     r0,#0                 ;1155
0002b0  4940              LDR      r1,|L30.948|
0002b2  6008              STR      r0,[r1,#0]            ;1155  ; SDIO_CmdInitStructure
0002b4  200c              MOVS     r0,#0xc               ;1156
0002b6  6048              STR      r0,[r1,#4]            ;1156  ; SDIO_CmdInitStructure
0002b8  2040              MOVS     r0,#0x40              ;1157
0002ba  6088              STR      r0,[r1,#8]            ;1157  ; SDIO_CmdInitStructure
0002bc  2000              MOVS     r0,#0                 ;1158
0002be  60c8              STR      r0,[r1,#0xc]          ;1158  ; SDIO_CmdInitStructure
0002c0  f44f6080          MOV      r0,#0x400             ;1159
0002c4  6108              STR      r0,[r1,#0x10]         ;1159  ; SDIO_CmdInitStructure
0002c6  4608              MOV      r0,r1                 ;1160
0002c8  f7fffffe          BL       SDIO_SendCommand
0002cc  200c              MOVS     r0,#0xc               ;1162
0002ce  f7fffffe          BL       CmdResp1Error
0002d2  4606              MOV      r6,r0                 ;1162
0002d4  b10e              CBZ      r6,|L30.730|
0002d6  4630              MOV      r0,r6                 ;1163
0002d8  e6a9              B        |L30.46|
                  |L30.730|
0002da  f7fffffe          BL       INTX_ENABLE
0002de  f24050ff          MOV      r0,#0x5ff             ;1167
0002e2  f7fffffe          BL       SDIO_ClearFlag
0002e6  e046              B        |L30.886|
                  |L30.744|
0002e8  4834              LDR      r0,|L30.956|
0002ea  7800              LDRB     r0,[r0,#0]            ;1168  ; DeviceMode
0002ec  2801              CMP      r0,#1                 ;1168
0002ee  d142              BNE      |L30.886|
0002f0  2000              MOVS     r0,#0                 ;1170
0002f2  4933              LDR      r1,|L30.960|
0002f4  7008              STRB     r0,[r1,#0]            ;1170
0002f6  2001              MOVS     r0,#1                 ;1171
0002f8  4932              LDR      r1,|L30.964|
0002fa  7008              STRB     r0,[r1,#0]            ;1171
0002fc  2000              MOVS     r0,#0                 ;1172
0002fe  4932              LDR      r1,|L30.968|
000300  7008              STRB     r0,[r1,#0]            ;1172
000302  4829              LDR      r0,|L30.936|
000304  3010              ADDS     r0,r0,#0x10           ;1173
000306  6800              LDR      r0,[r0,#0]            ;1173
000308  f240311a          MOV      r1,#0x31a             ;1173
00030c  4308              ORRS     r0,r0,r1              ;1173
00030e  4926              LDR      r1,|L30.936|
000310  3110              ADDS     r1,r1,#0x10           ;1173
000312  6008              STR      r0,[r1,#0]            ;1173
000314  fb07f104          MUL      r1,r7,r4              ;1174
000318  2240              MOVS     r2,#0x40              ;1174
00031a  9804              LDR      r0,[sp,#0x10]         ;1174
00031c  f7fffffe          BL       SD_DMA_Config
000320  4821              LDR      r0,|L30.936|
000322  6800              LDR      r0,[r0,#0]            ;1175
000324  f0400008          ORR      r0,r0,#8              ;1175
000328  491f              LDR      r1,|L30.936|
00032a  6008              STR      r0,[r1,#0]            ;1175
00032c  f04f35ff          MOV      r5,#0xffffffff        ;1176
000330  e000              B        |L30.820|
                  |L30.818|
000332  1e6d              SUBS     r5,r5,#1              ;1177
                  |L30.820|
000334  4825              LDR      r0,|L30.972|
000336  6800              LDR      r0,[r0,#0]            ;1177
000338  f0006000          AND      r0,r0,#0x8000000      ;1177
00033c  b908              CBNZ     r0,|L30.834|
00033e  2d00              CMP      r5,#0                 ;1177
000340  d1f7              BNE      |L30.818|
                  |L30.834|
000342  b91d              CBNZ     r5,|L30.844|
000344  f7fffffe          BL       SD_Init
000348  2004              MOVS     r0,#4                 ;1181
00034a  e670              B        |L30.46|
                  |L30.844|
00034c  f04f35ff          MOV      r5,#0xffffffff        ;1183
000350  e000              B        |L30.852|
                  |L30.850|
000352  1e6d              SUBS     r5,r5,#1              ;1184
                  |L30.852|
000354  481c              LDR      r0,|L30.968|
000356  7800              LDRB     r0,[r0,#0]            ;1184  ; TransferEnd
000358  b920              CBNZ     r0,|L30.868|
00035a  4819              LDR      r0,|L30.960|
00035c  7800              LDRB     r0,[r0,#0]            ;1184  ; TransferError
00035e  b908              CBNZ     r0,|L30.868|
000360  2d00              CMP      r5,#0                 ;1184
000362  d1f6              BNE      |L30.850|
                  |L30.868|
000364  b90d              CBNZ     r5,|L30.874|
000366  2004              MOVS     r0,#4                 ;1185
000368  e661              B        |L30.46|
                  |L30.874|
00036a  4815              LDR      r0,|L30.960|
00036c  7800              LDRB     r0,[r0,#0]            ;1186  ; TransferError
00036e  b110              CBZ      r0,|L30.886|
000370  4813              LDR      r0,|L30.960|
000372  7800              LDRB     r0,[r0,#0]            ;1186  ; TransferError
000374  e65b              B        |L30.46|
                  |L30.886|
000376  f24050ff          MOV      r0,#0x5ff             ;1189
00037a  f7fffffe          BL       SDIO_ClearFlag
00037e  a802              ADD      r0,sp,#8              ;1190
000380  f7fffffe          BL       IsCardProgramming
000384  4606              MOV      r6,r0                 ;1190
000386  e003              B        |L30.912|
                  |L30.904|
000388  a802              ADD      r0,sp,#8              ;1193
00038a  f7fffffe          BL       IsCardProgramming
00038e  4606              MOV      r6,r0                 ;1193
                  |L30.912|
000390  b93e              CBNZ     r6,|L30.930|
000392  f89d0008          LDRB     r0,[sp,#8]            ;1191
000396  2807              CMP      r0,#7                 ;1191
000398  d0f6              BEQ      |L30.904|
00039a  f89d0008          LDRB     r0,[sp,#8]            ;1191
00039e  2806              CMP      r0,#6                 ;1191
0003a0  d0f2              BEQ      |L30.904|
                  |L30.930|
0003a2  4630              MOV      r0,r6                 ;1195
0003a4  e643              B        |L30.46|
;;;1197   //SDIO中断服务函数		  
                          ENDP

0003a6  0000              DCW      0x0000
                  |L30.936|
                          DCD      0x40012c2c
                  |L30.940|
                          DCD      SDIO_DataInitStructure
                  |L30.944|
                          DCD      CardType
                  |L30.948|
                          DCD      SDIO_CmdInitStructure
                  |L30.952|
                          DCD      ||RCA||
                  |L30.956|
                          DCD      DeviceMode
                  |L30.960|
                          DCD      TransferError
                  |L30.964|
                          DCD      StopCondition
                  |L30.968|
                          DCD      TransferEnd
                  |L30.972|
                          DCD      0x40026400

                          AREA ||i.convert_from_bytes_to_power_of_two||, CODE, READONLY, ALIGN=1

                  convert_from_bytes_to_power_of_two PROC
;;;1597   //返回值:以2为底的指数值
;;;1598   u8 convert_from_bytes_to_power_of_two(u16 NumberOfBytes)
000000  4601              MOV      r1,r0
;;;1599   {
;;;1600   	u8 count=0;
000002  2000              MOVS     r0,#0
;;;1601   	while(NumberOfBytes!=1)
000004  e002              B        |L31.12|
                  |L31.6|
;;;1602   	{
;;;1603   		NumberOfBytes>>=1;
000006  1049              ASRS     r1,r1,#1
;;;1604   		count++;
000008  1c42              ADDS     r2,r0,#1
00000a  b2d0              UXTB     r0,r2
                  |L31.12|
00000c  2901              CMP      r1,#1                 ;1601
00000e  d1fa              BNE      |L31.6|
;;;1605   	}
;;;1606   	return count;
;;;1607   } 	 
000010  4770              BX       lr
;;;1608   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  SDIO_InitStructure
                          %        24
                  SDIO_CmdInitStructure
                          %        20
                  SDIO_DataInitStructure
                          %        24
                  CSD_Tab
                          %        16
                  CID_Tab
                          %        20
                  SDCardInfo
                          %        88
                  SDIO_DATA_BUFFER
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  CardType
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  ||RCA||
                          DCD      0x00000000
                  DeviceMode
000008  01                DCB      0x01
                  StopCondition
000009  00                DCB      0x00
                  TransferError
00000a  00                DCB      0x00
                  TransferEnd
00000b  00                DCB      0x00
                  tempbuff
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\HARDWARE\\SDIO\\sdio_sdcard.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_sdio_sdcard_c_4ab284f9____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___13_sdio_sdcard_c_4ab284f9____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_sdio_sdcard_c_4ab284f9____REVSH|
#line 144
|__asm___13_sdio_sdcard_c_4ab284f9____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
