; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\audioplay.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\audioplay.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\HARDWARE\LED -I..\HARDWARE\LCD -I..\HARDWARE\KEY -I..\HARDWARE\SRAM -I..\HARDWARE\SDIO -I..\MALLOC -I..\USMART -I..\HARDWARE\SPI -I..\HARDWARE\W25QXX -I..\FATFS\exfuns -I..\FATFS\src -I..\TEXT -I..\FWLIB\inc -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\I2S -I..\HARDWARE\WM8978 -I..\APP -I..\AUDIOCODEC\wav -I..\new_user -I..\new_user\task -I..\new_user\MVC -I..\..\..\module\common -I..\..\..\module\common\InsertLog -I..\..\..\module\common\loopqueue -I..\..\..\module\common\StateMachine -I..\..\..\module\common\priorityqueue -I..\..\..\module\common\Math -I..\..\..\module\component\const_loop_scheduler -I..\..\..\module\component\const_loop_scheduler\TemplateTask -I..\..\..\module\component\const_loop_scheduler\HierarchicalSM -I..\..\..\module\component\BlockableStateMachine -I..\..\..\module\customize\ButtonModule -I..\..\..\module\external\Segger\SEGGER_RTT_V640\Syscalls -I..\..\..\module\external\Segger\SEGGER_RTT_V640\RTT -I.\RTE\_AudioPlayer -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include" -I"D:\Program Files\ARM\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_COMPILER_PRESENT -DX_TASK_LOG_DEBUG_METHOD=SeggerRTT_LogDebug --omf_browse=..\obj\audioplay.crf ..\APP\audioplay.c]
                          THUMB

                          AREA ||i.audio_get_tnum||, CODE, READONLY, ALIGN=1

                  audio_get_tnum PROC
;;;46     //返回值:总有效文件数
;;;47     u16 audio_get_tnum(u8 *path)
000000  b5f0              PUSH     {r4-r7,lr}
;;;48     {	  
000002  b091              SUB      sp,sp,#0x44
000004  4605              MOV      r5,r0
;;;49     	u8 res;
;;;50     	u16 rval=0;
000006  2600              MOVS     r6,#0
;;;51      	DIR tdir;	 		//临时目录
;;;52     	FILINFO tfileinfo;	//临时文件信息		
;;;53     	u8 *fn; 			 			   			     
;;;54         res=f_opendir(&tdir,(const TCHAR*)path); //打开目录
000008  4629              MOV      r1,r5
00000a  a808              ADD      r0,sp,#0x20
00000c  f7fffffe          BL       f_opendir
000010  4604              MOV      r4,r0
;;;55       	tfileinfo.lfsize=_MAX_LFN*2+1;						//长文件名最大长度
000012  f24010ff          MOV      r0,#0x1ff
000016  9007              STR      r0,[sp,#0x1c]
;;;56     	tfileinfo.lfname=mymalloc(SRAMIN,tfileinfo.lfsize);	//为长文件缓存区分配内存
000018  2000              MOVS     r0,#0
00001a  9907              LDR      r1,[sp,#0x1c]
00001c  f7fffffe          BL       mymalloc
000020  9006              STR      r0,[sp,#0x18]
;;;57     	if(res==FR_OK&&tfileinfo.lfname!=NULL)
000022  bb04              CBNZ     r4,|L1.102|
000024  9806              LDR      r0,[sp,#0x18]
000026  b1f0              CBZ      r0,|L1.102|
;;;58     	{
;;;59     		while(1)//查询总的有效文件数
000028  e01b              B        |L1.98|
                  |L1.42|
;;;60     		{
;;;61     	        res=f_readdir(&tdir,&tfileinfo);       		//读取目录下的一个文件
00002a  4669              MOV      r1,sp
00002c  a808              ADD      r0,sp,#0x20
00002e  f7fffffe          BL       f_readdir
000032  4604              MOV      r4,r0
;;;62     	        if(res!=FR_OK||tfileinfo.fname[0]==0)break;	//错误了/到末尾了,退出		  
000034  b914              CBNZ     r4,|L1.60|
000036  f89d0009          LDRB     r0,[sp,#9]
00003a  b900              CBNZ     r0,|L1.62|
                  |L1.60|
00003c  e012              B        |L1.100|
                  |L1.62|
;;;63          		fn=(u8*)(*tfileinfo.lfname?tfileinfo.lfname:tfileinfo.fname);			 
00003e  9806              LDR      r0,[sp,#0x18]
000040  7800              LDRB     r0,[r0,#0]
000042  b108              CBZ      r0,|L1.72|
000044  9806              LDR      r0,[sp,#0x18]
000046  e001              B        |L1.76|
                  |L1.72|
000048  f10d0009          ADD      r0,sp,#9
                  |L1.76|
00004c  4607              MOV      r7,r0
;;;64     			res=f_typetell(fn);	
00004e  4638              MOV      r0,r7
000050  f7fffffe          BL       f_typetell
000054  4604              MOV      r4,r0
;;;65     			if((res&0XF0)==0X40)//取高四位,看看是不是音乐文件	
000056  f00400f0          AND      r0,r4,#0xf0
00005a  2840              CMP      r0,#0x40
00005c  d101              BNE      |L1.98|
;;;66     			{
;;;67     				rval++;//有效文件数增加1
00005e  1c70              ADDS     r0,r6,#1
000060  b286              UXTH     r6,r0
                  |L1.98|
000062  e7e2              B        |L1.42|
                  |L1.100|
000064  bf00              NOP                            ;62
                  |L1.102|
;;;68     			}	    
;;;69     		}  
;;;70     	} 
;;;71     	myfree(SRAMIN,tfileinfo.lfname);
000066  2000              MOVS     r0,#0
000068  9906              LDR      r1,[sp,#0x18]
00006a  f7fffffe          BL       myfree
;;;72     	return rval;
00006e  4630              MOV      r0,r6
;;;73     }
000070  b011              ADD      sp,sp,#0x44
000072  bdf0              POP      {r4-r7,pc}
;;;74     //显示曲目索引
                          ENDP


                          AREA ||i.audio_index_show||, CODE, READONLY, ALIGN=1

                  audio_index_show PROC
;;;76     //total:总文件数
;;;77     void audio_index_show(u16 index,u16 total)
000000  b57c              PUSH     {r2-r6,lr}
;;;78     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;79     	//显示当前曲目的索引,及总曲目数
;;;80     	LCD_ShowxNum(60+0,230,index,3,16,0X80);		//索引
000006  2080              MOVS     r0,#0x80
000008  2110              MOVS     r1,#0x10
00000a  2303              MOVS     r3,#3
00000c  4622              MOV      r2,r4
00000e  e9cd1000          STRD     r1,r0,[sp,#0]
000012  21e6              MOVS     r1,#0xe6
000014  203c              MOVS     r0,#0x3c
000016  f7fffffe          BL       LCD_ShowxNum
;;;81     	LCD_ShowChar(60+24,230,'/',16,0);
00001a  2000              MOVS     r0,#0
00001c  2310              MOVS     r3,#0x10
00001e  222f              MOVS     r2,#0x2f
000020  21e6              MOVS     r1,#0xe6
000022  9000              STR      r0,[sp,#0]
000024  2054              MOVS     r0,#0x54
000026  f7fffffe          BL       LCD_ShowChar
;;;82     	LCD_ShowxNum(60+32,230,total,3,16,0X80); 	//总曲目				  	  
00002a  2080              MOVS     r0,#0x80
00002c  2110              MOVS     r1,#0x10
00002e  2303              MOVS     r3,#3
000030  462a              MOV      r2,r5
000032  e9cd1000          STRD     r1,r0,[sp,#0]
000036  21e6              MOVS     r1,#0xe6
000038  205c              MOVS     r0,#0x5c
00003a  f7fffffe          BL       LCD_ShowxNum
;;;83     }
00003e  bd7c              POP      {r2-r6,pc}
;;;84      
                          ENDP


                          AREA ||i.audio_msg_show||, CODE, READONLY, ALIGN=2

                  audio_msg_show PROC
;;;88     //bitrate:比特率(位速)
;;;89     void audio_msg_show(u32 totsec,u32 cursec,u32 bitrate)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;90     {	
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;91     	static u16 playtime=0XFFFF;//播放时间标记	      
;;;92     	if(playtime!=cursec)					//需要更新显示时间
00000a  483a              LDR      r0,|L3.244|
00000c  8800              LDRH     r0,[r0,#0]  ; playtime
00000e  42a8              CMP      r0,r5
000010  d06d              BEQ      |L3.238|
;;;93     	{
;;;94     		playtime=cursec;
000012  4938              LDR      r1,|L3.244|
000014  800d              STRH     r5,[r1,#0]
;;;95     		//显示播放时间			 
;;;96     		LCD_ShowxNum(60,210,playtime/60,2,16,0X80);		//分钟
000016  4608              MOV      r0,r1
000018  8800              LDRH     r0,[r0,#0]  ; playtime
00001a  213c              MOVS     r1,#0x3c
00001c  fb90f7f1          SDIV     r7,r0,r1
000020  2080              MOVS     r0,#0x80
000022  2110              MOVS     r1,#0x10
000024  2302              MOVS     r3,#2
000026  463a              MOV      r2,r7
000028  e9cd1000          STRD     r1,r0,[sp,#0]
00002c  21d2              MOVS     r1,#0xd2
00002e  203c              MOVS     r0,#0x3c
000030  f7fffffe          BL       LCD_ShowxNum
;;;97     		LCD_ShowChar(60+16,210,':',16,0);
000034  2000              MOVS     r0,#0
000036  2310              MOVS     r3,#0x10
000038  223a              MOVS     r2,#0x3a
00003a  21d2              MOVS     r1,#0xd2
00003c  9000              STR      r0,[sp,#0]
00003e  204c              MOVS     r0,#0x4c
000040  f7fffffe          BL       LCD_ShowChar
;;;98     		LCD_ShowxNum(60+24,210,playtime%60,2,16,0X80);	//秒钟		
000044  482b              LDR      r0,|L3.244|
000046  8800              LDRH     r0,[r0,#0]  ; playtime
000048  213c              MOVS     r1,#0x3c
00004a  fb90f2f1          SDIV     r2,r0,r1
00004e  fb010712          MLS      r7,r1,r2,r0
000052  2080              MOVS     r0,#0x80
000054  2110              MOVS     r1,#0x10
000056  2302              MOVS     r3,#2
000058  463a              MOV      r2,r7
00005a  e9cd1000          STRD     r1,r0,[sp,#0]
00005e  21d2              MOVS     r1,#0xd2
000060  2054              MOVS     r0,#0x54
000062  f7fffffe          BL       LCD_ShowxNum
;;;99      		LCD_ShowChar(60+40,210,'/',16,0); 	    	 
000066  2000              MOVS     r0,#0
000068  2310              MOVS     r3,#0x10
00006a  222f              MOVS     r2,#0x2f
00006c  21d2              MOVS     r1,#0xd2
00006e  9000              STR      r0,[sp,#0]
000070  2064              MOVS     r0,#0x64
000072  f7fffffe          BL       LCD_ShowChar
;;;100    		//显示总时间    	   
;;;101     		LCD_ShowxNum(60+48,210,totsec/60,2,16,0X80);	//分钟
000076  203c              MOVS     r0,#0x3c
000078  fbb4f7f0          UDIV     r7,r4,r0
00007c  2080              MOVS     r0,#0x80
00007e  2110              MOVS     r1,#0x10
000080  2302              MOVS     r3,#2
000082  463a              MOV      r2,r7
000084  e9cd1000          STRD     r1,r0,[sp,#0]
000088  21d2              MOVS     r1,#0xd2
00008a  206c              MOVS     r0,#0x6c
00008c  f7fffffe          BL       LCD_ShowxNum
;;;102    		LCD_ShowChar(60+64,210,':',16,0);
000090  2000              MOVS     r0,#0
000092  2310              MOVS     r3,#0x10
000094  223a              MOVS     r2,#0x3a
000096  21d2              MOVS     r1,#0xd2
000098  9000              STR      r0,[sp,#0]
00009a  207c              MOVS     r0,#0x7c
00009c  f7fffffe          BL       LCD_ShowChar
;;;103    		LCD_ShowxNum(60+72,210,totsec%60,2,16,0X80);	//秒钟	  		    
0000a0  203c              MOVS     r0,#0x3c
0000a2  fbb4f1f0          UDIV     r1,r4,r0
0000a6  fb004711          MLS      r7,r0,r1,r4
0000aa  2080              MOVS     r0,#0x80
0000ac  2110              MOVS     r1,#0x10
0000ae  2302              MOVS     r3,#2
0000b0  463a              MOV      r2,r7
0000b2  e9cd1000          STRD     r1,r0,[sp,#0]
0000b6  21d2              MOVS     r1,#0xd2
0000b8  2084              MOVS     r0,#0x84
0000ba  f7fffffe          BL       LCD_ShowxNum
;;;104    		//显示位率			   
;;;105       		LCD_ShowxNum(60+110,210,bitrate/1000,4,16,0X80);//显示位率	 
0000be  f44f707a          MOV      r0,#0x3e8
0000c2  fbb6f7f0          UDIV     r7,r6,r0
0000c6  2080              MOVS     r0,#0x80
0000c8  2110              MOVS     r1,#0x10
0000ca  2304              MOVS     r3,#4
0000cc  463a              MOV      r2,r7
0000ce  e9cd1000          STRD     r1,r0,[sp,#0]
0000d2  21d2              MOVS     r1,#0xd2
0000d4  20aa              MOVS     r0,#0xaa
0000d6  f7fffffe          BL       LCD_ShowxNum
;;;106    		LCD_ShowString(60+110+32,210,200,16,16,"Kbps");	 
0000da  a007              ADR      r0,|L3.248|
0000dc  2110              MOVS     r1,#0x10
0000de  460b              MOV      r3,r1
0000e0  22c8              MOVS     r2,#0xc8
0000e2  e9cd1000          STRD     r1,r0,[sp,#0]
0000e6  21d2              MOVS     r1,#0xd2
0000e8  20ca              MOVS     r0,#0xca
0000ea  f7fffffe          BL       LCD_ShowString
                  |L3.238|
;;;107    	} 		 
;;;108    }
0000ee  e8bd81fc          POP      {r2-r8,pc}
;;;109    //播放音乐
                          ENDP

0000f2  0000              DCW      0x0000
                  |L3.244|
                          DCD      playtime
                  |L3.248|
0000f8  4b627073          DCB      "Kbps",0
0000fc  00      
0000fd  00                DCB      0
0000fe  00                DCB      0
0000ff  00                DCB      0

                          AREA ||i.audio_play||, CODE, READONLY, ALIGN=2

                  audio_play PROC
;;;109    //播放音乐
;;;110    void audio_play(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;111    {
000004  b095              SUB      sp,sp,#0x54
;;;112    	u8 res;
;;;113     	DIR wavdir;	 		//目录
;;;114    	FILINFO wavfileinfo;//文件信息
;;;115    	u8 *fn;   			//长文件名
;;;116    	u8 *pname;			//带路径的文件名
;;;117    	u16 totwavnum; 		//音乐文件总数
;;;118    	u16 curindex;		//图片当前索引
;;;119    	u8 key;				//键值		  
;;;120     	u16 temp;
;;;121    	u16 *wavindextbl;	//音乐索引表
;;;122    	
;;;123    	WM8978_ADDA_Cfg(1,0);	//开启DAC
000006  2100              MOVS     r1,#0
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       WM8978_ADDA_Cfg
;;;124    	WM8978_Input_Cfg(0,0,0);//关闭输入通道
00000e  2200              MOVS     r2,#0
000010  4611              MOV      r1,r2
000012  4610              MOV      r0,r2
000014  f7fffffe          BL       WM8978_Input_Cfg
;;;125    	WM8978_Output_Cfg(1,0);	//开启DAC输出   
000018  2100              MOVS     r1,#0
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       WM8978_Output_Cfg
;;;126    	
;;;127     	while(f_opendir(&wavdir,"0:/MUSIC"))//打开音乐文件夹
000020  e01a              B        |L4.88|
                  |L4.34|
;;;128     	{	    
;;;129    		Show_Str(60,190,240,16,"MUSIC文件夹错误!",16,0);
000022  2000              MOVS     r0,#0
000024  2110              MOVS     r1,#0x10
000026  a285              ADR      r2,|L4.572|
000028  460b              MOV      r3,r1
00002a  e9cd2100          STRD     r2,r1,[sp,#0]
00002e  9002              STR      r0,[sp,#8]
000030  22f0              MOVS     r2,#0xf0
000032  21be              MOVS     r1,#0xbe
000034  203c              MOVS     r0,#0x3c
000036  f7fffffe          BL       Show_Str
;;;130    		delay_ms(200);				  
00003a  20c8              MOVS     r0,#0xc8
00003c  f7fffffe          BL       delay_ms
;;;131    		LCD_Fill(60,190,240,206,WHITE);//清除显示	     
000040  f64f70ff          MOV      r0,#0xffff
000044  23ce              MOVS     r3,#0xce
000046  22f0              MOVS     r2,#0xf0
000048  21be              MOVS     r1,#0xbe
00004a  9000              STR      r0,[sp,#0]
00004c  203c              MOVS     r0,#0x3c
00004e  f7fffffe          BL       LCD_Fill
;;;132    		delay_ms(200);				  
000052  20c8              MOVS     r0,#0xc8
000054  f7fffffe          BL       delay_ms
                  |L4.88|
000058  a17d              ADR      r1,|L4.592|
00005a  a80c              ADD      r0,sp,#0x30           ;127
00005c  f7fffffe          BL       f_opendir
000060  2800              CMP      r0,#0                 ;127
000062  d1de              BNE      |L4.34|
;;;133    	} 									  
;;;134    	totwavnum=audio_get_tnum("0:/MUSIC"); //得到总有效文件数
000064  a07a              ADR      r0,|L4.592|
000066  f7fffffe          BL       audio_get_tnum
00006a  4606              MOV      r6,r0
;;;135      	while(totwavnum==NULL)//音乐文件总数为0		
00006c  e01a              B        |L4.164|
                  |L4.110|
;;;136     	{	    
;;;137    		Show_Str(60,190,240,16,"没有音乐文件!",16,0);
00006e  2000              MOVS     r0,#0
000070  2110              MOVS     r1,#0x10
000072  a27a              ADR      r2,|L4.604|
000074  460b              MOV      r3,r1
000076  e9cd2100          STRD     r2,r1,[sp,#0]
00007a  9002              STR      r0,[sp,#8]
00007c  22f0              MOVS     r2,#0xf0
00007e  21be              MOVS     r1,#0xbe
000080  203c              MOVS     r0,#0x3c
000082  f7fffffe          BL       Show_Str
;;;138    		delay_ms(200);				  
000086  20c8              MOVS     r0,#0xc8
000088  f7fffffe          BL       delay_ms
;;;139    		LCD_Fill(60,190,240,146,WHITE);//清除显示	     
00008c  f64f70ff          MOV      r0,#0xffff
000090  2392              MOVS     r3,#0x92
000092  22f0              MOVS     r2,#0xf0
000094  21be              MOVS     r1,#0xbe
000096  9000              STR      r0,[sp,#0]
000098  203c              MOVS     r0,#0x3c
00009a  f7fffffe          BL       LCD_Fill
;;;140    		delay_ms(200);				  
00009e  20c8              MOVS     r0,#0xc8
0000a0  f7fffffe          BL       delay_ms
                  |L4.164|
0000a4  2e00              CMP      r6,#0                 ;135
0000a6  d0e2              BEQ      |L4.110|
;;;141    	}										   
;;;142      	wavfileinfo.lfsize=_MAX_LFN*2+1;						//长文件名最大长度
0000a8  f24010ff          MOV      r0,#0x1ff
0000ac  900b              STR      r0,[sp,#0x2c]
;;;143    	wavfileinfo.lfname=mymalloc(SRAMIN,wavfileinfo.lfsize);	//为长文件缓存区分配内存
0000ae  2000              MOVS     r0,#0
0000b0  990b              LDR      r1,[sp,#0x2c]
0000b2  f7fffffe          BL       mymalloc
0000b6  900a              STR      r0,[sp,#0x28]
;;;144     	pname=mymalloc(SRAMIN,wavfileinfo.lfsize);				//为带路径的文件名分配内存
0000b8  2000              MOVS     r0,#0
0000ba  990b              LDR      r1,[sp,#0x2c]
0000bc  f7fffffe          BL       mymalloc
0000c0  4680              MOV      r8,r0
;;;145     	wavindextbl=mymalloc(SRAMIN,2*totwavnum);				//申请2*totwavnum个字节的内存,用于存放音乐文件索引
0000c2  0071              LSLS     r1,r6,#1
0000c4  2000              MOVS     r0,#0
0000c6  f7fffffe          BL       mymalloc
0000ca  4607              MOV      r7,r0
;;;146     	while(wavfileinfo.lfname==NULL||pname==NULL||wavindextbl==NULL)//内存分配出错
0000cc  e01a              B        |L4.260|
                  |L4.206|
;;;147     	{	    
;;;148    		Show_Str(60,190,240,16,"内存分配失败!",16,0);
0000ce  2000              MOVS     r0,#0
0000d0  2110              MOVS     r1,#0x10
0000d2  a266              ADR      r2,|L4.620|
0000d4  460b              MOV      r3,r1
0000d6  e9cd2100          STRD     r2,r1,[sp,#0]
0000da  9002              STR      r0,[sp,#8]
0000dc  22f0              MOVS     r2,#0xf0
0000de  21be              MOVS     r1,#0xbe
0000e0  203c              MOVS     r0,#0x3c
0000e2  f7fffffe          BL       Show_Str
;;;149    		delay_ms(200);				  
0000e6  20c8              MOVS     r0,#0xc8
0000e8  f7fffffe          BL       delay_ms
;;;150    		LCD_Fill(60,190,240,146,WHITE);//清除显示	     
0000ec  f64f70ff          MOV      r0,#0xffff
0000f0  2392              MOVS     r3,#0x92
0000f2  22f0              MOVS     r2,#0xf0
0000f4  21be              MOVS     r1,#0xbe
0000f6  9000              STR      r0,[sp,#0]
0000f8  203c              MOVS     r0,#0x3c
0000fa  f7fffffe          BL       LCD_Fill
;;;151    		delay_ms(200);				  
0000fe  20c8              MOVS     r0,#0xc8
000100  f7fffffe          BL       delay_ms
                  |L4.260|
000104  980a              LDR      r0,[sp,#0x28]         ;146
000106  2800              CMP      r0,#0                 ;146
000108  d0e1              BEQ      |L4.206|
00010a  f1b80f00          CMP      r8,#0                 ;146
00010e  d0de              BEQ      |L4.206|
000110  2f00              CMP      r7,#0                 ;146
000112  d0dc              BEQ      |L4.206|
;;;152    	}  	 
;;;153     	//记录索引
;;;154        res=f_opendir(&wavdir,"0:/MUSIC"); //打开目录
000114  a14e              ADR      r1,|L4.592|
000116  a80c              ADD      r0,sp,#0x30
000118  f7fffffe          BL       f_opendir
00011c  4605              MOV      r5,r0
;;;155    	if(res==FR_OK)
00011e  bb1d              CBNZ     r5,|L4.360|
;;;156    	{
;;;157    		curindex=0;//当前索引为0
000120  2400              MOVS     r4,#0
;;;158    		while(1)//全部查询一遍
000122  e01f              B        |L4.356|
                  |L4.292|
;;;159    		{
;;;160    			temp=wavdir.index;								//记录当前index
000124  f8bdb036          LDRH     r11,[sp,#0x36]
;;;161    	        res=f_readdir(&wavdir,&wavfileinfo);       		//读取目录下的一个文件
000128  a904              ADD      r1,sp,#0x10
00012a  a80c              ADD      r0,sp,#0x30
00012c  f7fffffe          BL       f_readdir
000130  4605              MOV      r5,r0
;;;162    	        if(res!=FR_OK||wavfileinfo.fname[0]==0)break;	//错误了/到末尾了,退出		  
000132  b915              CBNZ     r5,|L4.314|
000134  f89d0019          LDRB     r0,[sp,#0x19]
000138  b900              CBNZ     r0,|L4.316|
                  |L4.314|
00013a  e014              B        |L4.358|
                  |L4.316|
;;;163         		fn=(u8*)(*wavfileinfo.lfname?wavfileinfo.lfname:wavfileinfo.fname);			 
00013c  980a              LDR      r0,[sp,#0x28]
00013e  7800              LDRB     r0,[r0,#0]
000140  b108              CBZ      r0,|L4.326|
000142  980a              LDR      r0,[sp,#0x28]
000144  e001              B        |L4.330|
                  |L4.326|
000146  f10d0019          ADD      r0,sp,#0x19
                  |L4.330|
00014a  4682              MOV      r10,r0
;;;164    			res=f_typetell(fn);	
00014c  4650              MOV      r0,r10
00014e  f7fffffe          BL       f_typetell
000152  4605              MOV      r5,r0
;;;165    			if((res&0XF0)==0X40)//取高四位,看看是不是音乐文件	
000154  f00500f0          AND      r0,r5,#0xf0
000158  2840              CMP      r0,#0x40
00015a  d103              BNE      |L4.356|
;;;166    			{
;;;167    				wavindextbl[curindex]=temp;//记录索引
00015c  f827b014          STRH     r11,[r7,r4,LSL #1]
;;;168    				curindex++;
000160  1c60              ADDS     r0,r4,#1
000162  b284              UXTH     r4,r0
                  |L4.356|
000164  e7de              B        |L4.292|
                  |L4.358|
000166  bf00              NOP                            ;162
                  |L4.360|
;;;169    			}	    
;;;170    		} 
;;;171    	}   
;;;172       	curindex=0;											//从0开始显示
000168  2400              MOVS     r4,#0
;;;173       	res=f_opendir(&wavdir,(const TCHAR*)"0:/MUSIC"); 	//打开目录
00016a  a139              ADR      r1,|L4.592|
00016c  a80c              ADD      r0,sp,#0x30
00016e  f7fffffe          BL       f_opendir
000172  4605              MOV      r5,r0
;;;174    	while(res==FR_OK)//打开成功
000174  e04f              B        |L4.534|
                  |L4.374|
;;;175    	{	
;;;176    		dir_sdi(&wavdir,wavindextbl[curindex]);			//改变当前目录索引	   
000176  f8371014          LDRH     r1,[r7,r4,LSL #1]
00017a  a80c              ADD      r0,sp,#0x30
00017c  f7fffffe          BL       dir_sdi
;;;177            res=f_readdir(&wavdir,&wavfileinfo);       		//读取目录下的一个文件
000180  a904              ADD      r1,sp,#0x10
000182  a80c              ADD      r0,sp,#0x30
000184  f7fffffe          BL       f_readdir
000188  4605              MOV      r5,r0
;;;178            if(res!=FR_OK||wavfileinfo.fname[0]==0)break;	//错误了/到末尾了,退出
00018a  b915              CBNZ     r5,|L4.402|
00018c  f89d0019          LDRB     r0,[sp,#0x19]
000190  b900              CBNZ     r0,|L4.404|
                  |L4.402|
000192  e042              B        |L4.538|
                  |L4.404|
;;;179         	fn=(u8*)(*wavfileinfo.lfname?wavfileinfo.lfname:wavfileinfo.fname);			 
000194  980a              LDR      r0,[sp,#0x28]
000196  7800              LDRB     r0,[r0,#0]
000198  b108              CBZ      r0,|L4.414|
00019a  980a              LDR      r0,[sp,#0x28]
00019c  e001              B        |L4.418|
                  |L4.414|
00019e  f10d0019          ADD      r0,sp,#0x19
                  |L4.418|
0001a2  4682              MOV      r10,r0
;;;180    		strcpy((char*)pname,"0:/MUSIC/");				//复制路径(目录)
0001a4  a135              ADR      r1,|L4.636|
0001a6  4640              MOV      r0,r8
0001a8  f7fffffe          BL       strcpy
;;;181    		strcat((char*)pname,(const char*)fn);  			//将文件名接在后面
0001ac  4651              MOV      r1,r10
0001ae  4640              MOV      r0,r8
0001b0  f7fffffe          BL       strcat
;;;182     		LCD_Fill(60,190,240,190+16,WHITE);				//清除之前的显示
0001b4  f64f70ff          MOV      r0,#0xffff
0001b8  23ce              MOVS     r3,#0xce
0001ba  22f0              MOVS     r2,#0xf0
0001bc  21be              MOVS     r1,#0xbe
0001be  9000              STR      r0,[sp,#0]
0001c0  203c              MOVS     r0,#0x3c
0001c2  f7fffffe          BL       LCD_Fill
;;;183    		Show_Str(60,190,240-60,16,fn,16,0);				//显示歌曲名字 
0001c6  2000              MOVS     r0,#0
0001c8  2110              MOVS     r1,#0x10
0001ca  460b              MOV      r3,r1
0001cc  22b4              MOVS     r2,#0xb4
0001ce  e9cda100          STRD     r10,r1,[sp,#0]
0001d2  9002              STR      r0,[sp,#8]
0001d4  21be              MOVS     r1,#0xbe
0001d6  203c              MOVS     r0,#0x3c
0001d8  f7fffffe          BL       Show_Str
;;;184    		audio_index_show(curindex+1,totwavnum);
0001dc  1c61              ADDS     r1,r4,#1
0001de  b288              UXTH     r0,r1
0001e0  4631              MOV      r1,r6
0001e2  f7fffffe          BL       audio_index_show
;;;185    		key=audio_play_song(pname); 			 		//播放这个音频文件
0001e6  4640              MOV      r0,r8
0001e8  f7fffffe          BL       audio_play_song
0001ec  4681              MOV      r9,r0
;;;186    		if(key==KEY2_PRES)		//上一曲
0001ee  f1b90f03          CMP      r9,#3
0001f2  d106              BNE      |L4.514|
;;;187    		{
;;;188    			if(curindex)curindex--;
0001f4  b114              CBZ      r4,|L4.508|
0001f6  1e60              SUBS     r0,r4,#1
0001f8  b284              UXTH     r4,r0
0001fa  e00c              B        |L4.534|
                  |L4.508|
;;;189    			else curindex=totwavnum-1;
0001fc  1e70              SUBS     r0,r6,#1
0001fe  b284              UXTH     r4,r0
000200  e009              B        |L4.534|
                  |L4.514|
;;;190     		}else if(key==KEY0_PRES)//下一曲
000202  f1b90f01          CMP      r9,#1
000206  d105              BNE      |L4.532|
;;;191    		{
;;;192    			curindex++;		   	
000208  1c60              ADDS     r0,r4,#1
00020a  b284              UXTH     r4,r0
;;;193    			if(curindex>=totwavnum)curindex=0;//到末尾的时候,自动从头开始
00020c  42b4              CMP      r4,r6
00020e  db02              BLT      |L4.534|
000210  2400              MOVS     r4,#0
000212  e000              B        |L4.534|
                  |L4.532|
;;;194     		}else break;	//产生了错误 	 
000214  e001              B        |L4.538|
                  |L4.534|
000216  2d00              CMP      r5,#0                 ;174
000218  d0ad              BEQ      |L4.374|
                  |L4.538|
00021a  bf00              NOP                            ;178
;;;195    	} 											  
;;;196    	myfree(SRAMIN,wavfileinfo.lfname);	//释放内存			    
00021c  2000              MOVS     r0,#0
00021e  990a              LDR      r1,[sp,#0x28]
000220  f7fffffe          BL       myfree
;;;197    	myfree(SRAMIN,pname);				//释放内存			    
000224  4641              MOV      r1,r8
000226  2000              MOVS     r0,#0
000228  f7fffffe          BL       myfree
;;;198    	myfree(SRAMIN,wavindextbl);			//释放内存	 
00022c  4639              MOV      r1,r7
00022e  2000              MOVS     r0,#0
000230  f7fffffe          BL       myfree
;;;199    } 
000234  b015              ADD      sp,sp,#0x54
000236  e8bd8ff0          POP      {r4-r11,pc}
;;;200    //播放某个音频文件
                          ENDP

00023a  0000              DCW      0x0000
                  |L4.572|
00023c  4d555349          DCB      "MUSIC",206,196,188,254,188,208,180,237,206,243,"!",0
000240  43cec4bc
000244  febcd0b4
000248  edcef321
00024c  00      
00024d  00                DCB      0
00024e  00                DCB      0
00024f  00                DCB      0
                  |L4.592|
000250  303a2f4d          DCB      "0:/MUSIC",0
000254  55534943
000258  00      
000259  00                DCB      0
00025a  00                DCB      0
00025b  00                DCB      0
                  |L4.604|
00025c  c3bbd3d0          DCB      195,187,211,208,210,244,192,214,206,196,188,254,"!",0
000260  d2f4c0d6
000264  cec4bcfe
000268  2100    
00026a  00                DCB      0
00026b  00                DCB      0
                  |L4.620|
00026c  c4dab4e6          DCB      196,218,180,230,183,214,197,228,202,167,176,220,"!",0
000270  b7d6c5e4
000274  caa7b0dc
000278  2100    
00027a  00                DCB      0
00027b  00                DCB      0
                  |L4.636|
00027c  303a2f4d          DCB      "0:/MUSIC/",0
000280  55534943
000284  2f00    
000286  00                DCB      0
000287  00                DCB      0

                          AREA ||i.audio_play_song||, CODE, READONLY, ALIGN=1

                  audio_play_song PROC
;;;200    //播放某个音频文件
;;;201    u8 audio_play_song(u8* fname)
000000  b570              PUSH     {r4-r6,lr}
;;;202    {
000002  4605              MOV      r5,r0
;;;203    	u8 res;  
;;;204    	res=f_typetell(fname); 
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       f_typetell
00000a  4604              MOV      r4,r0
;;;205    	switch(res)
00000c  2c40              CMP      r4,#0x40
00000e  d104              BNE      |L5.26|
;;;206    	{
;;;207    		case T_WAV:
;;;208    			res=wav_play_song(fname);
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       wav_play_song
000016  4604              MOV      r4,r0
;;;209    			break;
000018  e001              B        |L5.30|
                  |L5.26|
;;;210    		default://其他文件,自动跳转到下一曲
;;;211    ////////			printf("can't play:%s\r\n",fname);
;;;212    			res=KEY0_PRES;
00001a  2401              MOVS     r4,#1
;;;213    			break;
00001c  bf00              NOP      
                  |L5.30|
00001e  bf00              NOP                            ;209
;;;214    	}
;;;215    	return res;
000020  4620              MOV      r0,r4
;;;216    }
000022  bd70              POP      {r4-r6,pc}
;;;217    
                          ENDP


                          AREA ||i.audio_start||, CODE, READONLY, ALIGN=2

                  audio_start PROC
;;;32     //开始音频播放
;;;33     void audio_start(void)
000000  b510              PUSH     {r4,lr}
;;;34     {
;;;35     	audiodev.status=3<<0;//开始播放+非暂停
000002  2003              MOVS     r0,#3
000004  4902              LDR      r1,|L6.16|
000006  7408              STRB     r0,[r1,#0x10]
;;;36     	I2S_Play_Start();
000008  f7fffffe          BL       I2S_Play_Start
;;;37     } 
00000c  bd10              POP      {r4,pc}
;;;38     //关闭音频播放
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      audiodev

                          AREA ||i.audio_stop||, CODE, READONLY, ALIGN=2

                  audio_stop PROC
;;;38     //关闭音频播放
;;;39     void audio_stop(void)
000000  b510              PUSH     {r4,lr}
;;;40     {
;;;41     	audiodev.status=0;
000002  2000              MOVS     r0,#0
000004  4902              LDR      r1,|L7.16|
000006  7408              STRB     r0,[r1,#0x10]
;;;42     	I2S_Play_Stop();
000008  f7fffffe          BL       I2S_Play_Stop
;;;43     }  
00000c  bd10              POP      {r4,pc}
;;;44     //得到path路径下,目标文件的总个数
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      audiodev

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  audiodev
                          %        17

                          AREA ||.data||, DATA, ALIGN=1

                  playtime
000000  ffff              DCW      0xffff

;*** Start embedded assembler ***

#line 1 "..\\APP\\audioplay.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_audioplay_c_fdebf94c____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___11_audioplay_c_fdebf94c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_audioplay_c_fdebf94c____REVSH|
#line 144
|__asm___11_audioplay_c_fdebf94c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
