; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\h_state_machine.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\h_state_machine.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\HARDWARE\LED -I..\HARDWARE\LCD -I..\HARDWARE\KEY -I..\HARDWARE\SRAM -I..\HARDWARE\SDIO -I..\MALLOC -I..\USMART -I..\HARDWARE\SPI -I..\HARDWARE\W25QXX -I..\FATFS\exfuns -I..\FATFS\src -I..\TEXT -I..\FWLIB\inc -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\I2S -I..\HARDWARE\WM8978 -I..\APP -I..\AUDIOCODEC\wav -I..\new_user -I..\new_user\task -I..\new_user\MVC -I..\..\..\module\common -I..\..\..\module\common\InsertLog -I..\..\..\module\common\loopqueue -I..\..\..\module\common\StateMachine -I..\..\..\module\common\priorityqueue -I..\..\..\module\common\Math -I..\..\..\module\component\const_loop_scheduler -I..\..\..\module\component\const_loop_scheduler\TemplateTask -I..\..\..\module\component\const_loop_scheduler\HierarchicalSM -I..\..\..\module\component\BlockableStateMachine -I..\..\..\module\customize\ButtonModule -I..\..\..\module\external\Segger\SEGGER_RTT_V640\Syscalls -I..\..\..\module\external\Segger\SEGGER_RTT_V640\RTT -I.\RTE\_AudioPlayer -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include" -I"D:\Program Files\ARM\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_COMPILER_PRESENT -DX_TASK_LOG_DEBUG_METHOD=SeggerRTT_LogDebug --omf_browse=..\obj\h_state_machine.crf ..\..\..\module\component\const_loop_scheduler\HierarchicalSM\h_state_machine.c]
                          THUMB

                          AREA ||i.freeze_hsm||, CODE, READONLY, ALIGN=1

                  freeze_hsm PROC
;;;104    
;;;105    e_x_task_error_code freeze_hsm(const s_HSM_Manager *p_manager)
000000  4601              MOV      r1,r0
;;;106    {
;;;107        if(p_manager == (s_HSM_Manager *)0) 
000002  b909              CBNZ     r1,|L1.8|
;;;108        {
;;;109            return xte_pointer_null; //X_TASK_LOG(1,(" fatal freeze error !!! : task manager pointer null \r\n"));
000004  2001              MOVS     r0,#1
                  |L1.6|
;;;110        }
;;;111        if(*p_manager ->p_is_init_ok == 0) 
;;;112        {
;;;113            return xte_init_failed; //X_TASK_LOG(1,(" fatal freeze error !!! : init failed \r\n"));
;;;114        }
;;;115    
;;;116        *p_manager ->p_is_freeze = 1;
;;;117    
;;;118        return xte_ok;
;;;119    }
000006  4770              BX       lr
                  |L1.8|
000008  6888              LDR      r0,[r1,#8]            ;111
00000a  7800              LDRB     r0,[r0,#0]            ;111
00000c  b908              CBNZ     r0,|L1.18|
00000e  2003              MOVS     r0,#3                 ;113
000010  e7f9              B        |L1.6|
                  |L1.18|
000012  2001              MOVS     r0,#1                 ;116
000014  684a              LDR      r2,[r1,#4]            ;116
000016  7010              STRB     r0,[r2,#0]            ;116
000018  2000              MOVS     r0,#0                 ;118
00001a  e7f4              B        |L1.6|
;;;120    e_x_task_error_code unfreeze_hsm(const s_HSM_Manager *p_manager)
                          ENDP


                          AREA ||i.hsm_init||, CODE, READONLY, ALIGN=1

                  hsm_init PROC
;;;64     /********************************************************************************************/
;;;65     e_x_task_error_code hsm_init(const s_HSM_Manager *p_manager)
000000  b510              PUSH     {r4,lr}
;;;66     {
000002  4604              MOV      r4,r0
;;;67         if(p_manager == (s_HSM_Manager *)0 ) 
000004  b90c              CBNZ     r4,|L2.10|
;;;68         {
;;;69             return xte_pointer_null;
000006  2001              MOVS     r0,#1
                  |L2.8|
;;;70         }
;;;71     
;;;72         if(p_manager ->p_hsm_func == (hsm_task_func)0 
;;;73                 || p_manager ->p_is_freeze == (uint8_t *)0 
;;;74                 || p_manager ->p_is_init_ok == (uint8_t *)0
;;;75                 || p_manager ->p_hsm_param == (s_T_taskBaseParam *)0)  //X_TASK_LOG(1,(" fatal init error !!! : task list null \r\n"));
;;;76         {
;;;77             return xte_pointer_null;
;;;78         }
;;;79     
;;;80         if(p_manager ->h_deepth > MAX_HIERARCHICAL_DEEPTH) {return xte_beyond_scope;}
;;;81     
;;;82         if(hsm_param_init(p_manager ->p_hsm_param,p_manager ->h_deepth) != X_True) {return xte_unknow_error;}
;;;83     
;;;84         *p_manager ->p_is_freeze = 0;
;;;85         *p_manager ->p_is_init_ok = 1;//X_TASK_LOG(1,(" ~~~~~~ task init success ~~~~~~~ ; total task instance number %d \r\n",p_manager -> instance_num));
;;;86         return xte_ok;
;;;87     }
000008  bd10              POP      {r4,pc}
                  |L2.10|
00000a  6820              LDR      r0,[r4,#0]            ;72
00000c  b128              CBZ      r0,|L2.26|
00000e  6860              LDR      r0,[r4,#4]            ;73
000010  b118              CBZ      r0,|L2.26|
000012  68a0              LDR      r0,[r4,#8]            ;74
000014  b108              CBZ      r0,|L2.26|
000016  6920              LDR      r0,[r4,#0x10]         ;75
000018  b908              CBNZ     r0,|L2.30|
                  |L2.26|
00001a  2001              MOVS     r0,#1                 ;77
00001c  e7f4              B        |L2.8|
                  |L2.30|
00001e  7b20              LDRB     r0,[r4,#0xc]          ;80
000020  280a              CMP      r0,#0xa               ;80
000022  dd01              BLE      |L2.40|
000024  2002              MOVS     r0,#2                 ;80
000026  e7ef              B        |L2.8|
                  |L2.40|
000028  7b21              LDRB     r1,[r4,#0xc]          ;82
00002a  6920              LDR      r0,[r4,#0x10]         ;82
00002c  f7fffffe          BL       hsm_param_init
000030  2801              CMP      r0,#1                 ;82
000032  d001              BEQ      |L2.56|
000034  2004              MOVS     r0,#4                 ;82
000036  e7e7              B        |L2.8|
                  |L2.56|
000038  2000              MOVS     r0,#0                 ;84
00003a  6861              LDR      r1,[r4,#4]            ;84
00003c  7008              STRB     r0,[r1,#0]            ;84
00003e  2001              MOVS     r0,#1                 ;85
000040  68a1              LDR      r1,[r4,#8]            ;85
000042  7008              STRB     r0,[r1,#0]            ;85
000044  2000              MOVS     r0,#0                 ;86
000046  e7df              B        |L2.8|
;;;88     
                          ENDP


                          AREA ||i.hsm_one_level_param_Init||, CODE, READONLY, ALIGN=1

                  hsm_one_level_param_Init PROC
;;;24     /********************************************************************************************/
;;;25     X_Void hsm_one_level_param_Init(s_T_taskBaseParam * p_param)
000000  b510              PUSH     {r4,lr}
;;;26     {
000002  4604              MOV      r4,r0
;;;27         if(p_param == (s_T_taskBaseParam *)0) {return;} // still have the risk of called by the user ,so the null pointer check is necessary 
000004  b904              CBNZ     r4,|L3.8|
                  |L3.6|
;;;28     
;;;29         p_param ->level_cur.cur_line_num      = 0;                                        
;;;30         p_param ->level_cur.ms_backup         = 0;                                           
;;;31         p_param ->level_cur.isErrorOccur      = 0;                                                                                                             
;;;32         X_Task_ByteBufClear(p_param ->level_cur.if_condition_buf,MAX_HSM_IF_NEST_DEEPTH + 1);           
;;;33         X_Task_32bitsBufClear(p_param ->level_cur.if_line_num_buf,MAX_HSM_IF_NEST_DEEPTH + 1);           
;;;34         X_Task_ByteBufClear(p_param ->level_cur.loop_condition_buf,MAX_HSM_LOOP_NEST_DEEPTH + 1);           
;;;35         X_Task_32bitsBufClear(p_param ->level_cur.loop_line_num_buf,MAX_HSM_LOOP_NEST_DEEPTH + 1);           
;;;36         X_Task_32bitsBufClear(p_param ->level_cur.loop_end_line_num_buf,MAX_HSM_LOOP_NEST_DEEPTH + 1);           
;;;37         X_Task_ByteBufClear(&p_param ->level_cur.if_line_flag_array[0][0],(MAX_HSM_LOOP_NEST_DEEPTH + 2) *(MAX_HSM_IF_NEST_DEEPTH + 1) );          
;;;38     
;;;39     }
000006  bd10              POP      {r4,pc}
                  |L3.8|
000008  2000              MOVS     r0,#0                 ;29
00000a  6060              STR      r0,[r4,#4]            ;29
00000c  6020              STR      r0,[r4,#0]            ;30
00000e  f884007c          STRB     r0,[r4,#0x7c]         ;31
000012  2106              MOVS     r1,#6                 ;32
000014  f1040008          ADD      r0,r4,#8              ;32
000018  f7fffffe          BL       X_Task_ByteBufClear
00001c  2106              MOVS     r1,#6                 ;33
00001e  f1040010          ADD      r0,r4,#0x10           ;33
000022  f7fffffe          BL       X_Task_32bitsBufClear
000026  2105              MOVS     r1,#5                 ;34
000028  f1040028          ADD      r0,r4,#0x28           ;34
00002c  f7fffffe          BL       X_Task_ByteBufClear
000030  2105              MOVS     r1,#5                 ;35
000032  f1040030          ADD      r0,r4,#0x30           ;35
000036  f7fffffe          BL       X_Task_32bitsBufClear
00003a  2105              MOVS     r1,#5                 ;36
00003c  f1040044          ADD      r0,r4,#0x44           ;36
000040  f7fffffe          BL       X_Task_32bitsBufClear
000044  2124              MOVS     r1,#0x24              ;37
000046  f1040058          ADD      r0,r4,#0x58           ;37
00004a  f7fffffe          BL       X_Task_ByteBufClear
00004e  bf00              NOP      
000050  e7d9              B        |L3.6|
;;;40     static X_Boolean hsm_param_init(s_T_taskBaseParam * p_top_param,uint8_t deepth)
                          ENDP


                          AREA ||i.hsm_param_init||, CODE, READONLY, ALIGN=1

                  hsm_param_init PROC
;;;39     }
;;;40     static X_Boolean hsm_param_init(s_T_taskBaseParam * p_top_param,uint8_t deepth)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;41     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;42         uint8_t i;
;;;43         s_T_taskBaseParam * p_cur = p_top_param;
000008  462c              MOV      r4,r5
;;;44     
;;;45         // no need null pointer check ,because the only caller is hsm self ;
;;;46         hsm_one_level_param_Init(p_top_param);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       hsm_one_level_param_Init
;;;47     
;;;48         for(i=0; i<deepth; i++)
000010  2700              MOVS     r7,#0
000012  e00d              B        |L4.48|
                  |L4.20|
;;;49         {
;;;50             if(p_cur -> p_level_next != (s_T_taskBaseParam *)0)
000014  f8d40080          LDR      r0,[r4,#0x80]
000018  b110              CBZ      r0,|L4.32|
;;;51             {
;;;52                 p_cur = p_cur ->p_level_next;
00001a  f8d44080          LDR      r4,[r4,#0x80]
00001e  e002              B        |L4.38|
                  |L4.32|
;;;53             }
;;;54             else
;;;55             {
;;;56                 return X_False;
000020  2000              MOVS     r0,#0
                  |L4.34|
;;;57             }
;;;58     
;;;59             hsm_one_level_param_Init(p_cur);
;;;60         }
;;;61     
;;;62         return X_True;
;;;63     }
000022  e8bd81f0          POP      {r4-r8,pc}
                  |L4.38|
000026  4620              MOV      r0,r4                 ;59
000028  f7fffffe          BL       hsm_one_level_param_Init
00002c  1c78              ADDS     r0,r7,#1              ;48
00002e  b2c7              UXTB     r7,r0                 ;48
                  |L4.48|
000030  42b7              CMP      r7,r6                 ;48
000032  dbef              BLT      |L4.20|
000034  2001              MOVS     r0,#1                 ;62
000036  e7f4              B        |L4.34|
;;;64     /********************************************************************************************/
                          ENDP


                          AREA ||i.hsm_run||, CODE, READONLY, ALIGN=1

                  hsm_run PROC
;;;88     
;;;89     e_x_task_error_code hsm_run(const s_HSM_Manager *p_manager,uint32_t ms)
000000  b570              PUSH     {r4-r6,lr}
;;;90     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;91         if(p_manager == (s_HSM_Manager *)0) 
000006  b90c              CBNZ     r4,|L5.12|
;;;92         {
;;;93             return xte_pointer_null; //X_TASK_LOG(1,(" fatal scheduler error !!! : task manager pointer null \r\n"));
000008  2001              MOVS     r0,#1
                  |L5.10|
;;;94         }
;;;95         if(*p_manager ->p_is_init_ok == 0) 
;;;96         {
;;;97             return xte_init_failed; //X_TASK_LOG(1,(" fatal scheduler error !!! : init failed \r\n"));
;;;98         }
;;;99         if(*p_manager ->p_is_freeze != 0) {return xte_frozen;}
;;;100         
;;;101        p_manager ->p_hsm_func(ms,p_manager ->p_hsm_param);
;;;102    	return xte_ok;
;;;103    }
00000a  bd70              POP      {r4-r6,pc}
                  |L5.12|
00000c  68a0              LDR      r0,[r4,#8]            ;95
00000e  7800              LDRB     r0,[r0,#0]            ;95
000010  b908              CBNZ     r0,|L5.22|
000012  2003              MOVS     r0,#3                 ;97
000014  e7f9              B        |L5.10|
                  |L5.22|
000016  6860              LDR      r0,[r4,#4]            ;99
000018  7800              LDRB     r0,[r0,#0]            ;99
00001a  b108              CBZ      r0,|L5.32|
00001c  2005              MOVS     r0,#5                 ;99
00001e  e7f4              B        |L5.10|
                  |L5.32|
000020  4628              MOV      r0,r5                 ;101
000022  6822              LDR      r2,[r4,#0]            ;101
000024  6921              LDR      r1,[r4,#0x10]         ;101
000026  4790              BLX      r2                    ;101
000028  2000              MOVS     r0,#0                 ;102
00002a  e7ee              B        |L5.10|
;;;104    
                          ENDP


                          AREA ||i.restart_hsm||, CODE, READONLY, ALIGN=1

                  restart_hsm PROC
;;;134    }
;;;135    e_x_task_error_code restart_hsm(const s_HSM_Manager *p_manager)
000000  b510              PUSH     {r4,lr}
;;;136    {
000002  4604              MOV      r4,r0
;;;137        if(p_manager == (s_HSM_Manager *)0) 
000004  b90c              CBNZ     r4,|L6.10|
;;;138        {
;;;139            return xte_pointer_null;   ////////X_TASK_LOG(1,(" fatal restart error !!! : task manager pointer null \r\n"));
000006  2001              MOVS     r0,#1
                  |L6.8|
;;;140        }
;;;141        if(*p_manager ->p_is_init_ok == 0) 
;;;142        {
;;;143            return xte_init_failed;  /////////X_TASK_LOG(1,(" fatal restart error !!! : init failed \r\n"));
;;;144        }
;;;145    
;;;146        *p_manager ->p_is_freeze = 0;
;;;147    
;;;148        hsm_param_init(p_manager ->p_hsm_param,p_manager ->h_deepth);
;;;149    
;;;150        return  xte_ok;
;;;151    }
000008  bd10              POP      {r4,pc}
                  |L6.10|
00000a  68a0              LDR      r0,[r4,#8]            ;141
00000c  7800              LDRB     r0,[r0,#0]            ;141
00000e  b908              CBNZ     r0,|L6.20|
000010  2003              MOVS     r0,#3                 ;143
000012  e7f9              B        |L6.8|
                  |L6.20|
000014  2000              MOVS     r0,#0                 ;146
000016  6861              LDR      r1,[r4,#4]            ;146
000018  7008              STRB     r0,[r1,#0]            ;146
00001a  7b21              LDRB     r1,[r4,#0xc]          ;148
00001c  6920              LDR      r0,[r4,#0x10]         ;148
00001e  f7fffffe          BL       hsm_param_init
000022  2000              MOVS     r0,#0                 ;150
000024  e7f0              B        |L6.8|
;;;152    
                          ENDP


                          AREA ||i.unfreeze_hsm||, CODE, READONLY, ALIGN=1

                  unfreeze_hsm PROC
;;;119    }
;;;120    e_x_task_error_code unfreeze_hsm(const s_HSM_Manager *p_manager)
000000  4601              MOV      r1,r0
;;;121    {
;;;122        if(p_manager == (s_HSM_Manager *)0) 
000002  b909              CBNZ     r1,|L7.8|
;;;123        {
;;;124            return xte_pointer_null; //X_TASK_LOG(1,(" fatal unfreeze error !!! : task manager pointer null \r\n"));
000004  2001              MOVS     r0,#1
                  |L7.6|
;;;125        }
;;;126        if(*p_manager ->p_is_init_ok == 0) 
;;;127        {
;;;128            return xte_init_failed; // X_TASK_LOG(1,(" fatal unfreeze error !!! : init failed \r\n"));
;;;129        }
;;;130    
;;;131        *p_manager ->p_is_freeze = 0;
;;;132    
;;;133        return xte_ok;
;;;134    }
000006  4770              BX       lr
                  |L7.8|
000008  6888              LDR      r0,[r1,#8]            ;126
00000a  7800              LDRB     r0,[r0,#0]            ;126
00000c  b908              CBNZ     r0,|L7.18|
00000e  2003              MOVS     r0,#3                 ;128
000010  e7f9              B        |L7.6|
                  |L7.18|
000012  2000              MOVS     r0,#0                 ;131
000014  684a              LDR      r2,[r1,#4]            ;131
000016  7010              STRB     r0,[r2,#0]            ;131
000018  bf00              NOP                            ;133
00001a  e7f4              B        |L7.6|
;;;135    e_x_task_error_code restart_hsm(const s_HSM_Manager *p_manager)
                          ENDP

