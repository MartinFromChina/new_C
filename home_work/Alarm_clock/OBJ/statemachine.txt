; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\statemachine.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\statemachine.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\HARDWARE\LED -I..\HARDWARE\LCD -I..\HARDWARE\KEY -I..\HARDWARE\SRAM -I..\HARDWARE\SDIO -I..\MALLOC -I..\USMART -I..\HARDWARE\SPI -I..\HARDWARE\W25QXX -I..\FATFS\exfuns -I..\FATFS\src -I..\TEXT -I..\FWLIB\inc -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\I2S -I..\HARDWARE\WM8978 -I..\APP -I..\AUDIOCODEC\wav -I..\new_user -I..\new_user\task -I..\new_user\MVC -I..\..\..\module\common -I..\..\..\module\common\InsertLog -I..\..\..\module\common\loopqueue -I..\..\..\module\common\StateMachine -I..\..\..\module\common\priorityqueue -I..\..\..\module\common\Math -I..\..\..\module\component\const_loop_scheduler -I..\..\..\module\component\const_loop_scheduler\TemplateTask -I..\..\..\module\component\const_loop_scheduler\HierarchicalSM -I..\..\..\module\component\BlockableStateMachine -I..\..\..\module\customize\ButtonModule -I..\..\..\module\external\Segger\SEGGER_RTT_V640\Syscalls -I..\..\..\module\external\Segger\SEGGER_RTT_V640\RTT -I.\RTE\_AudioPlayer -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include" -I"D:\Program Files\ARM\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_COMPILER_PRESENT -DX_TASK_LOG_DEBUG_METHOD=SeggerRTT_LogDebug --omf_browse=..\obj\statemachine.crf ..\..\..\module\common\StateMachine\StateMachine.c]
                          THUMB

                          AREA ||i.mStateMachineGetSuddenChangeState||, CODE, READONLY, ALIGN=1

                  mStateMachineGetSuddenChangeState PROC
;;;60     
;;;61     StateNumber mStateMachineGetSuddenChangeState(const s_StateMachine *p_ss)
000000  4601              MOV      r1,r0
;;;62     {
;;;63     	if(p_ss == X_Null) {return APP_POINTER_NULL;}
000002  b909              CBNZ     r1,|L1.8|
000004  2003              MOVS     r0,#3
                  |L1.6|
;;;64     	return *p_ss ->p_SuddenChangeState;
;;;65     }
000006  4770              BX       lr
                  |L1.8|
000008  68c8              LDR      r0,[r1,#0xc]          ;64
00000a  7800              LDRB     r0,[r0,#0]            ;64
00000c  e7fb              B        |L1.6|
                          ENDP


                          AREA ||i.mStateMachineRun||, CODE, READONLY, ALIGN=1

                  mStateMachineRun PROC
;;;2      
;;;3      m_app_result mStateMachineRun( const s_StateMachine *p_ssp
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4      						,s_StateMachineParam *p_smp
;;;5      						,X_Void(*StateRecorder)(StateNumber state_going_to_leave,StateNumber state_going_to_enter))
;;;6      {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;7      	StateNumber current_state,previous_state;
;;;8      
;;;9      	if(p_ssp == X_Null || p_smp == X_Null) {return APP_POINTER_NULL;}
00000a  b104              CBZ      r4,|L2.14|
00000c  b917              CBNZ     r7,|L2.20|
                  |L2.14|
00000e  2003              MOVS     r0,#3
                  |L2.16|
;;;10     	if(p_ssp->p_Action == X_Null){return APP_POINTER_NULL;}
;;;11     	if(p_ssp->AllStateNum > MAX_STATE_NUMBER || p_ssp->AllStateNum == 0) {return APP_BEYOND_SCOPE;}
;;;12     
;;;13     	current_state = (*p_ssp->p_CurrentStateNum);
;;;14     	if(*p_ssp ->p_SuddenChangeState != INVALID_STATE_NUMBER) 
;;;15     	{
;;;16     		current_state = *p_ssp ->p_SuddenChangeState;
;;;17     		*p_ssp ->p_SuddenChangeState = INVALID_STATE_NUMBER;
;;;18     	}
;;;19     	if(current_state > MAX_STATE_NUMBER || (current_state + 1) > p_ssp->AllStateNum)
;;;20     	{
;;;21     		(*p_ssp->p_CurrentStateNum) = DEFAULT_STATE_NUMBER;
;;;22     		return APP_BEYOND_SCOPE;
;;;23     	}
;;;24     
;;;25     	if(p_ssp ->p_Action[current_state].Action != X_Null)
;;;26     	{
;;;27     		previous_state = current_state;
;;;28     		p_smp->current_state = current_state;
;;;29     		current_state = p_ssp ->p_Action[current_state].Action(p_smp);
;;;30     
;;;31     
;;;32     		if(*p_ssp ->p_SuddenChangeState != INVALID_STATE_NUMBER) 
;;;33     		{
;;;34     			current_state = *p_ssp ->p_SuddenChangeState;
;;;35     			*p_ssp ->p_SuddenChangeState = INVALID_STATE_NUMBER;
;;;36     		}
;;;37     		
;;;38     		if((current_state+1) > p_ssp->AllStateNum)
;;;39     		{
;;;40     			(*p_ssp->p_CurrentStateNum) = DEFAULT_STATE_NUMBER;
;;;41     			return APP_BEYOND_SCOPE;
;;;42     		}
;;;43     		(*p_ssp->p_CurrentStateNum) = current_state;
;;;44     		
;;;45     		if(previous_state != current_state)
;;;46     		{
;;;47     			if(StateRecorder != X_Null) {StateRecorder(previous_state,current_state);}
;;;48     		}
;;;49     	}
;;;50     	return APP_SUCCESSED;
;;;51     }
000010  e8bd81f0          POP      {r4-r8,pc}
                  |L2.20|
000014  6860              LDR      r0,[r4,#4]            ;10
000016  b908              CBNZ     r0,|L2.28|
000018  2003              MOVS     r0,#3                 ;10
00001a  e7f9              B        |L2.16|
                  |L2.28|
00001c  7820              LDRB     r0,[r4,#0]            ;11
00001e  28fe              CMP      r0,#0xfe              ;11
000020  dc01              BGT      |L2.38|
000022  7820              LDRB     r0,[r4,#0]            ;11
000024  b908              CBNZ     r0,|L2.42|
                  |L2.38|
000026  2002              MOVS     r0,#2                 ;11
000028  e7f2              B        |L2.16|
                  |L2.42|
00002a  68a0              LDR      r0,[r4,#8]            ;13
00002c  7805              LDRB     r5,[r0,#0]            ;13
00002e  68e0              LDR      r0,[r4,#0xc]          ;14
000030  7800              LDRB     r0,[r0,#0]            ;14
000032  28ff              CMP      r0,#0xff              ;14
000034  d004              BEQ      |L2.64|
000036  68e0              LDR      r0,[r4,#0xc]          ;16
000038  7805              LDRB     r5,[r0,#0]            ;16
00003a  20ff              MOVS     r0,#0xff              ;17
00003c  68e1              LDR      r1,[r4,#0xc]          ;17
00003e  7008              STRB     r0,[r1,#0]            ;17
                  |L2.64|
000040  2dfe              CMP      r5,#0xfe              ;19
000042  dc03              BGT      |L2.76|
000044  7821              LDRB     r1,[r4,#0]            ;19
000046  1c68              ADDS     r0,r5,#1              ;19
000048  4281              CMP      r1,r0                 ;19
00004a  da04              BGE      |L2.86|
                  |L2.76|
00004c  2000              MOVS     r0,#0                 ;21
00004e  68a1              LDR      r1,[r4,#8]            ;21
000050  7008              STRB     r0,[r1,#0]            ;21
000052  2002              MOVS     r0,#2                 ;22
000054  e7dc              B        |L2.16|
                  |L2.86|
000056  6860              LDR      r0,[r4,#4]            ;25
000058  f8500025          LDR      r0,[r0,r5,LSL #2]     ;25
00005c  b318              CBZ      r0,|L2.166|
00005e  462e              MOV      r6,r5                 ;27
000060  703d              STRB     r5,[r7,#0]            ;28
000062  6860              LDR      r0,[r4,#4]            ;29
000064  f8501025          LDR      r1,[r0,r5,LSL #2]     ;29
000068  4638              MOV      r0,r7                 ;29
00006a  4788              BLX      r1                    ;29
00006c  4605              MOV      r5,r0                 ;29
00006e  68e0              LDR      r0,[r4,#0xc]          ;32
000070  7800              LDRB     r0,[r0,#0]            ;32
000072  28ff              CMP      r0,#0xff              ;32
000074  d004              BEQ      |L2.128|
000076  68e0              LDR      r0,[r4,#0xc]          ;34
000078  7805              LDRB     r5,[r0,#0]            ;34
00007a  20ff              MOVS     r0,#0xff              ;35
00007c  68e1              LDR      r1,[r4,#0xc]          ;35
00007e  7008              STRB     r0,[r1,#0]            ;35
                  |L2.128|
000080  7821              LDRB     r1,[r4,#0]            ;38
000082  1c68              ADDS     r0,r5,#1              ;38
000084  4281              CMP      r1,r0                 ;38
000086  da04              BGE      |L2.146|
000088  2000              MOVS     r0,#0                 ;40
00008a  68a1              LDR      r1,[r4,#8]            ;40
00008c  7008              STRB     r0,[r1,#0]            ;40
00008e  2002              MOVS     r0,#2                 ;41
000090  e7be              B        |L2.16|
                  |L2.146|
000092  68a0              LDR      r0,[r4,#8]            ;43
000094  7005              STRB     r5,[r0,#0]            ;43
000096  42ae              CMP      r6,r5                 ;45
000098  d005              BEQ      |L2.166|
00009a  f1b80f00          CMP      r8,#0                 ;47
00009e  d002              BEQ      |L2.166|
0000a0  4629              MOV      r1,r5                 ;47
0000a2  4630              MOV      r0,r6                 ;47
0000a4  47c0              BLX      r8                    ;47
                  |L2.166|
0000a6  2000              MOVS     r0,#0                 ;50
0000a8  e7b2              B        |L2.16|
;;;52     
                          ENDP


                          AREA ||i.mStateMachineStateSet||, CODE, READONLY, ALIGN=1

                  mStateMachineStateSet PROC
;;;52     
;;;53     m_app_result mStateMachineStateSet(const s_StateMachine *p_ss,StateNumber state)
000000  4602              MOV      r2,r0
;;;54     {
;;;55     	if(p_ss == X_Null) {return APP_POINTER_NULL;}
000002  b90a              CBNZ     r2,|L3.8|
000004  2003              MOVS     r0,#3
                  |L3.6|
;;;56     	if((state + 1) > p_ss->AllStateNum ) {return APP_BEYOND_SCOPE;}
;;;57     	*p_ss ->p_SuddenChangeState = state;
;;;58     	return APP_SUCCESSED;
;;;59     }
000006  4770              BX       lr
                  |L3.8|
000008  7813              LDRB     r3,[r2,#0]            ;56
00000a  1c48              ADDS     r0,r1,#1              ;56
00000c  4283              CMP      r3,r0                 ;56
00000e  da01              BGE      |L3.20|
000010  2002              MOVS     r0,#2                 ;56
000012  e7f8              B        |L3.6|
                  |L3.20|
000014  68d0              LDR      r0,[r2,#0xc]          ;57
000016  7001              STRB     r1,[r0,#0]            ;57
000018  2000              MOVS     r0,#0                 ;58
00001a  e7f4              B        |L3.6|
;;;60     
                          ENDP

