; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\const_loop_scheduler.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\const_loop_scheduler.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\HARDWARE\LED -I..\HARDWARE\LCD -I..\HARDWARE\KEY -I..\HARDWARE\SRAM -I..\HARDWARE\SDIO -I..\MALLOC -I..\USMART -I..\HARDWARE\SPI -I..\HARDWARE\W25QXX -I..\FATFS\exfuns -I..\FATFS\src -I..\TEXT -I..\FWLIB\inc -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\I2S -I..\HARDWARE\WM8978 -I..\APP -I..\AUDIOCODEC\wav -I..\new_user -I..\new_user\task -I..\new_user\MVC -I..\..\..\module\common -I..\..\..\module\common\InsertLog -I..\..\..\module\common\loopqueue -I..\..\..\module\common\StateMachine -I..\..\..\module\common\priorityqueue -I..\..\..\module\common\Math -I..\..\..\module\component\const_loop_scheduler -I..\..\..\module\component\const_loop_scheduler\TemplateTask -I..\..\..\module\component\const_loop_scheduler\HierarchicalSM -I..\..\..\module\component\BlockableStateMachine -I..\..\..\module\customize\ButtonModule -I..\..\..\module\external\Segger\SEGGER_RTT_V640\Syscalls -I..\..\..\module\external\Segger\SEGGER_RTT_V640\RTT -I.\RTE\_AudioPlayer -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include" -I"D:\Program Files\ARM\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_COMPILER_PRESENT -DX_TASK_LOG_DEBUG_METHOD=SeggerRTT_LogDebug --omf_browse=..\obj\const_loop_scheduler.crf ..\..\..\module\component\const_loop_scheduler\const_loop_scheduler.c]
                          THUMB

                          AREA ||i.freeze_x_task||, CODE, READONLY, ALIGN=1

                  freeze_x_task PROC
;;;59     
;;;60     e_x_task_error_code freeze_x_task(const s_X_Tasks_Manager *p_manager,uint16_t task_id)
000000  b530              PUSH     {r4,r5,lr}
;;;61     {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;62         uint16_t i;
;;;63         X_Boolean isOk = X_False;
000006  2400              MOVS     r4,#0
;;;64     
;;;65         if(p_manager == (s_X_Tasks_Manager *)0) 
000008  b90a              CBNZ     r2,|L1.14|
;;;66         {
;;;67             //X_TASK_LOG(1,(" fatal freeze error !!! : task manager pointer null \r\n"));
;;;68             return xte_pointer_null;
00000a  2001              MOVS     r0,#1
                  |L1.12|
;;;69         }
;;;70         if(*p_manager ->p_is_init_ok == 0) 
;;;71         {
;;;72             //X_TASK_LOG(1,(" fatal freeze error !!! : init failed \r\n"));
;;;73             return xte_init_failed;
;;;74         }
;;;75     
;;;76         for(i=0;i<p_manager -> max_task_num;i++)
;;;77         {
;;;78             if(p_manager ->p_task[i].id == task_id)
;;;79             {
;;;80                 p_manager ->p_freeze_flag_buf[i] = 1;
;;;81                 isOk = X_True;
;;;82                 break;
;;;83             }
;;;84         }
;;;85         return ((isOk == X_True) ? xte_ok : xte_unknow_error);
;;;86     }
00000c  bd30              POP      {r4,r5,pc}
                  |L1.14|
00000e  6850              LDR      r0,[r2,#4]            ;70
000010  7800              LDRB     r0,[r0,#0]            ;70
000012  b908              CBNZ     r0,|L1.24|
000014  2003              MOVS     r0,#3                 ;73
000016  e7f9              B        |L1.12|
                  |L1.24|
000018  2100              MOVS     r1,#0                 ;76
00001a  e00b              B        |L1.52|
                  |L1.28|
00001c  6910              LDR      r0,[r2,#0x10]         ;78
00001e  f8300031          LDRH     r0,[r0,r1,LSL #3]     ;78
000022  4298              CMP      r0,r3                 ;78
000024  d104              BNE      |L1.48|
000026  2001              MOVS     r0,#1                 ;80
000028  68d5              LDR      r5,[r2,#0xc]          ;80
00002a  5468              STRB     r0,[r5,r1]            ;80
00002c  2401              MOVS     r4,#1                 ;81
00002e  e004              B        |L1.58|
                  |L1.48|
000030  1c48              ADDS     r0,r1,#1              ;76
000032  b281              UXTH     r1,r0                 ;76
                  |L1.52|
000034  8810              LDRH     r0,[r2,#0]            ;76
000036  4288              CMP      r0,r1                 ;76
000038  dcf0              BGT      |L1.28|
                  |L1.58|
00003a  bf00              NOP                            ;82
00003c  2c01              CMP      r4,#1                 ;85
00003e  d101              BNE      |L1.68|
000040  2000              MOVS     r0,#0                 ;85
000042  e7e3              B        |L1.12|
                  |L1.68|
000044  2004              MOVS     r0,#4                 ;85
000046  e7e1              B        |L1.12|
;;;87     e_x_task_error_code unfreeze_x_task(const s_X_Tasks_Manager *p_manager,uint16_t task_id)
                          ENDP


                          AREA ||i.restart_x_task||, CODE, READONLY, ALIGN=1

                  restart_x_task PROC
;;;112    }
;;;113    e_x_task_error_code restart_x_task(const s_X_Tasks_Manager *p_manager,uint16_t task_id)
000000  b530              PUSH     {r4,r5,lr}
;;;114    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;115        uint16_t i;
;;;116        X_Boolean isOk = X_False;
000006  2400              MOVS     r4,#0
;;;117    
;;;118        if(p_manager == (s_X_Tasks_Manager *)0) 
000008  b90a              CBNZ     r2,|L2.14|
;;;119        {
;;;120            ////////X_TASK_LOG(1,(" fatal restart error !!! : task manager pointer null \r\n"));
;;;121            return xte_pointer_null;
00000a  2001              MOVS     r0,#1
                  |L2.12|
;;;122        }
;;;123        if(*p_manager ->p_is_init_ok == 0) 
;;;124        {
;;;125            /////////X_TASK_LOG(1,(" fatal restart error !!! : init failed \r\n"));
;;;126            return xte_init_failed;
;;;127        }
;;;128    
;;;129        for(i=0;i<p_manager -> max_task_num;i++)
;;;130        {
;;;131            if(p_manager ->p_task[i].id == task_id)
;;;132            {
;;;133                p_manager ->p_freeze_flag_buf[i] = 0;
;;;134                p_manager ->p_init_flag_buf[i] = 0;
;;;135                isOk = X_True;
;;;136                break;
;;;137            }
;;;138        }
;;;139        return ((isOk == X_True) ? xte_ok : xte_unknow_error);
;;;140    }
00000c  bd30              POP      {r4,r5,pc}
                  |L2.14|
00000e  6850              LDR      r0,[r2,#4]            ;123
000010  7800              LDRB     r0,[r0,#0]            ;123
000012  b908              CBNZ     r0,|L2.24|
000014  2003              MOVS     r0,#3                 ;126
000016  e7f9              B        |L2.12|
                  |L2.24|
000018  2100              MOVS     r1,#0                 ;129
00001a  e00d              B        |L2.56|
                  |L2.28|
00001c  6910              LDR      r0,[r2,#0x10]         ;131
00001e  f8300031          LDRH     r0,[r0,r1,LSL #3]     ;131
000022  4298              CMP      r0,r3                 ;131
000024  d106              BNE      |L2.52|
000026  2000              MOVS     r0,#0                 ;133
000028  68d5              LDR      r5,[r2,#0xc]          ;133
00002a  5468              STRB     r0,[r5,r1]            ;133
00002c  6895              LDR      r5,[r2,#8]            ;134
00002e  5468              STRB     r0,[r5,r1]            ;134
000030  2401              MOVS     r4,#1                 ;135
000032  e004              B        |L2.62|
                  |L2.52|
000034  1c48              ADDS     r0,r1,#1              ;129
000036  b281              UXTH     r1,r0                 ;129
                  |L2.56|
000038  8810              LDRH     r0,[r2,#0]            ;129
00003a  4288              CMP      r0,r1                 ;129
00003c  dcee              BGT      |L2.28|
                  |L2.62|
00003e  bf00              NOP                            ;136
000040  2c01              CMP      r4,#1                 ;139
000042  d101              BNE      |L2.72|
000044  2000              MOVS     r0,#0                 ;139
000046  e7e1              B        |L2.12|
                  |L2.72|
000048  2004              MOVS     r0,#4                 ;139
00004a  e7df              B        |L2.12|
;;;141    
                          ENDP


                          AREA ||i.unfreeze_x_task||, CODE, READONLY, ALIGN=1

                  unfreeze_x_task PROC
;;;86     }
;;;87     e_x_task_error_code unfreeze_x_task(const s_X_Tasks_Manager *p_manager,uint16_t task_id)
000000  b530              PUSH     {r4,r5,lr}
;;;88     {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;89         uint16_t i;
;;;90     	X_Boolean isOk = X_False;
000006  2400              MOVS     r4,#0
;;;91         if(p_manager == (s_X_Tasks_Manager *)0) 
000008  b90a              CBNZ     r2,|L3.14|
;;;92         {
;;;93             //X_TASK_LOG(1,(" fatal unfreeze error !!! : task manager pointer null \r\n"));
;;;94             return xte_pointer_null;
00000a  2001              MOVS     r0,#1
                  |L3.12|
;;;95         }
;;;96         if(*p_manager ->p_is_init_ok == 0) 
;;;97         {
;;;98            // X_TASK_LOG(1,(" fatal unfreeze error !!! : init failed \r\n"));
;;;99             return xte_init_failed;
;;;100        }
;;;101    
;;;102        for(i=0;i<p_manager -> max_task_num;i++)
;;;103        {
;;;104            if(p_manager ->p_task[i].id == task_id)
;;;105            {
;;;106                p_manager ->p_freeze_flag_buf[i] = 0;
;;;107                isOk = X_True;
;;;108                break;
;;;109            }
;;;110        }
;;;111       return ((isOk == X_True) ? xte_ok : xte_unknow_error);
;;;112    }
00000c  bd30              POP      {r4,r5,pc}
                  |L3.14|
00000e  6850              LDR      r0,[r2,#4]            ;96
000010  7800              LDRB     r0,[r0,#0]            ;96
000012  b908              CBNZ     r0,|L3.24|
000014  2003              MOVS     r0,#3                 ;99
000016  e7f9              B        |L3.12|
                  |L3.24|
000018  2100              MOVS     r1,#0                 ;102
00001a  e00b              B        |L3.52|
                  |L3.28|
00001c  6910              LDR      r0,[r2,#0x10]         ;104
00001e  f8300031          LDRH     r0,[r0,r1,LSL #3]     ;104
000022  4298              CMP      r0,r3                 ;104
000024  d104              BNE      |L3.48|
000026  2000              MOVS     r0,#0                 ;106
000028  68d5              LDR      r5,[r2,#0xc]          ;106
00002a  5468              STRB     r0,[r5,r1]            ;106
00002c  2401              MOVS     r4,#1                 ;107
00002e  e004              B        |L3.58|
                  |L3.48|
000030  1c48              ADDS     r0,r1,#1              ;102
000032  b281              UXTH     r1,r0                 ;102
                  |L3.52|
000034  8810              LDRH     r0,[r2,#0]            ;102
000036  4288              CMP      r0,r1                 ;102
000038  dcf0              BGT      |L3.28|
                  |L3.58|
00003a  bf00              NOP                            ;108
00003c  2c01              CMP      r4,#1                 ;111
00003e  d101              BNE      |L3.68|
000040  2000              MOVS     r0,#0                 ;111
000042  e7e3              B        |L3.12|
                  |L3.68|
000044  2004              MOVS     r0,#4                 ;111
000046  e7e1              B        |L3.12|
;;;113    e_x_task_error_code restart_x_task(const s_X_Tasks_Manager *p_manager,uint16_t task_id)
                          ENDP


                          AREA ||i.x_task_init||, CODE, READONLY, ALIGN=1

                  x_task_init PROC
;;;2      /********************************************************************************************/
;;;3      e_x_task_error_code x_task_init(const s_X_Tasks_Manager *p_manager)
000000  4601              MOV      r1,r0
;;;4      {
;;;5          uint16_t i;
;;;6          if(p_manager == (s_X_Tasks_Manager *)0) 
000002  b909              CBNZ     r1,|L4.8|
;;;7          {
;;;8              //X_TASK_LOG(1,(" fatal init error !!! : task manager pointer null \r\n"));
;;;9              return xte_pointer_null;
000004  2001              MOVS     r0,#1
                  |L4.6|
;;;10         }
;;;11         if(p_manager -> max_task_num >= MAX_X_TASK_NUMBER ) 
;;;12         {
;;;13             //X_TASK_LOG(1,(" fatal init error !!! : task number beyond scope \r\n"));
;;;14             return xte_beyond_scope;
;;;15         }
;;;16         if(p_manager -> p_task == (s_X_TaskList *)0) 
;;;17         {
;;;18              //X_TASK_LOG(1,(" fatal init error !!! : task list null \r\n"));
;;;19             return xte_pointer_null;
;;;20         }
;;;21     
;;;22       //  fix it later : 此处可以将每个任务的task id 排序，然后依次比较，发现有相同的相邻的ID就返回 FALSE ，稍后再做
;;;23       //  或者干脆就用枚举类型做task ID,这样就不会重复了
;;;24         for(i=0;i<p_manager -> max_task_num;i++)
;;;25         {
;;;26             p_manager ->p_freeze_flag_buf[i] = 0;
;;;27             p_manager ->p_init_flag_buf[i]   = 0;
;;;28         } 
;;;29     
;;;30         *p_manager ->p_is_init_ok = 1;
;;;31         ///////X_TASK_LOG(1,(" ~~~~~~ task init success ~~~~~~~ ; total task number %d \r\n",p_manager -> max_task_num));
;;;32         return xte_ok;
;;;33     }
000006  4770              BX       lr
                  |L4.8|
000008  8808              LDRH     r0,[r1,#0]            ;11
00000a  f64f73ff          MOV      r3,#0xffff            ;11
00000e  4298              CMP      r0,r3                 ;11
000010  db01              BLT      |L4.22|
000012  2002              MOVS     r0,#2                 ;14
000014  e7f7              B        |L4.6|
                  |L4.22|
000016  6908              LDR      r0,[r1,#0x10]         ;16
000018  b908              CBNZ     r0,|L4.30|
00001a  2001              MOVS     r0,#1                 ;19
00001c  e7f3              B        |L4.6|
                  |L4.30|
00001e  2200              MOVS     r2,#0                 ;24
000020  e006              B        |L4.48|
                  |L4.34|
000022  2000              MOVS     r0,#0                 ;26
000024  68cb              LDR      r3,[r1,#0xc]          ;26
000026  5498              STRB     r0,[r3,r2]            ;26
000028  688b              LDR      r3,[r1,#8]            ;27
00002a  5498              STRB     r0,[r3,r2]            ;27
00002c  1c50              ADDS     r0,r2,#1              ;24
00002e  b282              UXTH     r2,r0                 ;24
                  |L4.48|
000030  8808              LDRH     r0,[r1,#0]            ;24
000032  4290              CMP      r0,r2                 ;24
000034  dcf5              BGT      |L4.34|
000036  2001              MOVS     r0,#1                 ;30
000038  684b              LDR      r3,[r1,#4]            ;30
00003a  7018              STRB     r0,[r3,#0]            ;30
00003c  2000              MOVS     r0,#0                 ;32
00003e  e7e2              B        |L4.6|
;;;34     
                          ENDP


                          AREA ||i.x_task_scheduler||, CODE, READONLY, ALIGN=1

                  x_task_scheduler PROC
;;;34     
;;;35     e_x_task_error_code  x_task_scheduler(const s_X_Tasks_Manager *p_manager,uint32_t ms)
000000  b570              PUSH     {r4-r6,lr}
;;;36     {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;37         uint16_t i;
;;;38     
;;;39         if(p_manager == (s_X_Tasks_Manager *)0) 
000006  b90c              CBNZ     r4,|L5.12|
;;;40         {
;;;41             //X_TASK_LOG(1,(" fatal scheduler error !!! : task manager pointer null \r\n"));
;;;42             return xte_pointer_null;
000008  2001              MOVS     r0,#1
                  |L5.10|
;;;43         }
;;;44         if(*p_manager ->p_is_init_ok == 0) 
;;;45         {
;;;46             //X_TASK_LOG(1,(" fatal scheduler error !!! : init failed \r\n"));
;;;47             return xte_init_failed;
;;;48         }
;;;49          
;;;50         for(i=0;i<p_manager -> max_task_num;i++)
;;;51         {
;;;52             if(p_manager ->p_freeze_flag_buf[i] == 0 &&  p_manager ->p_task[i].task_process !=  (x_task_func)0)
;;;53             {
;;;54                 p_manager ->p_task[i].task_process(ms,p_manager ->p_task[i].id,&(p_manager ->p_init_flag_buf[i]));
;;;55             }
;;;56         }
;;;57     	return xte_ok;
;;;58     }
00000a  bd70              POP      {r4-r6,pc}
                  |L5.12|
00000c  6860              LDR      r0,[r4,#4]            ;44
00000e  7800              LDRB     r0,[r0,#0]            ;44
000010  b908              CBNZ     r0,|L5.22|
000012  2003              MOVS     r0,#3                 ;47
000014  e7f9              B        |L5.10|
                  |L5.22|
000016  2500              MOVS     r5,#0                 ;50
000018  e013              B        |L5.66|
                  |L5.26|
00001a  68e0              LDR      r0,[r4,#0xc]          ;52
00001c  5d40              LDRB     r0,[r0,r5]            ;52
00001e  b970              CBNZ     r0,|L5.62|
000020  6920              LDR      r0,[r4,#0x10]         ;52
000022  eb0000c5          ADD      r0,r0,r5,LSL #3       ;52
000026  6840              LDR      r0,[r0,#4]            ;52
000028  b148              CBZ      r0,|L5.62|
00002a  6920              LDR      r0,[r4,#0x10]         ;54
00002c  f8301035          LDRH     r1,[r0,r5,LSL #3]     ;54
000030  eb0000c5          ADD      r0,r0,r5,LSL #3       ;54
000034  6843              LDR      r3,[r0,#4]            ;54
000036  68a0              LDR      r0,[r4,#8]            ;54
000038  1942              ADDS     r2,r0,r5              ;54
00003a  4630              MOV      r0,r6                 ;54
00003c  4798              BLX      r3                    ;54
                  |L5.62|
00003e  1c68              ADDS     r0,r5,#1              ;50
000040  b285              UXTH     r5,r0                 ;50
                  |L5.66|
000042  8820              LDRH     r0,[r4,#0]            ;50
000044  42a8              CMP      r0,r5                 ;50
000046  dce8              BGT      |L5.26|
000048  2000              MOVS     r0,#0                 ;57
00004a  e7de              B        |L5.10|
;;;59     
                          ENDP

