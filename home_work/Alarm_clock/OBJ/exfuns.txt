; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\exfuns.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\exfuns.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\HARDWARE\LED -I..\HARDWARE\LCD -I..\HARDWARE\KEY -I..\HARDWARE\SRAM -I..\HARDWARE\SDIO -I..\MALLOC -I..\USMART -I..\HARDWARE\SPI -I..\HARDWARE\W25QXX -I..\FATFS\exfuns -I..\FATFS\src -I..\TEXT -I..\FWLIB\inc -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\I2S -I..\HARDWARE\WM8978 -I..\APP -I..\AUDIOCODEC\wav -I..\new_user -I..\new_user\task -I..\new_user\MVC -I..\..\..\module\common -I..\..\..\module\common\InsertLog -I..\..\..\module\common\loopqueue -I..\..\..\module\common\StateMachine -I..\..\..\module\common\priorityqueue -I..\..\..\module\common\Math -I..\..\..\module\component\const_loop_scheduler -I..\..\..\module\component\const_loop_scheduler\TemplateTask -I..\..\..\module\component\const_loop_scheduler\HierarchicalSM -I..\..\..\module\component\BlockableStateMachine -I..\..\..\module\customize\ButtonModule -I..\..\..\module\external\Segger\SEGGER_RTT_V640\Syscalls -I..\..\..\module\external\Segger\SEGGER_RTT_V640\RTT -I.\RTE\_AudioPlayer -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include" -I"D:\Program Files\ARM\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_COMPILER_PRESENT -DX_TASK_LOG_DEBUG_METHOD=SeggerRTT_LogDebug --omf_browse=..\obj\exfuns.crf ..\FATFS\exfuns\exfuns.c]
                          THUMB

                          AREA ||i.char_upper||, CODE, READONLY, ALIGN=1

                  char_upper PROC
;;;60     //将小写字母转为大写字母,如果是数字,则保持不变.
;;;61     u8 char_upper(u8 c)
000000  4601              MOV      r1,r0
;;;62     {
;;;63     	if(c<'A')return c;//数字,保持不变.
000002  2941              CMP      r1,#0x41
000004  da01              BGE      |L1.10|
000006  4608              MOV      r0,r1
                  |L1.8|
;;;64     	if(c>='a')return c-0x20;//变为大写.
;;;65     	else return c;//大写,保持不变
;;;66     }	      
000008  4770              BX       lr
                  |L1.10|
00000a  2961              CMP      r1,#0x61              ;64
00000c  db03              BLT      |L1.22|
00000e  f1a10020          SUB      r0,r1,#0x20           ;64
000012  b2c0              UXTB     r0,r0                 ;64
000014  e7f8              B        |L1.8|
                  |L1.22|
000016  4608              MOV      r0,r1                 ;65
000018  e7f6              B        |L1.8|
;;;67     //报告文件的类型
                          ENDP


                          AREA ||i.exf_getfree||, CODE, READONLY, ALIGN=1

                  exf_getfree PROC
;;;113    //返回值:0,正常.其他,错误代码
;;;114    u8 exf_getfree(u8 *drv,u32 *total,u32 *free)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;115    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;116    	FATFS *fs1;
;;;117    	u8 res;
;;;118        u32 fre_clust=0, fre_sect=0, tot_sect=0;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
00000e  4680              MOV      r8,r0
000010  4681              MOV      r9,r0
;;;119        //得到磁盘信息及空闲簇数量
;;;120        res =(u32)f_getfree((const TCHAR*)drv, (DWORD*)&fre_clust, &fs1);
000012  aa01              ADD      r2,sp,#4
000014  4669              MOV      r1,sp
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       f_getfree
00001c  4606              MOV      r6,r0
;;;121        if(res==0)
00001e  b98e              CBNZ     r6,|L2.68|
;;;122    	{											   
;;;123    	    tot_sect=(fs1->n_fatent-2)*fs1->csize;	//得到总扇区数
000020  9801              LDR      r0,[sp,#4]
000022  6940              LDR      r0,[r0,#0x14]
000024  1e80              SUBS     r0,r0,#2
000026  9901              LDR      r1,[sp,#4]
000028  7889              LDRB     r1,[r1,#2]
00002a  fb00f901          MUL      r9,r0,r1
;;;124    	    fre_sect=fre_clust*fs1->csize;			//得到空闲扇区数	   
00002e  9801              LDR      r0,[sp,#4]
000030  7880              LDRB     r0,[r0,#2]
000032  9900              LDR      r1,[sp,#0]
000034  fb00f801          MUL      r8,r0,r1
;;;125    #if _MAX_SS!=512				  				//扇区大小不是512字节,则转换为512字节
;;;126    		tot_sect*=fs1->ssize/512;
;;;127    		fre_sect*=fs1->ssize/512;
;;;128    #endif	  
;;;129    		*total=tot_sect>>1;	//单位为KB
000038  ea4f0059          LSR      r0,r9,#1
00003c  6020              STR      r0,[r4,#0]
;;;130    		*free=fre_sect>>1;	//单位为KB 
00003e  ea4f0058          LSR      r0,r8,#1
000042  6028              STR      r0,[r5,#0]
                  |L2.68|
;;;131     	}
;;;132    	return res;
000044  4630              MOV      r0,r6
;;;133    }	
000046  e8bd87fc          POP      {r2-r10,pc}
;;;134    
                          ENDP


                          AREA ||i.exfuns_init||, CODE, READONLY, ALIGN=2

                  exfuns_init PROC
;;;44     //1,失败
;;;45     u8 exfuns_init(void)
000000  b510              PUSH     {r4,lr}
;;;46     {
;;;47     	u8 i;
;;;48     	for(i=0;i<_VOLUMES;i++)
000002  2400              MOVS     r4,#0
000004  e00e              B        |L3.36|
                  |L3.6|
;;;49     	{
;;;50     		fs[i]=(FATFS*)mymalloc(SRAMIN,sizeof(FATFS));	//为磁盘i工作区申请内存	
000006  f44f710c          MOV      r1,#0x230
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       mymalloc
000010  4918              LDR      r1,|L3.116|
000012  f8410024          STR      r0,[r1,r4,LSL #2]
;;;51     		if(!fs[i])break;
000016  4608              MOV      r0,r1
000018  f8500024          LDR      r0,[r0,r4,LSL #2]
00001c  b900              CBNZ     r0,|L3.32|
00001e  e003              B        |L3.40|
                  |L3.32|
000020  1c60              ADDS     r0,r4,#1              ;48
000022  b2c4              UXTB     r4,r0                 ;48
                  |L3.36|
000024  2c03              CMP      r4,#3                 ;48
000026  dbee              BLT      |L3.6|
                  |L3.40|
000028  bf00              NOP      
;;;52     	}
;;;53     	file=(FIL*)mymalloc(SRAMIN,sizeof(FIL));		//为file申请内存
00002a  f44f710a          MOV      r1,#0x228
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       mymalloc
000034  4910              LDR      r1,|L3.120|
000036  6008              STR      r0,[r1,#0]  ; file
;;;54     	ftemp=(FIL*)mymalloc(SRAMIN,sizeof(FIL));		//为ftemp申请内存
000038  f44f710a          MOV      r1,#0x228
00003c  2000              MOVS     r0,#0
00003e  f7fffffe          BL       mymalloc
000042  490e              LDR      r1,|L3.124|
000044  6008              STR      r0,[r1,#0]  ; ftemp
;;;55     	fatbuf=(u8*)mymalloc(SRAMIN,512);				//为fatbuf申请内存
000046  f44f7100          MOV      r1,#0x200
00004a  2000              MOVS     r0,#0
00004c  f7fffffe          BL       mymalloc
000050  490b              LDR      r1,|L3.128|
000052  6008              STR      r0,[r1,#0]  ; fatbuf
;;;56     	if(i==_VOLUMES&&file&&ftemp&&fatbuf)return 0;  //申请有一个失败,即失败.
000054  2c03              CMP      r4,#3
000056  d10a              BNE      |L3.110|
000058  4807              LDR      r0,|L3.120|
00005a  6800              LDR      r0,[r0,#0]  ; file
00005c  b138              CBZ      r0,|L3.110|
00005e  4807              LDR      r0,|L3.124|
000060  6800              LDR      r0,[r0,#0]  ; ftemp
000062  b120              CBZ      r0,|L3.110|
000064  4608              MOV      r0,r1
000066  6800              LDR      r0,[r0,#0]  ; fatbuf
000068  b108              CBZ      r0,|L3.110|
00006a  2000              MOVS     r0,#0
                  |L3.108|
;;;57     	else return 1;	
;;;58     }
00006c  bd10              POP      {r4,pc}
                  |L3.110|
00006e  2001              MOVS     r0,#1                 ;57
000070  e7fc              B        |L3.108|
;;;59     
                          ENDP

000072  0000              DCW      0x0000
                  |L3.116|
                          DCD      ||fs||
                  |L3.120|
                          DCD      file
                  |L3.124|
                          DCD      ftemp
                  |L3.128|
                          DCD      fatbuf

                          AREA ||i.f_typetell||, CODE, READONLY, ALIGN=2

                  f_typetell PROC
;;;70     //		 其他,高四位表示所属大类,低四位表示所属小类.
;;;71     u8 f_typetell(u8 *fname)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;72     {
000004  4605              MOV      r5,r0
;;;73     	u8 tbuf[5];
;;;74     	u8 *attr='\0';//后缀名
000006  2700              MOVS     r7,#0
;;;75     	u8 i=0,j;
000008  2400              MOVS     r4,#0
;;;76     	while(i<250)
00000a  e005              B        |L4.24|
                  |L4.12|
;;;77     	{
;;;78     		i++;
00000c  1c60              ADDS     r0,r4,#1
00000e  b2c4              UXTB     r4,r0
;;;79     		if(*fname=='\0')break;//偏移到了最后了.
000010  7828              LDRB     r0,[r5,#0]
000012  b900              CBNZ     r0,|L4.22|
000014  e002              B        |L4.28|
                  |L4.22|
;;;80     		fname++;
000016  1c6d              ADDS     r5,r5,#1
                  |L4.24|
000018  2cfa              CMP      r4,#0xfa              ;76
00001a  dbf7              BLT      |L4.12|
                  |L4.28|
00001c  bf00              NOP                            ;79
;;;81     	}
;;;82     	if(i==250)return 0XFF;//错误的字符串.
00001e  2cfa              CMP      r4,#0xfa
000020  d102              BNE      |L4.40|
000022  20ff              MOVS     r0,#0xff
                  |L4.36|
;;;83      	for(i=0;i<5;i++)//得到后缀名
;;;84     	{
;;;85     		fname--;
;;;86     		if(*fname=='.')
;;;87     		{
;;;88     			fname++;
;;;89     			attr=fname;
;;;90     			break;
;;;91     		}
;;;92       	}
;;;93     	strcpy((char *)tbuf,(const char*)attr);//copy
;;;94      	for(i=0;i<4;i++)tbuf[i]=char_upper(tbuf[i]);//全部变为大写 
;;;95     	for(i=0;i<FILE_MAX_TYPE_NUM;i++)	//大类对比
;;;96     	{
;;;97     		for(j=0;j<FILE_MAX_SUBT_NUM;j++)//子类对比
;;;98     		{
;;;99     			if(*FILE_TYPE_TBL[i][j]==0)break;//此组已经没有可对比的成员了.
;;;100    			if(strcmp((const char *)FILE_TYPE_TBL[i][j],(const char *)tbuf)==0)//找到了
;;;101    			{
;;;102    				return (i<<4)|j;
;;;103    			}
;;;104    		}
;;;105    	}
;;;106    	return 0XFF;//没找到		 			   
;;;107    }	 
000024  e8bd81fc          POP      {r2-r8,pc}
                  |L4.40|
000028  2400              MOVS     r4,#0                 ;83
00002a  e008              B        |L4.62|
                  |L4.44|
00002c  1e6d              SUBS     r5,r5,#1              ;85
00002e  7828              LDRB     r0,[r5,#0]            ;86
000030  282e              CMP      r0,#0x2e              ;86
000032  d102              BNE      |L4.58|
000034  1c6d              ADDS     r5,r5,#1              ;88
000036  462f              MOV      r7,r5                 ;89
000038  e003              B        |L4.66|
                  |L4.58|
00003a  1c60              ADDS     r0,r4,#1              ;83
00003c  b2c4              UXTB     r4,r0                 ;83
                  |L4.62|
00003e  2c05              CMP      r4,#5                 ;83
000040  dbf4              BLT      |L4.44|
                  |L4.66|
000042  bf00              NOP                            ;90
000044  4639              MOV      r1,r7                 ;93
000046  4668              MOV      r0,sp                 ;93
000048  f7fffffe          BL       strcpy
00004c  2400              MOVS     r4,#0                 ;94
00004e  e007              B        |L4.96|
                  |L4.80|
000050  f81d0004          LDRB     r0,[sp,r4]            ;94
000054  f7fffffe          BL       char_upper
000058  f80d0004          STRB     r0,[sp,r4]            ;94
00005c  1c60              ADDS     r0,r4,#1              ;94
00005e  b2c4              UXTB     r4,r0                 ;94
                  |L4.96|
000060  2c04              CMP      r4,#4                 ;94
000062  dbf5              BLT      |L4.80|
000064  2400              MOVS     r4,#0                 ;95
000066  e01d              B        |L4.164|
                  |L4.104|
000068  2600              MOVS     r6,#0                 ;97
00006a  e016              B        |L4.154|
                  |L4.108|
00006c  480f              LDR      r0,|L4.172|
00006e  eb001004          ADD      r0,r0,r4,LSL #4       ;99
000072  f8500026          LDR      r0,[r0,r6,LSL #2]     ;99
000076  7800              LDRB     r0,[r0,#0]            ;99
000078  b900              CBNZ     r0,|L4.124|
00007a  e010              B        |L4.158|
                  |L4.124|
00007c  490b              LDR      r1,|L4.172|
00007e  eb011104          ADD      r1,r1,r4,LSL #4       ;100
000082  f8510026          LDR      r0,[r1,r6,LSL #2]     ;100
000086  4669              MOV      r1,sp                 ;100
000088  f7fffffe          BL       strcmp
00008c  b918              CBNZ     r0,|L4.150|
00008e  ea461004          ORR      r0,r6,r4,LSL #4       ;102
000092  b2c0              UXTB     r0,r0                 ;102
000094  e7c6              B        |L4.36|
                  |L4.150|
000096  1c70              ADDS     r0,r6,#1              ;97
000098  b2c6              UXTB     r6,r0                 ;97
                  |L4.154|
00009a  2e04              CMP      r6,#4                 ;97
00009c  dbe6              BLT      |L4.108|
                  |L4.158|
00009e  bf00              NOP                            ;99
0000a0  1c60              ADDS     r0,r4,#1              ;95
0000a2  b2c4              UXTB     r4,r0                 ;95
                  |L4.164|
0000a4  2c07              CMP      r4,#7                 ;95
0000a6  dbdf              BLT      |L4.104|
0000a8  20ff              MOVS     r0,#0xff              ;106
0000aa  e7bb              B        |L4.36|
;;;108    
                          ENDP

                  |L4.172|
                          DCD      FILE_TYPE_TBL

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ||fs||
                          %        12
                  fileinfo
                          %        32
                  ||dir||
                          %        36

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  FILE_TYPE_TBL
                          DCD      ||.conststring||
                          %        12
                          DCD      ||.conststring||+0x4
                          %        12
                          DCD      ||.conststring||+0x8
                          %        12
                          DCD      ||.conststring||+0xc
                          DCD      ||.conststring||+0x10
                          DCD      ||.conststring||+0x14
                          DCD      0x00000000
                          DCD      ||.conststring||+0x18
                          DCD      ||.conststring||+0x1c
                          DCD      ||.conststring||+0x20
                          DCD      ||.conststring||+0x24
                          DCD      ||.conststring||+0x2c
                          DCD      ||.conststring||+0x30
                          DCD      ||.conststring||+0x34
                          DCD      ||.conststring||+0x3c
                          DCD      ||.conststring||+0x40
                          %        12

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  42494e00          DCB      "BIN",0
000004  4c524300          DCB      "LRC",0
000008  4e455300          DCB      "NES",0
00000c  54585400          DCB      "TXT",0
000010  4300              DCB      "C",0
000012  00                DCB      0
000013  00                DCB      0
000014  4800              DCB      "H",0
000016  00                DCB      0
000017  00                DCB      0
000018  57415600          DCB      "WAV",0
00001c  4d503300          DCB      "MP3",0
000020  41504500          DCB      "APE",0
000024  464c4143          DCB      "FLAC",0
000028  00      
000029  00                DCB      0
00002a  00                DCB      0
00002b  00                DCB      0
00002c  424d5000          DCB      "BMP",0
000030  4a504700          DCB      "JPG",0
000034  4a504547          DCB      "JPEG",0
000038  00      
000039  00                DCB      0
00003a  00                DCB      0
00003b  00                DCB      0
00003c  47494600          DCB      "GIF",0
000040  41564900          DCB      "AVI",0

                          AREA ||.data||, DATA, ALIGN=2

                  file
                          DCD      0x00000000
                  ftemp
                          DCD      0x00000000
                  ||br||
                          DCD      0x00000000
                  ||bw||
                          DCD      0x00000000
                  fatbuf
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\FATFS\\exfuns\\exfuns.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_exfuns_c_08be7bcc____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___8_exfuns_c_08be7bcc____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_exfuns_c_08be7bcc____REVSH|
#line 144
|__asm___8_exfuns_c_08be7bcc____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
