; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\loop_queues.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\loop_queues.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\HARDWARE\LED -I..\HARDWARE\LCD -I..\HARDWARE\KEY -I..\HARDWARE\SRAM -I..\HARDWARE\SDIO -I..\MALLOC -I..\USMART -I..\HARDWARE\SPI -I..\HARDWARE\W25QXX -I..\FATFS\exfuns -I..\FATFS\src -I..\TEXT -I..\FWLIB\inc -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\I2S -I..\HARDWARE\WM8978 -I..\APP -I..\AUDIOCODEC\wav -I..\new_user -I..\new_user\task -I..\new_user\MVC -I..\..\..\module\common -I..\..\..\module\common\InsertLog -I..\..\..\module\common\loopqueue -I..\..\..\module\common\StateMachine -I..\..\..\module\common\priorityqueue -I..\..\..\module\common\Math -I..\..\..\module\component\const_loop_scheduler -I..\..\..\module\component\const_loop_scheduler\TemplateTask -I..\..\..\module\component\const_loop_scheduler\HierarchicalSM -I..\..\..\module\component\BlockableStateMachine -I..\..\..\module\customize\ButtonModule -I..\..\..\module\external\Segger\SEGGER_RTT_V640\Syscalls -I..\..\..\module\external\Segger\SEGGER_RTT_V640\RTT -I.\RTE\_AudioPlayer -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include" -I"D:\Program Files\ARM\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_COMPILER_PRESENT -DX_TASK_LOG_DEBUG_METHOD=SeggerRTT_LogDebug --omf_browse=..\obj\loop_queues.crf ..\..\..\module\common\loopqueue\loop_queues.c]
                          THUMB

                          AREA ||i.ClearLoopQueue||, CODE, READONLY, ALIGN=1

                  ClearLoopQueue PROC
;;;157    }
;;;158    X_Void      ClearLoopQueue(const sListManager *p_manager)
000000  b510              PUSH     {r4,lr}
;;;159    {
000002  4604              MOV      r4,r0
;;;160    	LoopQueueInitialize(p_manager);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       LoopQueueInitialize
;;;161    }
00000a  bd10              POP      {r4,pc}
;;;162    X_Void      RealseLoopQueueBuf(const sListManager *p_manager,uint8_t buf_num)
                          ENDP


                          AREA ||i.DoesLoopQueueEmpty||, CODE, READONLY, ALIGN=1

                  DoesLoopQueueEmpty PROC
;;;173    }
;;;174    X_Boolean   DoesLoopQueueEmpty(const sListManager *p_manager)
000000  4601              MOV      r1,r0
;;;175    {
;;;176    	if(p_manager == X_Null) {return X_True;}
000002  b909              CBNZ     r1,|L2.8|
000004  2001              MOVS     r0,#1
                  |L2.6|
;;;177    	if(p_manager->p_LMP->isInit == X_False) { return X_True;}
;;;178    	return (p_manager->p_LMP->state == QueueEmpty);
;;;179    }
000006  4770              BX       lr
                  |L2.8|
000008  6888              LDR      r0,[r1,#8]            ;177
00000a  6800              LDR      r0,[r0,#0]            ;177
00000c  b908              CBNZ     r0,|L2.18|
00000e  2001              MOVS     r0,#1                 ;177
000010  e7f9              B        |L2.6|
                  |L2.18|
000012  6888              LDR      r0,[r1,#8]            ;178
000014  7900              LDRB     r0,[r0,#4]            ;178
000016  b908              CBNZ     r0,|L2.28|
000018  2001              MOVS     r0,#1                 ;178
00001a  e7f4              B        |L2.6|
                  |L2.28|
00001c  2000              MOVS     r0,#0                 ;178
00001e  e7f2              B        |L2.6|
;;;180    
                          ENDP


                          AREA ||i.GetLoopQueueUsedNodeNumber||, CODE, READONLY, ALIGN=1

                  GetLoopQueueUsedNodeNumber PROC
;;;167    }
;;;168    uint16_t GetLoopQueueUsedNodeNumber(const sListManager *p_manager)
000000  4601              MOV      r1,r0
;;;169    {
;;;170    	if(p_manager == X_Null) {return 0;}
000002  b909              CBNZ     r1,|L3.8|
000004  2000              MOVS     r0,#0
                  |L3.6|
;;;171    	if(p_manager->p_LMP->isInit == X_False) { return 0;}
;;;172    	return p_manager->p_LMP->used_node_num;
;;;173    }
000006  4770              BX       lr
                  |L3.8|
000008  6888              LDR      r0,[r1,#8]            ;171
00000a  6800              LDR      r0,[r0,#0]            ;171
00000c  b908              CBNZ     r0,|L3.18|
00000e  2000              MOVS     r0,#0                 ;171
000010  e7f9              B        |L3.6|
                  |L3.18|
000012  6888              LDR      r0,[r1,#8]            ;172
000014  8940              LDRH     r0,[r0,#0xa]          ;172
000016  e7f6              B        |L3.6|
;;;174    X_Boolean   DoesLoopQueueEmpty(const sListManager *p_manager)
                          ENDP


                          AREA ||i.LoopQueueFirstIn||, CODE, READONLY, ALIGN=1

                  LoopQueueFirstIn PROC
;;;81     
;;;82     uint16_t    LoopQueueFirstIn(const sListManager *p_manager,X_Boolean is_OccupyPermit)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;83     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;84     	uint16_t buf_number,current_free_node_number;
;;;85     	if(p_manager == X_Null) { return INVALID_LOOP_QUEUE_NODE_NUM;}
000008  b91c              CBNZ     r4,|L4.18|
00000a  f64f70ff          MOV      r0,#0xffff
                  |L4.14|
;;;86     	if(p_manager->p_LMP->isInit == X_False) { return INVALID_LOOP_QUEUE_NODE_NUM;}
;;;87     
;;;88     	buf_number = 0;
;;;89     	current_free_node_number = p_manager->p_LMP->first_in_node_num;
;;;90     
;;;91     	switch(p_manager->p_LMP->state)
;;;92     	{
;;;93     		case QueueEmpty:
;;;94     		case QueueNormal:
;;;95     			if(p_manager->p_buf[current_free_node_number] == BUF_FREE )
;;;96     			{
;;;97     				NodeNumberInMoveForward(p_manager);
;;;98     				if(is_OccupyPermit == X_False) {p_manager->p_buf[current_free_node_number] = BUF_USED;}
;;;99     				else {p_manager->p_buf[current_free_node_number] = BUF_FREE;}
;;;100    				p_manager->p_LMP->used_node_num ++;
;;;101    				UpdataListState(p_manager);
;;;102    
;;;103    				buf_number = current_free_node_number;
;;;104    			}
;;;105    			else
;;;106    			{
;;;107    				buf_number = INVALID_LOOP_QUEUE_NODE_NUM;
;;;108    			}
;;;109    		break;
;;;110    		case QueueFull:
;;;111    
;;;112    			if(p_manager->p_buf[current_free_node_number] == BUF_FREE )
;;;113    			{
;;;114    				NodeNumberInMoveForward(p_manager);
;;;115    				NodeNumberOutMoveForward(p_manager);
;;;116    				if(is_OccupyPermit == X_False) {p_manager->p_buf[current_free_node_number] = BUF_USED;}
;;;117    				else {p_manager->p_buf[current_free_node_number] = BUF_FREE;}
;;;118    
;;;119    				buf_number = current_free_node_number;
;;;120    			}
;;;121    			else
;;;122    			{
;;;123    				buf_number = INVALID_LOOP_QUEUE_NODE_NUM;
;;;124    			}
;;;125    		break;
;;;126    		default:
;;;127    			buf_number = INVALID_LOOP_QUEUE_NODE_NUM;
;;;128    		break;
;;;129    	}
;;;130    	return buf_number;
;;;131    }
00000e  e8bd81f0          POP      {r4-r8,pc}
                  |L4.18|
000012  68a0              LDR      r0,[r4,#8]            ;86
000014  6800              LDR      r0,[r0,#0]            ;86
000016  b910              CBNZ     r0,|L4.30|
000018  f64f70ff          MOV      r0,#0xffff            ;86
00001c  e7f7              B        |L4.14|
                  |L4.30|
00001e  2700              MOVS     r7,#0                 ;88
000020  68a0              LDR      r0,[r4,#8]            ;89
000022  88c5              LDRH     r5,[r0,#6]            ;89
000024  68a0              LDR      r0,[r4,#8]            ;91
000026  7900              LDRB     r0,[r0,#4]            ;91
000028  b120              CBZ      r0,|L4.52|
00002a  2801              CMP      r0,#1                 ;91
00002c  d003              BEQ      |L4.54|
00002e  2802              CMP      r0,#2                 ;91
000030  d132              BNE      |L4.152|
000032  e01b              B        |L4.108|
                  |L4.52|
000034  bf00              NOP                            ;94
                  |L4.54|
000036  6820              LDR      r0,[r4,#0]            ;95
000038  5d40              LDRB     r0,[r0,r5]            ;95
00003a  b9a0              CBNZ     r0,|L4.102|
00003c  4620              MOV      r0,r4                 ;97
00003e  f7fffffe          BL       NodeNumberInMoveForward
000042  b91e              CBNZ     r6,|L4.76|
000044  2001              MOVS     r0,#1                 ;98
000046  6821              LDR      r1,[r4,#0]            ;98
000048  5548              STRB     r0,[r1,r5]            ;98
00004a  e002              B        |L4.82|
                  |L4.76|
00004c  2000              MOVS     r0,#0                 ;99
00004e  6821              LDR      r1,[r4,#0]            ;99
000050  5548              STRB     r0,[r1,r5]            ;99
                  |L4.82|
000052  68a0              LDR      r0,[r4,#8]            ;100
000054  8940              LDRH     r0,[r0,#0xa]          ;100
000056  1c40              ADDS     r0,r0,#1              ;100
000058  68a1              LDR      r1,[r4,#8]            ;100
00005a  8148              STRH     r0,[r1,#0xa]          ;100
00005c  4620              MOV      r0,r4                 ;101
00005e  f7fffffe          BL       UpdataListState
000062  462f              MOV      r7,r5                 ;103
000064  e001              B        |L4.106|
                  |L4.102|
000066  f64f77ff          MOV      r7,#0xffff            ;107
                  |L4.106|
00006a  e018              B        |L4.158|
                  |L4.108|
00006c  6820              LDR      r0,[r4,#0]            ;112
00006e  5d40              LDRB     r0,[r0,r5]            ;112
000070  b978              CBNZ     r0,|L4.146|
000072  4620              MOV      r0,r4                 ;114
000074  f7fffffe          BL       NodeNumberInMoveForward
000078  4620              MOV      r0,r4                 ;115
00007a  f7fffffe          BL       NodeNumberOutMoveForward
00007e  b91e              CBNZ     r6,|L4.136|
000080  2001              MOVS     r0,#1                 ;116
000082  6821              LDR      r1,[r4,#0]            ;116
000084  5548              STRB     r0,[r1,r5]            ;116
000086  e002              B        |L4.142|
                  |L4.136|
000088  2000              MOVS     r0,#0                 ;117
00008a  6821              LDR      r1,[r4,#0]            ;117
00008c  5548              STRB     r0,[r1,r5]            ;117
                  |L4.142|
00008e  462f              MOV      r7,r5                 ;119
000090  e001              B        |L4.150|
                  |L4.146|
000092  f64f77ff          MOV      r7,#0xffff            ;123
                  |L4.150|
000096  e002              B        |L4.158|
                  |L4.152|
000098  f64f77ff          MOV      r7,#0xffff            ;127
00009c  bf00              NOP                            ;128
                  |L4.158|
00009e  bf00              NOP                            ;109
0000a0  4638              MOV      r0,r7                 ;130
0000a2  e7b4              B        |L4.14|
;;;132    uint16_t    LoopQueueFirstOut(const sListManager *p_manager)
                          ENDP


                          AREA ||i.LoopQueueFirstOut||, CODE, READONLY, ALIGN=1

                  LoopQueueFirstOut PROC
;;;131    }
;;;132    uint16_t    LoopQueueFirstOut(const sListManager *p_manager)
000000  b570              PUSH     {r4-r6,lr}
;;;133    {
000002  4604              MOV      r4,r0
;;;134    	uint16_t buf_number,current_filled_node_number;
;;;135    	if(p_manager == X_Null) { return INVALID_LOOP_QUEUE_NODE_NUM;}
000004  b914              CBNZ     r4,|L5.12|
000006  f64f70ff          MOV      r0,#0xffff
                  |L5.10|
;;;136    	if(p_manager->p_LMP->isInit == X_False) { return INVALID_LOOP_QUEUE_NODE_NUM;}
;;;137    
;;;138    	buf_number = 0;
;;;139    	current_filled_node_number = p_manager->p_LMP->first_out_node_num;
;;;140    	switch(p_manager->p_LMP->state)
;;;141    	{
;;;142    		case QueueEmpty:
;;;143    			buf_number = INVALID_LOOP_QUEUE_NODE_NUM;
;;;144    		break;
;;;145    		case QueueNormal:
;;;146    		case QueueFull:
;;;147    			NodeNumberOutMoveForward(p_manager);
;;;148    			if(p_manager->p_LMP->used_node_num > 0) {p_manager->p_LMP->used_node_num --;}
;;;149    			UpdataListState(p_manager);
;;;150    			buf_number = current_filled_node_number;
;;;151    		break;
;;;152    		default:
;;;153    			buf_number = INVALID_LOOP_QUEUE_NODE_NUM;
;;;154    		break;
;;;155    	}
;;;156    	return buf_number;
;;;157    }
00000a  bd70              POP      {r4-r6,pc}
                  |L5.12|
00000c  68a0              LDR      r0,[r4,#8]            ;136
00000e  6800              LDR      r0,[r0,#0]            ;136
000010  b910              CBNZ     r0,|L5.24|
000012  f64f70ff          MOV      r0,#0xffff            ;136
000016  e7f8              B        |L5.10|
                  |L5.24|
000018  2500              MOVS     r5,#0                 ;138
00001a  68a0              LDR      r0,[r4,#8]            ;139
00001c  8906              LDRH     r6,[r0,#8]            ;139
00001e  68a0              LDR      r0,[r4,#8]            ;140
000020  7900              LDRB     r0,[r0,#4]            ;140
000022  b120              CBZ      r0,|L5.46|
000024  2801              CMP      r0,#1                 ;140
000026  d005              BEQ      |L5.52|
000028  2802              CMP      r0,#2                 ;140
00002a  d115              BNE      |L5.88|
00002c  e003              B        |L5.54|
                  |L5.46|
00002e  f64f75ff          MOV      r5,#0xffff            ;143
000032  e014              B        |L5.94|
                  |L5.52|
000034  bf00              NOP                            ;146
                  |L5.54|
000036  4620              MOV      r0,r4                 ;147
000038  f7fffffe          BL       NodeNumberOutMoveForward
00003c  68a0              LDR      r0,[r4,#8]            ;148
00003e  8940              LDRH     r0,[r0,#0xa]          ;148
000040  2800              CMP      r0,#0                 ;148
000042  dd04              BLE      |L5.78|
000044  68a0              LDR      r0,[r4,#8]            ;148
000046  8940              LDRH     r0,[r0,#0xa]          ;148
000048  1e40              SUBS     r0,r0,#1              ;148
00004a  68a1              LDR      r1,[r4,#8]            ;148
00004c  8148              STRH     r0,[r1,#0xa]          ;148
                  |L5.78|
00004e  4620              MOV      r0,r4                 ;149
000050  f7fffffe          BL       UpdataListState
000054  4635              MOV      r5,r6                 ;150
000056  e002              B        |L5.94|
                  |L5.88|
000058  f64f75ff          MOV      r5,#0xffff            ;153
00005c  bf00              NOP                            ;154
                  |L5.94|
00005e  bf00              NOP                            ;144
000060  4628              MOV      r0,r5                 ;156
000062  e7d2              B        |L5.10|
;;;158    X_Void      ClearLoopQueue(const sListManager *p_manager)
                          ENDP


                          AREA ||i.LoopQueueInitialize||, CODE, READONLY, ALIGN=1

                  LoopQueueInitialize PROC
;;;61     }
;;;62     X_Void 		LoopQueueInitialize(const sListManager *p_manager)
000000  b900              CBNZ     r0,|L6.4|
                  |L6.2|
;;;63     {
;;;64     	uint16_t i;
;;;65     
;;;66     	if(p_manager == X_Null) {return;}
;;;67     	if(p_manager->ValidNodeNumber >= INVALID_LOOP_QUEUE_NODE_NUM) {return;}
;;;68     
;;;69     	for(i = 0;i< p_manager->ValidNodeNumber;i++)
;;;70     	{
;;;71     		p_manager->p_buf[i] = BUF_FREE;
;;;72     	}
;;;73     	
;;;74     	p_manager->p_LMP->isInit = X_True;
;;;75     	p_manager->p_LMP->state = QueueEmpty;
;;;76     	p_manager->p_LMP->first_in_node_num = 0;
;;;77     	p_manager->p_LMP->first_out_node_num = 0;
;;;78     	p_manager->p_LMP->used_node_num = 0;
;;;79     
;;;80     }
000002  4770              BX       lr
                  |L6.4|
000004  8882              LDRH     r2,[r0,#4]            ;67
000006  f64f73ff          MOV      r3,#0xffff            ;67
00000a  429a              CMP      r2,r3                 ;67
00000c  db00              BLT      |L6.16|
00000e  e7f8              B        |L6.2|
                  |L6.16|
000010  2100              MOVS     r1,#0                 ;69
000012  e004              B        |L6.30|
                  |L6.20|
000014  2200              MOVS     r2,#0                 ;71
000016  6803              LDR      r3,[r0,#0]            ;71
000018  545a              STRB     r2,[r3,r1]            ;71
00001a  1c4a              ADDS     r2,r1,#1              ;69
00001c  b291              UXTH     r1,r2                 ;69
                  |L6.30|
00001e  8882              LDRH     r2,[r0,#4]            ;69
000020  428a              CMP      r2,r1                 ;69
000022  dcf7              BGT      |L6.20|
000024  2201              MOVS     r2,#1                 ;74
000026  6883              LDR      r3,[r0,#8]            ;74
000028  601a              STR      r2,[r3,#0]            ;74
00002a  2200              MOVS     r2,#0                 ;75
00002c  6883              LDR      r3,[r0,#8]            ;75
00002e  711a              STRB     r2,[r3,#4]            ;75
000030  6883              LDR      r3,[r0,#8]            ;76
000032  80da              STRH     r2,[r3,#6]            ;76
000034  6883              LDR      r3,[r0,#8]            ;77
000036  811a              STRH     r2,[r3,#8]            ;77
000038  6883              LDR      r3,[r0,#8]            ;78
00003a  815a              STRH     r2,[r3,#0xa]          ;78
00003c  bf00              NOP      
00003e  e7e0              B        |L6.2|
;;;81     
                          ENDP


                          AREA ||i.NodeMoveForward||, CODE, READONLY, ALIGN=1

                  NodeMoveForward PROC
;;;31     
;;;32     static USE_INLINE uint16_t NodeMoveForward(uint16_t max_node,uint16_t current_node)
000000  4602              MOV      r2,r0
;;;33     {
;;;34     	uint16_t next_node;
;;;35     	if((current_node+1) >= max_node)
000002  1c4b              ADDS     r3,r1,#1
000004  4293              CMP      r3,r2
000006  db01              BLT      |L7.12|
;;;36     	{
;;;37     		next_node = 0;
000008  2000              MOVS     r0,#0
00000a  e001              B        |L7.16|
                  |L7.12|
;;;38     	}
;;;39     	else
;;;40     	{
;;;41     		next_node = current_node + 1;
00000c  1c4b              ADDS     r3,r1,#1
00000e  b298              UXTH     r0,r3
                  |L7.16|
;;;42     	}
;;;43     	return next_node;
;;;44     }
000010  4770              BX       lr
;;;45     static USE_INLINE uint16_t NodeNumberInMoveForward(const sListManager *p_manager)
                          ENDP


                          AREA ||i.NodeNumberInMoveForward||, CODE, READONLY, ALIGN=1

                  NodeNumberInMoveForward PROC
;;;44     }
;;;45     static USE_INLINE uint16_t NodeNumberInMoveForward(const sListManager *p_manager)
000000  b570              PUSH     {r4-r6,lr}
;;;46     {
000002  4604              MOV      r4,r0
;;;47     		uint16_t new_in_node_number;
;;;48     		//if(p_manager == X_Null) {return 0;}  // no need null check ,because the caller is me 
;;;49     		new_in_node_number = NodeMoveForward(p_manager ->ValidNodeNumber,p_manager->p_LMP->first_in_node_num);
000004  68a2              LDR      r2,[r4,#8]
000006  88d1              LDRH     r1,[r2,#6]
000008  88a0              LDRH     r0,[r4,#4]
00000a  f7fffffe          BL       NodeMoveForward
00000e  4605              MOV      r5,r0
;;;50     		p_manager->p_LMP->first_in_node_num = new_in_node_number;
000010  68a0              LDR      r0,[r4,#8]
000012  80c5              STRH     r5,[r0,#6]
;;;51     		return new_in_node_number;
000014  4628              MOV      r0,r5
;;;52     }
000016  bd70              POP      {r4-r6,pc}
;;;53     static USE_INLINE uint16_t NodeNumberOutMoveForward(const sListManager *p_manager)
                          ENDP


                          AREA ||i.NodeNumberOutMoveForward||, CODE, READONLY, ALIGN=1

                  NodeNumberOutMoveForward PROC
;;;52     }
;;;53     static USE_INLINE uint16_t NodeNumberOutMoveForward(const sListManager *p_manager)
000000  b570              PUSH     {r4-r6,lr}
;;;54     {
000002  4604              MOV      r4,r0
;;;55     	uint16_t new_out_node_number;
;;;56     	//if(p_manager == X_Null) {return 0;} // no need null check ,because the caller is me 
;;;57     	new_out_node_number = NodeMoveForward(p_manager ->ValidNodeNumber,p_manager->p_LMP->first_out_node_num);
000004  68a2              LDR      r2,[r4,#8]
000006  8911              LDRH     r1,[r2,#8]
000008  88a0              LDRH     r0,[r4,#4]
00000a  f7fffffe          BL       NodeMoveForward
00000e  4605              MOV      r5,r0
;;;58     	p_manager->p_LMP->first_out_node_num = new_out_node_number;
000010  68a0              LDR      r0,[r4,#8]
000012  8105              STRH     r5,[r0,#8]
;;;59     	return new_out_node_number;
000014  4628              MOV      r0,r5
;;;60     
;;;61     }
000016  bd70              POP      {r4-r6,pc}
;;;62     X_Void 		LoopQueueInitialize(const sListManager *p_manager)
                          ENDP


                          AREA ||i.RealseLoopQueueBuf||, CODE, READONLY, ALIGN=1

                  RealseLoopQueueBuf PROC
;;;161    }
;;;162    X_Void      RealseLoopQueueBuf(const sListManager *p_manager,uint8_t buf_num)
000000  b900              CBNZ     r0,|L10.4|
                  |L10.2|
;;;163    {
;;;164    	if(p_manager == X_Null) {return;}
;;;165    	if(buf_num >= p_manager->ValidNodeNumber) {return;}
;;;166    	p_manager->p_buf[buf_num] = BUF_FREE;
;;;167    }
000002  4770              BX       lr
                  |L10.4|
000004  8882              LDRH     r2,[r0,#4]            ;165
000006  428a              CMP      r2,r1                 ;165
000008  dc00              BGT      |L10.12|
00000a  e7fa              B        |L10.2|
                  |L10.12|
00000c  2200              MOVS     r2,#0                 ;166
00000e  6803              LDR      r3,[r0,#0]            ;166
000010  545a              STRB     r2,[r3,r1]            ;166
000012  bf00              NOP      
000014  e7f5              B        |L10.2|
;;;168    uint16_t GetLoopQueueUsedNodeNumber(const sListManager *p_manager)
                          ENDP


                          AREA ||i.UpdataListState||, CODE, READONLY, ALIGN=1

                  UpdataListState PROC
;;;15     
;;;16     static USE_INLINE X_Void UpdataListState( const sListManager *p_manager)
000000  6881              LDR      r1,[r0,#8]
;;;17     {
;;;18     	//if(p_manager == X_Null) {return;} // no need null check ,because the caller is me 
;;;19     	if(p_manager->p_LMP->used_node_num == 0)
000002  8949              LDRH     r1,[r1,#0xa]
000004  b919              CBNZ     r1,|L11.14|
;;;20     	{
;;;21     		p_manager->p_LMP->state = QueueEmpty;
000006  2100              MOVS     r1,#0
000008  6882              LDR      r2,[r0,#8]
00000a  7111              STRB     r1,[r2,#4]
                  |L11.12|
;;;22     		return;
;;;23     	}
;;;24     	if(p_manager->p_LMP->used_node_num >= p_manager->ValidNodeNumber)
;;;25     	{
;;;26     		p_manager->p_LMP->state = QueueFull;
;;;27     		return;
;;;28     	}
;;;29     	p_manager->p_LMP->state = QueueNormal;
;;;30     }
00000c  4770              BX       lr
                  |L11.14|
00000e  6881              LDR      r1,[r0,#8]            ;24
000010  8949              LDRH     r1,[r1,#0xa]          ;24
000012  8882              LDRH     r2,[r0,#4]            ;24
000014  4291              CMP      r1,r2                 ;24
000016  db03              BLT      |L11.32|
000018  2102              MOVS     r1,#2                 ;26
00001a  6882              LDR      r2,[r0,#8]            ;26
00001c  7111              STRB     r1,[r2,#4]            ;26
00001e  e7f5              B        |L11.12|
                  |L11.32|
000020  2101              MOVS     r1,#1                 ;29
000022  6882              LDR      r2,[r0,#8]            ;29
000024  7111              STRB     r1,[r2,#4]            ;29
000026  bf00              NOP      
000028  e7f0              B        |L11.12|
;;;31     
                          ENDP

